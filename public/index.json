[{"categories":["notes"],"content":"更多HTTP头特性可参考：https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-1/:0:0","tags":["Node"],"title":"HTTP各种特性总览","uri":"/posts/notes/20200815/20200815-1/"},{"categories":["notes"],"content":"CORS跨域请求的限制与解决 在返回数据时设置头信息即可，例如： const http = require(\"http\"); http.createServer(function (req, res) { res.writeHead(200,{ \"Access-Control-Allow-Origin\":'*' }) }).listen(8888); 跨域是由浏览器限制的，浏览器允许img、script、link等标签访问不同域的内容。 将其中的*设置为某个域名，那么则标识只允许某个域名可以访问。但是只能一个域名，如果需要多个域名需要增加服务器逻辑进行判断。 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-1/:1:0","tags":["Node"],"title":"HTTP各种特性总览","uri":"/posts/notes/20200815/20200815-1/"},{"categories":["notes"],"content":"CORS跨域限制以及与请求验证 当请求头中包含一些自定义的头信息，那么默认情况下同样会收到跨域限制，因此需要设置允许的头： const http = require(\"http\"); http.createServer(function (req, res) { res.writeHead(200,{ \"Access-Control-Allow-Origin\":'*', //设置允许的请求头 \"Access-Control-Allow-Headers\":'X-Test-Cors', //设置允许的请求方法 \"Access-Control-Allow-Methods\":'POST,PUT,Delete', //设置最长时间，即1000S内无需再次发送预请求 \"Access-Control-Max-Age\":'1000', }) }).listen(8888); ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-1/:2:0","tags":["Node"],"title":"HTTP各种特性总览","uri":"/posts/notes/20200815/20200815-1/"},{"categories":["notes"],"content":"缓存头Cache-Control的含义和使用 public 任何代理服务器都可以对数据进行缓存 private 只有发起请求的浏览器可以缓存 no-cache 任何一个节点都不可以缓存 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-1/:3:0","tags":["Node"],"title":"HTTP各种特性总览","uri":"/posts/notes/20200815/20200815-1/"},{"categories":["notes"],"content":"设置缓存 const http = require(\"http\"); http.createServer(function (req, res) { res.writeHead(200,{ \"Cache-Control\":'max-age=20', }) }).listen(8888); 关于刷新缓存：可以文件名后加入根据内容生成的哈希码。 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-1/:3:1","tags":["Node"],"title":"HTTP各种特性总览","uri":"/posts/notes/20200815/20200815-1/"},{"categories":["notes"],"content":"重新验证 must-revalidate 如果缓存已经过期，需要向源服务端重新获取数据，不能直接使用 proxy-revalidate 缓存服务器必须在过期时在源服务器重新请求 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-1/:3:2","tags":["Node"],"title":"HTTP各种特性总览","uri":"/posts/notes/20200815/20200815-1/"},{"categories":["notes"],"content":"其他 no-store 本地和代理不可以缓存 no-transform 不可以随便改动返回的内容 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-1/:3:3","tags":["Node"],"title":"HTTP各种特性总览","uri":"/posts/notes/20200815/20200815-1/"},{"categories":["notes"],"content":"缓存验证Last-Modified和Etag的使用 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-1/:4:0","tags":["Node"],"title":"HTTP各种特性总览","uri":"/posts/notes/20200815/20200815-1/"},{"categories":["notes"],"content":"验证头 Last-Modified 上次修改时间，配合If-Modified-Since或者If-unModified-Since使用 Etag 数据签名，配合If-Match或者If-Non-Match使用，对比资源的签名判断是否使用缓存。 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-1/:4:1","tags":["Node"],"title":"HTTP各种特性总览","uri":"/posts/notes/20200815/20200815-1/"},{"categories":["notes"],"content":"Cookie和Seesion Cookie包含的属性 max-age和expires设置过期时间 Secure只在https的时候发送 HttpOnly无法通过document.cookie访问 const http = require(\"http\"); http.createServer(function (req, res) { res.writeHead(200,{ \"Cache-Control\":'max-age=20', // 设置过期时间2s的cookie \"Set-Cookie\":'id=123;max-age=2', \"Set-Cookie\":'abc=456', }) }).listen(8888); Cookie存在过期时间，如果不设置过期时间，那么过期时效为浏览器关闭时。 为主域设置Cookie后所有子域都可以使用Cookie。 Session通常的使用方法时，通过cookie设置session。 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-1/:5:0","tags":["Node"],"title":"HTTP各种特性总览","uri":"/posts/notes/20200815/20200815-1/"},{"categories":["notes"],"content":"HTTP长连接 HTTP1.1中有6个并发的链接。而HTTP2在一个TCP链接可以并发的发送多个请求，因此只需要一个链接即可！ 创建长连接 const http = require(\"http\"); http.createServer(function (req, res) { res.writeHead(200,{ \"Connection\":\"keep-alive\" }) }).listen(8888); Connection为close时，表示不适用http长链接。 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-1/:6:0","tags":["Node"],"title":"HTTP各种特性总览","uri":"/posts/notes/20200815/20200815-1/"},{"categories":["notes"],"content":"数据协商 服务端根据请求段携带的数据而确定返回何种数据。 客户端： Accept 明确想要接收数据的类型 Accept-Encoding 明确编码方式，限制服务端压缩方式 Accept-Language 明确返回信息是中文还是英文 User-Agent 判断浏览器信息 服务器端 Content-Type 作为真正返回的数据格式进行返回 Content-Encoding 对应Accept-Encoding Content-Language 对应Accept-Language ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-1/:7:0","tags":["Node"],"title":"HTTP各种特性总览","uri":"/posts/notes/20200815/20200815-1/"},{"categories":["notes"],"content":"Redirect 也就是重定向，必须将头设置为301或302 const http = require(\"http\"); const fs = require(\"fs\"); http .createServer(function (req, res) { console.log(\"request come\", req.url); if (req.url === \"/\") { res.writeHead(302, { Location: \"/new\", }); res.end(\"\"); } else { res.writeHead(200, { \"Content-Type\": \"text/html\", }); res.end(\"\u003cdiv\u003ethis is content\u003c/div\u003e\"); } }) .listen(8888); console.log(\"server listening on 8888\"); 浏览器会默认长期缓存301。因此使用301时要谨慎。 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-1/:8:0","tags":["Node"],"title":"HTTP各种特性总览","uri":"/posts/notes/20200815/20200815-1/"},{"categories":["notes"],"content":"CSP 限制资源获取 报告资源获取越权 限制方式 default-src限制全局 指定资源类型 img-src style-src script-src 。。。 const http = require(\"http\"); const fs = require(\"fs\"); http .createServer(function (req, res) { console.log(\"request come\", req.url); const html = fs.readFileSync(\"index.html\", \"utf-8\"); res.writeHead(200, { \"Content-Type\": \"text/html\", // 只允许http或者https方式加载，而不允许执行内联的script脚本 \"Content-Security-Policy\": \"default-src http: https:\", }); res.end(html); }) .listen(8888); console.log(\"server listening on 8888\"); \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript\u003e console.log(1) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 限制只能加载本服务器的内容 createServer(function (req, res) { console.log(\"request come\", req.url); const html = fs.readFileSync(\"index.html\", \"utf-8\"); res.writeHead(200, { \"Content-Type\": \"text/html\", // 限制只能加载本服务器的内容 \"Content-Security-Policy\": \"default-src \\'self\\'\", }); res.end(html); }) 限制只能加载某个网站的内容 createServer(function (req, res) { console.log(\"request come\", req.url); const html = fs.readFileSync(\"index.html\", \"utf-8\"); res.writeHead(200, { \"Content-Type\": \"text/html\", // 限制只能加载某个网站的内容 \"Content-Security-Policy\": \"default-src https://cdn.jsdelivr.com/\", }); res.end(html); }) 限制表单 createServer(function (req, res) { console.log(\"request come\", req.url); const html = fs.readFileSync(\"index.html\", \"utf-8\"); res.writeHead(200, { \"Content-Type\": \"text/html\", // 限制只能加载某个网站的内容 \"Content-Security-Policy\": \"default-src https://cdn.jsdelivr.com/; form-action \\'self\\'\", }); res.end(html); }) ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-1/:9:0","tags":["Node"],"title":"HTTP各种特性总览","uri":"/posts/notes/20200815/20200815-1/"},{"categories":["notes"],"content":"windows下使用nginx 通过官网下载Nginx，将其解压。在命令行内输入./nginx.exe即可启动。 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-2/:1:0","tags":["Node"],"title":"Nginx代理以及面向未来的HTTP","uri":"/posts/notes/20200815/20200815-2/"},{"categories":["notes"],"content":"基础代理配置 如果启动的nginx进程过多，可能会导致代理不生效！ 通过taskkill /IM nginx.exe /F命令可以清除所有nginx进程。 通过include server/*.conf实现为单独一个站点设置配置文件 http{ include server/*.conf } 此配置代表将server文件下的所有conf文件导入。 最简单的代理 server{ listen 80; server_name test.com; location /{ proxy_pass http://127.0.0.1:8888; # 修改代理头为请求的地址 proxy_set_header Host $host; } } 以上配置表示 当访问test.com时会映射到本地8888端口。$host表示请求的地址。 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-2/:2:0","tags":["Node"],"title":"Nginx代理以及面向未来的HTTP","uri":"/posts/notes/20200815/20200815-2/"},{"categories":["notes"],"content":"代理缓存 proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m; server{ listen 80; server_name test.com; location / { proxy_pass http://127.0.0.1:8888; # 修改代理头为请求的地址 proxy_set_header Host $host; # 设置缓存(名字与上方对应) proxy_cache my_cache; } } 可以使用Vary对不同请求头设置缓存。 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-2/:3:0","tags":["Node"],"title":"Nginx代理以及面向未来的HTTP","uri":"/posts/notes/20200815/20200815-2/"},{"categories":["notes"],"content":"HTTPS 证书生成命令： openssl req -x509 -newkey rsa:2048 -nodes -sha256 -keyout localhost-privkey.pem -out localhost-cert.pem 通过nginx部署https服务 server{ listen ssl; server_name test.com; ssl on; ssl_certificate_key ../certs/localhost-privkey.pem; ssl_certificate ../certs/localhost-cert.pem; location / { proxy_pass http://127.0.0.1:8888; # 修改代理头为请求的地址 proxy_set_header Host $host; } } 其中将证书放到了根目录下certs文件夹下。 访问自动跳转https server{ listen 80 default_server; listen [::]:80 default_server; server_name test.com; return 302 https://$server_name$request_url; } ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-2/:4:0","tags":["Node"],"title":"Nginx代理以及面向未来的HTTP","uri":"/posts/notes/20200815/20200815-2/"},{"categories":["notes"],"content":"HTTP2的优势 信道复用 分帧传输 Server Push HTTP1.1中 HTTP2中 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-2/:5:0","tags":["Node"],"title":"Nginx代理以及面向未来的HTTP","uri":"/posts/notes/20200815/20200815-2/"},{"categories":["notes"],"content":"通过nginx设置HTTP2 server{ listen ssl http2; http2_push_preload on; } http2必须在https的基础上开启。 ","date":"2020-08-15","objectID":"/posts/notes/20200815/20200815-2/:6:0","tags":["Node"],"title":"Nginx代理以及面向未来的HTTP","uri":"/posts/notes/20200815/20200815-2/"},{"categories":["notes"],"content":"经典五层模型介绍 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:1:0","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"第三层 物理层 定义物理设备如何传输数据 数据链路层 在通信的实体间建立数据链路连接 网络层 数据在节点之间传输创建逻辑链路 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:1:1","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"传输层 向用户提供可靠的端到端（End-to-End）服务 传输层向高层屏蔽了下层数据通信的细节 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:1:2","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"应用层 为应用软件提供了很多服务，构建与TCP协议之上。屏蔽了网络传输相关细节 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:1:3","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"HTTP协议的发展历史 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:2:0","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"HTTP/0.9 只有一个命令GET 没有HEADER等描述数据的信息 服务器发送完毕，就关闭TCP连接 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:2:1","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"HTTP/1.0 增加了很多命令 增加status code和header 多字符集支持、多部分发送、权限、缓存等 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:2:2","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"HTTP/1.1 持久连接 pipeline 增加了host和其他一些命令 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:2:3","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"HTTP2 所有数据以二进制传输 同一个连接里面发送多个请求不在需要按照顺序来 头信息压缩以及推送提高效率的功能 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:2:4","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"三次握手 过程：张三招手–李四点头微笑–李四招手–张三点头微笑 。其中李四连续进行了2个动作，先是点头微笑(回复对方)，然后再次招手(寻求确认)，实际上可以将这两个动作合一，招手的同时点头和微笑(syn+ack)。于是四个动作就简化成了三个动作，张三招手–李四点头微笑并招手–张三点头微笑。这就是三次握手的本质，中间的一次动作是两个动作的合并。 图的解释： client端发送syn字段，请求连接 server端回复ack、syn字段字段确定与之连接 client接到确认后进入established已建立状态，并发送ack字段确认对方的连接 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:3:0","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"URI、URL、URN ","date":"2020-08-12","objectID":"/posts/notes/20200812/:4:0","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"URI Uniform Resource Identifier ：统一资源标识符 用来唯一标识互联网上的信息资源，包括URL和URN ","date":"2020-08-12","objectID":"/posts/notes/20200812/:4:1","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"URL Uniform Resource Locator：统一资源定位器 http://user:pass@host.com:80/path?query=string#hash，此类格式的都叫URL，比如ftp协议 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:4:2","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"URN 永久统一资源定位符，资源移动之后还能被找到。但目前还没有非常成熟的使用方案 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:4:3","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"HTTP报文格式 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:5:0","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"HTTP方法 用来定义对于资源的操作，常用的操作有GET、POST等。 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:5:1","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"HTTP CODE 定义服务器对请求的处理结果，各个区间的CODE有各自的语义。好的HTTP服务可以通过CODE判断结果。 ","date":"2020-08-12","objectID":"/posts/notes/20200812/:5:2","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"使用nodejs实现一个最简单的服务器 const http = require(\"http\"); http .createServer(function (req, res) { console.log(\"request come\", req.url); res.end(\"123\"); }) .listen(8888); ","date":"2020-08-12","objectID":"/posts/notes/20200812/:6:0","tags":null,"title":"HTTP协议基础及发展历史","uri":"/posts/notes/20200812/"},{"categories":["notes"],"content":"跨域资源共享是什么 CORS全称为Cross-Origin Resource Sharing，被译为跨域资源共享，新増了一组HTTP首部字段，允许服务器声明哪些源站有权限访问哪些资源。 跨域资源共享标规范要求，对那些可能对服务器数据产生副作用的HTTP请求方法（特别是GET以外的HTTP请求，或者搭配某些MIME类型的POST请求），浏览器必须首先使用OPTIONS方法发起一个预检请求，从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的HTTP请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证。 跨域资源共享机制的工作原理主要应用于三个场景 简单请求 预检请求 认证请求 ","date":"2020-08-11","objectID":"/posts/notes/20200811/:1:0","tags":null,"title":"跨域资源共享","uri":"/posts/notes/20200811/"},{"categories":["notes"],"content":"简单请求 请求方法为：GET、HEAD、POST其中一个 不得人为设置下列集合之外的其他首部字段：Accept、Accept-Language、Content-Language、Content-Type Content-Type的值仅限以下三者之一 text/plain multipart/form-data application/x-www-form-urlencoded 值得注意的是，这些跨域请求与浏览器发出的其他跨域请求并无二致。如果服务器未返回正确的响应首部，则请求方不会收到任何数据。因此，那些不允许跨域请求的网站无需为这一新的HTTP访问控制特性担心。 ","date":"2020-08-11","objectID":"/posts/notes/20200811/:2:0","tags":null,"title":"跨域资源共享","uri":"/posts/notes/20200811/"},{"categories":["notes"],"content":"预检请求 ","date":"2020-08-11","objectID":"/posts/notes/20200811/:3:0","tags":null,"title":"跨域资源共享","uri":"/posts/notes/20200811/"},{"categories":["notes"],"content":"预检请求是什么 请求方法为：PUT、DELETE、CONNECT、OPTIONS、TRACE、PATH 不得人为设置下列集合之外的其他首部字段：Accept、Accept-Language、Content-Language、Content-Type Content-Type的值仅限以下三者之一 text/plain multipart/form-data application/x-www-form-urlencoded 预检请求要求必须首先使用OPTONS方法发起一个预检请求到服务器，以获取服务器是否允许该实际请求。 预检请求可以避免跨域请求对服务器的用户数据产生未预期的影响。 ","date":"2020-08-11","objectID":"/posts/notes/20200811/:3:1","tags":null,"title":"跨域资源共享","uri":"/posts/notes/20200811/"},{"categories":["notes"],"content":"认证请求 XMLHttpRequest与 CORS 的一个有趣的特性是，可以基于HTTP cookies和 HTTP 认证信息发送身份凭证。一般而言，对于跨域 XMLHttpRequest 请求，浏览器不会发送身份凭证信息。如果要发送凭证信息，需要设置 XMLHttpRequest 的某个特殊标志位。 xmlHttpRequest.withCredentials = true withCredentials 标志设置为 true，从而向服务器发送 Cookies。因为这是一个简单 GET 请求，所以浏览器不会对其发起“预检请求”。但是，如果服务器端的响应中未携带 Access-Control-Allow-Credentials: true ，浏览器将不会把响应内容返回给请求的发送者。 ","date":"2020-08-11","objectID":"/posts/notes/20200811/:4:0","tags":null,"title":"跨域资源共享","uri":"/posts/notes/20200811/"},{"categories":["notes"],"content":"HTTP的缓存机制 ","date":"2020-08-10","objectID":"/posts/notes/20200810/:1:0","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"缓存是什么 缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。当Web缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载。 缓存需要合理配置，因为并不是所有资源都是永久不変的。重要的是对一个资源的缓存应截止到其下次发生改变（即不能缓存过期的资源）。 缓存服务器端的数据的优点 缓解服务器端的资源消耗和运行压力，提升服务器端的整体性能。 减少服务器端资源加载的延迟，进而成少显示某个资源所用的时间 减少对带宽造成的压力，避免网络阻塞问题的出现 Web站点变得更具有响应性 常见的HTTP缓存只能存储GET响应，对于其他类型的响应则无能为力。 检索请求的成功响应：响应状态码为200,则表示为成功。包含例如HTML文档，图片，或者文件的响应。 不变的重定向：响应状态码为301 错误响应：响应状态码为404的一个页面。 不完全的响应：响应状态码为206,只返回局部的信息。 除了GET请求外，如果匹配到作为ー个已被定义的cache键名的响应。 ","date":"2020-08-10","objectID":"/posts/notes/20200810/:1:1","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"缓存类型 ","date":"2020-08-10","objectID":"/posts/notes/20200810/:2:0","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"私有缓存 私有缓存只能用于单独用户。洳览器缓存拥有用户通过HTTP下载的所有文档。这些缓存为浏览过的文档提供向后/向前导航、保存网页、查看源码等功能，可以避免再次向服务器发起多余的请求。它同样可以提供缓存內容的离线览。 Cache-Control:private ","date":"2020-08-10","objectID":"/posts/notes/20200810/:2:1","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"共享缓存 共享缓存可以被多个用户使用。例如，ISP或所在的公司可能会架设一个web代理来作为本地网络基础的一部分提供给用户。这样热门的资源就会被重复使用，减少网络拥堵与延迟 Cache-Control:public ","date":"2020-08-10","objectID":"/posts/notes/20200810/:2:2","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"缓存控制 ","date":"2020-08-10","objectID":"/posts/notes/20200810/:3:0","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"Cache-control头 HTTP/1.1定义的Cache-Control头用来区分对缓存机制的支持情况，请求头和响应头都支持这个属性。通过它提供的不同的值来定义存策略。 禁止进行缓存 Cache-Control: no-store Cache-Control: no-cache, no-store, must-revalidate 强制确认缓存 Cache-Control: no-cache 缓存过期机制 Cache-Control: max-age=31536000 缓存验证确认 Cache-Control: must-revalidate ","date":"2020-08-10","objectID":"/posts/notes/20200810/:3:1","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"Pragma头 Pragma头是HTTP/1.0标准中定义的一个header属性，请求中包含Pragma的效果跟在头信息中定义“Cache-Control:no-cache”相同。但是HTTP的响应头不支持这个属性，所以它不能拿来完全替代HTTP/1.1中定义的Cache-Control头。通常定义Pragma以向后兼容基于HTTP/1.0的客户。 Pragma: no-cache ","date":"2020-08-10","objectID":"/posts/notes/20200810/:3:2","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"Expires头 Expires响应头包含日期/肘间，即在此时候之后，响应过期。 无效的日期，比如0代表着过去的日期，即该资源已经过期。 如果在Cache-Control响应头设置了“max-age”或者“s-max-age”指令，那么 Expires头会被忽略 Expores: Wed,21 Oct 2015 07:28:00 GMT ","date":"2020-08-10","objectID":"/posts/notes/20200810/:3:3","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"Cookie ","date":"2020-08-10","objectID":"/posts/notes/20200810/:4:0","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"Cookie是什么 Cookie是服务器发送到用户浏览器并保存在本地的一小块数据，会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。 通常，Cookie用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。 cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能。Cookie技术产生源于HTTP协议在互联网上的急速发展。 Cookie曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段。但现在随着现代洳览器开始支持各种各杵的存储方式， Cookie渐渐被淘汰。由于服务器指定Cookie后，浏览器的每次请求都会携带Cookie数据，会带来额外的性能开销。 ","date":"2020-08-10","objectID":"/posts/notes/20200810/:4:1","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"Cookie的存储 Cookie保存在客户端某个特定的目录下的一个扩展名为“.txt”文本文件中，井且不同站点的 Cookie数据保存不同的文件中。 Cookie数据一般都是加密后保存的。 ","date":"2020-08-10","objectID":"/posts/notes/20200810/:4:2","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"Cookie的作用域 Domain和Path标识定义了Cookie的作用域，即Cookie应该发送给哪些URL. Domain标识指定了哪些主机可以接受Cookie 如果不指定，默认为当前文档的主机（不包含子域名）。 如果指定了 Domain，则一般包含子域名。例如，如果设置Domain=wolongxueyuan.com,则（Cookie也包含在子域名中（如developer.wolongxueyuan.com). Path标识指定了主机下的哪些路径可以接受Cookie（该URL路径必须存在于请求URL中）。以字符%x2F(“/”）作为路径分隔符，子路径也会被匹配。 ","date":"2020-08-10","objectID":"/posts/notes/20200810/:4:3","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"Cookie的有效期 Max-Age和 Expires/标识定义了 Cookie的有效期，即 Cookie的生命周期。 会话期Cookie 会话期Cookie是最简单的Cookie。浏览器关之后Cookie会被自动删除，也就是说cookie仅在会话期内有效。会话期 Cookie不需要指定过期时间（Expires）或者有效期（MaxーAge) 持久性Cookie 持久性 Cookie可以指定一个特定的过期时间（ Expires）或有效期（Max-Age) ","date":"2020-08-10","objectID":"/posts/notes/20200810/:4:4","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"Cookie的应用 Cookie主要用于以下三个方面 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息） 个性化设置（如用户自定义设置、主题等） 浏览器行为跟踪（如跟踪分析用户行为等） ","date":"2020-08-10","objectID":"/posts/notes/20200810/:4:5","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"访问与更新Cookie ","date":"2020-08-10","objectID":"/posts/notes/20200810/:5:0","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"创建Cookie Cookie存储可以是多个内容，其格式为键值对name=value。多个内容中间用;隔开。 document.cookie = 'name=zhuangwuji' ","date":"2020-08-10","objectID":"/posts/notes/20200810/:5:1","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"读取Cookie allCookies被赋值为一个字符串，该字符串包含所有的Cookie，每条cookie以分号分隔（即key= value键值对）。 var allCookies = document.cookie console.log(allCookies); var arr = allCookies.split(';') for (var i = 0; i \u003c arr.length; i++) { var cookie = arr[i] var cookiePair = cookie.split('=') console.log(cookiePair[0] + '=' + cookiePair[1]); } ","date":"2020-08-10","objectID":"/posts/notes/20200810/:5:2","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"修改Cookie 与创建类似。 document.cookie = 'name=zhuangwuji' ","date":"2020-08-10","objectID":"/posts/notes/20200810/:5:3","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"删除Cookie 删除Cookie只需要将键对应的值设置为空，并且把Expires标识为以前的时间即可。 document.cookie = 'name=;expires=Thu,01 jan 1970 00:00:00 GMT' ","date":"2020-08-10","objectID":"/posts/notes/20200810/:5:4","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"HTTP中的Cookie ","date":"2020-08-10","objectID":"/posts/notes/20200810/:6:0","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"Set-Cookie响应头 服务器使用Set-Cookie响应头部向用户代理（一般是浏览器）发送cookie信息。一个简单的Cookie可能像这样 Set-Cookie: \u003ccookie名\u003e=\u003ccookie值\u003e 服务器通过该头部告知客户端保存Cookie信息。 HTTP/1.0 200 ok Content-type: text/html Set-Cookie: yummy_cookie=choco Set-Cookie: tasty_cookie=strawberry ","date":"2020-08-10","objectID":"/posts/notes/20200810/:6:1","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"Cookie请求头 对服务器发起的每一次新请求，浏览器都会将之前保存的Cookie信息通过Cookie请求头部再发送给服务器。 GET /sample_page.html HTTP/1.1 Host: www.example.org Cookie: yummy_cookie=choco;tasty_cookie=strawberry ","date":"2020-08-10","objectID":"/posts/notes/20200810/:6:2","tags":null,"title":"HTTP缓存机制与Cookie","uri":"/posts/notes/20200810/"},{"categories":["notes"],"content":"HTTP报文 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:1:0","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"HTTP报文是什么 HTTP报文，又称HTTP消息，是服务器和客户端之间交换数据的方式。有两种类型的消息：请求，由客户端发送用来触妓一个服务器上的动作；响应，来自服务器的应答。 HTTP消息由采用ASCII编码的多行文本构成。在HTTP/1.1及早期版本中，这些消息通过连接公开地发送。在HTTP/2中，为了优化和性能方面的改进，曾经可人工阅读的消息被分到多个HTTP帧中。 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:1:1","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"HTTP请求报文 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:1:2","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"HTTP响应报文 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:1:3","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"HTTP消息 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:2:0","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"HTTP消息结构 start line：一行起始行用于描述要执行的请求，或者是对应的状态，成功或失败。这个起始行总是单行的。 HTTP headers：一个可选的HTTP头集合指明请求或描述消息正文。 empty line:-个空行指示所有美于请求的元数据已经发送完毕。 body：一个可选的包含请求相美数据的正文（比如HTML表单内容）或者响应相美的文档。正文的大小有起始行的HTTP头来指定。 起始行和HTTP消息中的HTTP头统称为“请求头”，而其有效负载被称为“消息正文”。 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:2:1","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"请求消息与响应消息 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:2:2","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"请求消息 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:3:0","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"起始行 起始行包含三个元素 请求方法 请求地址 HTTP版本 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:3:1","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"请求方法 请求方法 描述 GET GET方法请求一个指定资源的表示形式。使用GET的请求应该只被用于获取数据 HEAD HEAD方法请求一个与GET请求的响应相同的响应，但没有响应体 POST POST方法用于将实体提交到指定的资原，通常导致状态或服务器上的副作用的更改 PUT PUT方法用请求有效载荷替换目标资源的所有当前表示 DELETE DELETE方法删除指定的资源 CONNECT ONNECT方法建立一个到由目标资源标识的服务器的隧道 OPTIONS OPTIONS方法用于描述目标资源的通信选项 TRACE TRACE方法沿着到目标资源的路径执行一个消息环回测试 PATCH PATCH方法用于对资源应用部分修改 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:3:2","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"请求头 请求头允许客户端向服务器端传递附加信息。请求头由名称（不区分大小写）后跟一个冒号“：”，冒号后跟具体的值（不带换行符）组成。 根据不同上下文，可将请求头分为： 通用头：同时适用于请求和响应消息，但与最终消息主体中传输的数据无美的消息头 请求头：包含更多有关要获取的资源或客户端本身信息的消息头。 实体头：包含有关实体主体的更多信息，比如加主体长 Content- Length）度或其MIME类型。 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:3:3","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"请求主体 请求消息的最后一部分是请求主体。 不是所有的请求都需要请求主体：例如获取资源的请求GET、HEAD、 DELEE和 OPTIONS通常它们不需要请求主体。 有些请求将数据妓送到服务器以便更新数据：常见的的情况是POST请求（包含HTML表单数据）。 请求主体大致可分为两类 单一资原圭体：由一个单文件组成。该类型请求主体由两个 header定义： Content-Type和Content-length 多资源主体：由多部分请求主体组成，每一部分包含不同的信息位。通常是和HTML表单连系在一起 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:3:4","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"响应消息 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:4:0","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"状态行 HTTP响应消息的起始行被称作状态行（statusline),包含以下信息： 协议版本：通常为HTTP/1.1 状态码：表明请求是成功或失败。常见的状态码是200,404,或302. 状态文本：一个简短的，纯粹的信息，通过状态码的文本描述，帮助人们理解该HTTP消息 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:4:1","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"响应头 响应头允许服务器端向客户端传递附加信息。响应头由名称（不区分大小写）后跟一个冒号“：”，冒号后跟具体的值（不带换行符）组成 根据不同上下文，可将响应头分为 通用头：同时适用于请求和响应消息，但与最终消息主体中传输的数据无关的消息头。 响应头：包含有关响应的补充信息，如其位置或服务器本身（名称和版本等）的消息头。 实体头：包含有关实体主体的更多信息，比如主体长（ Content- Length）度或其MIME类型。 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:4:2","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"响应主体 响应消息的最后一部分是响应主体。不是所有的响应都需要响应主体：例如具有状态码（如201或204)的响应，通常不会有响应主体。 响应主体大致可分为两类 单一资源主体：由已知长度的单个文件组成。该类型响应主体由两个 header定义： Content Type和 Content-length 单一资原主仲：由未知长度的单个文件组成，通过将 Transfer- Encoding设置为 chunked来使用chunks编码 多资源主体：由多部分响应主体组成，每部分包含不同的信息段。但这是比较少见的。 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:4:3","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"状态码 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:5:0","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"信息响应 状态码 描述 100 Continue 这个临时响应表明，迄今为止的所有内容都是可行的，客户端应该继续请求，如果已经完成，则忽略它 101 Switching Protocol 该代码是响应客户端的 Upgrade标头发送的，井且指示服务器也正在切换的协议 102 Processing 此代码表示服务器已到井正在处理该请求，但没有响应可用 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:5:1","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"成功响应 状态码 描述 200 OK 请求成功 201 Created 该请求已成功，并因此创建了一个新的资源。这通常是在PUT请求之后发送的响应 202 Accepted 请求已经接收到，但还未响应，没有结果 203 Non-authoritative Information 服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝 204 No Content 服务器成功处理了请求，但不需要返回任何实体内容，井且希望返回更新了的元信息 205 Reset Content 服务器成功处理了请求，且没有返回任何内容。该响应主要是被用于接受用户输入后，立即重置表单 206 Partial Content 服务器已经成功处理了部分GET请求 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:5:2","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"重定向 状态码 描述 300 Multiple Choice 被请求的资源有一系列可供选择的回馈信息 301 Moved Permanently 被请求的资源已永久移动到新位置 302 Found 请求的资源现在临时从不同的URI响应请求 303 See Other 对应当前请求的响应可以在另一个UN上被找到，而且客户端应当采用GET的方式访问那个资源 304 Not Modified 如果客户端发送了一个带条件的GET请求且该请求已被允许，而文档的内容自上次访问以来或者根据请求的条件）并没有改变 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:5:3","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"客户端响应 状态码 描述 400 Bad Request 语义有误，当前请求无法被服务器理解 401 Unauthorized 当前请求需要用户验证 403 Forbidden 服务器已经理解请求，但是拒绝执行它 404 Not Found 请求失败，请求所希望得到的资源未被在服务器上发现 405 Method Not Allowed 请求行中指定的请求方法不能被用于请求相应的资源 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:5:4","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"服务端响应 状态码 描述 500 Internal Server Error 服务器遇到了不知道如何处理的情况 501 Not Implemented 此请求方法不被服务器支持且无法被处理 502 Bad Gateway 此错响应表明服务器作为网关需要得到一个处理这个请求的响应 503 Service Unavailable 服务器没有备好处理请求 504 Gateway Timeout 当服务器作为网关，不能及时得到响应时返回此错误代码 505 HTTP Version Not Supported 服务器不支持请求中所使用的HTTP协议版本 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:5:5","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"MIME消息 MIME类型全称为 Multipurpose Internet Mail Extensions，被译为多用途 Internet邮件扩展类型，是一种标准化的方式来表示文档的性质和格式。 浏览器通常使用MIME类型（而不是文件扩展名）来确定如何处理文档；因此服务器设置正确以将正确的MIME类型附加到响应对象的头部是非常重要的。 类型 描述 经典实例 text 表明文件是普通文本 text/plain,text/html image 表明是某种图像 image/png audio 标明是某种音频文件 audio/webm video 标明是某种视频文件 video/webm application 表明是某种二进制数据 application/octet-stream ","date":"2020-08-08","objectID":"/posts/notes/20200808/:6:0","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"HTTP1.x的缺点 HTTP/1.x报文有一些性能上的缺点 消息头不像消息主体一样会被压缩 两个报文之间的header通常非常相似，但它们仍然在连接中重复传输。 无法复用。当在同一个服务器打开几个连接时，TCP热连接比冷连接更加有效。 HTTP/2.0引入了ー个额外的步骤，它将HTTP/1.x消息分成帧并嵌入到流（stream）中 ","date":"2020-08-08","objectID":"/posts/notes/20200808/:7:0","tags":null,"title":"HTTP消息","uri":"/posts/notes/20200808/"},{"categories":["notes"],"content":"HTTP是什么？ HTP全称为 Hypertext Transfer Protocol，被译为超文本传输协议，是互联网上应用最为广泛的一种网络协议。 HTTP协议是在Web上进行数据交换的基础，是一种“客户端——服务器端”协议。也就是说，请求通常是由像浏览器这样的接受方发起的。一个完整的Web文档通常是由不同的子文档拼接而成的，像是文本、布局描述、图片、视频、脚本等等。 设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。 ","date":"2020-08-07","objectID":"/posts/notes/20200807/:1:0","tags":null,"title":"HTTP是什么","uri":"/posts/notes/20200807/"},{"categories":["notes"],"content":"HTTP请求与响应消息 客户端和服务端通过交换各自的消息（与数据流正好相反）进行交互。 由像浏览器这样的客户端发出的消息叫做请求（requests) 被服务端回应的消息叫做响应（responses） ","date":"2020-08-07","objectID":"/posts/notes/20200807/:2:0","tags":null,"title":"HTTP是什么","uri":"/posts/notes/20200807/"},{"categories":["notes"],"content":"基于HTTP的组件系统 请求通过一个实体被发出，实体也就是用户代理。大多数情况下，这个用户代理都是指刘览器。 每一个发送到服务器的请求，都会被服务器处理井返回一个消息，也就是响应。 在这个请求与回应之间，还有许许多多的被称为 Proxies的实体，他们的作用与表现各不同。 ","date":"2020-08-07","objectID":"/posts/notes/20200807/:3:0","tags":null,"title":"HTTP是什么","uri":"/posts/notes/20200807/"},{"categories":["notes"],"content":"客户端 user-agent就是任何能够为用户发起行为的工具。这个角色通常都是由刘览器来扮演。一些例外情况，比如是工程师使用的程序，以及Web开发人员调试应用程序。 测览器总是作为发起一个请求的实体（近几年已经出现一些机制能够模拟由服务器起的请求消息，例姒如Node.js) 浏览器首先发送一个请求来获取页面的HTML文档，再解析文档中的资源信息发送其他请求，获取可执行脚本或CSS样式来进行页面布局這染，以及一些其它页面资源（如图片和视频等）。然后，浏览器将这些资源整合到一起，展现出一个完整的文档，也就是网页。 ","date":"2020-08-07","objectID":"/posts/notes/20200807/:3:1","tags":null,"title":"HTTP是什么","uri":"/posts/notes/20200807/"},{"categories":["notes"],"content":"Web服务器 在HTTP协议通信过程的另一端，是由Web服务器来服务并提供客户端所请求的文档。服务器只是虚拟意义上代表一个机器：它可以是共享负载（负载均衡）的一组服务器组成的计算机群，也可以是种复杂的软件，通过向其他计算机（如缓存，数据库服务器，电子商务服务器等）发起请求来获取部分或全部资源。 Web服务不ー定是一台机器，但一个机器上可以装载的众多Web服务。 ","date":"2020-08-07","objectID":"/posts/notes/20200807/:3:2","tags":null,"title":"HTTP是什么","uri":"/posts/notes/20200807/"},{"categories":["notes"],"content":"代理（Proxies） 在洳览器和服务器之间，有许多计算机和其他设备转发了HTTP消息。由于Web栈层次结构的原因它们大多都出现在传输层、网络层和物理层上，对于HTTP应用层而言就是透明的，虽然它们可能会对应用层性能有重要影响。还有一部分是表现在应用层上的，被称为代理（ Proxies）。代理（ Proxies）既可以表现得透明，又可以不透明（“改变请求”会通过它们）。代理主要有如下几种作用： 缓存（可以是公开的也可以是私有的，像浏览器的缓存） 过滤（像反病毒扫描，家长控制） 负载均衡（让多个服务器服务不同的请求） 认证（对不同资源进行权限管理） 日志记录（允许存储历史信息） ","date":"2020-08-07","objectID":"/posts/notes/20200807/:3:3","tags":null,"title":"HTTP是什么","uri":"/posts/notes/20200807/"},{"categories":["notes"],"content":"HTTP的相关概念 ","date":"2020-08-07","objectID":"/posts/notes/20200807/:4:0","tags":null,"title":"HTTP是什么","uri":"/posts/notes/20200807/"},{"categories":["notes"],"content":"HTTP的基本特性 HTTP是简单的 虽然下一代HTP/2协议将HTTP消息封装到了帧中，HTTP大体上还是被设计得简单易读。HTTP报文能够被人读懂，还允许简单测试，降低了门槛。 HTTP是可扩展的 在HTTP/1.0中出现的HTTP headers让协议扩展变得非常容易 HTTP是无状态，有会话的 在同一个连接中，两个执行成功的请求之间是没有关系的。这就带来了一个问题，用户没有办法在同一个网站中进行连续的交互。 HTTP和连接 一个连接是由传输层来控制的，这从根本上不属于HTTP的范围。 ","date":"2020-08-07","objectID":"/posts/notes/20200807/:4:1","tags":null,"title":"HTTP是什么","uri":"/posts/notes/20200807/"},{"categories":["notes"],"content":"HTTP能控制什么 缓存 开放同源限制 认证 基本的认证功能可以直接通过HTTP提供，或用HTTP Cookies来设置指定的会话 代理和隧道 通常情况下，服务器和/或客户端是处于内网的，对外网隐藏真实IP地址。因此HTTP请求就要通过代理越过这个网络屏障。 会话 ","date":"2020-08-07","objectID":"/posts/notes/20200807/:4:2","tags":null,"title":"HTTP是什么","uri":"/posts/notes/20200807/"},{"categories":["notes"],"content":"HTTP流 打开一个TCP连接：TCP连接被用来发送一条或多条请求，以及接受回应消息。 发送一个HTTP报文：HTTP报文（在HTTP2之前）是语义可读的 读取服务端返回的报文信息 关闭连接或者为后续请求重用连接。 ","date":"2020-08-07","objectID":"/posts/notes/20200807/:4:3","tags":null,"title":"HTTP是什么","uri":"/posts/notes/20200807/"},{"categories":["project"],"content":" 下载源码\r","date":"2020-07-12","objectID":"/posts/project/20200712/:0:0","tags":null,"title":"Express框架实现一个简单的博客系统","uri":"/posts/project/20200712/"},{"categories":["project"],"content":"前言 这篇文章是记录一下自己动手完成一个博客开发的历程。 一个前台靠扒别人页面后端靠layui实现的博客。 至此博客开坑任务基本完成 ","date":"2020-07-12","objectID":"/posts/project/20200712/:1:0","tags":null,"title":"Express框架实现一个简单的博客系统","uri":"/posts/project/20200712/"},{"categories":["project"],"content":"2020-07-15 图片懒加载 \rfancybox预览图像 \r","date":"2020-07-12","objectID":"/posts/project/20200712/:2:0","tags":null,"title":"Express框架实现一个简单的博客系统","uri":"/posts/project/20200712/"},{"categories":["project"],"content":"图片懒加载与fancybox 在此项目中无论是图片懒加载还是fancybox预览图像都需要对img标签进行处理。其次在本项目中渲染markdown使用的插件为marked，只需要重写渲染img标签的方法即可（都需要提前引入jQuery）。 var renderer = new marked.Renderer(); renderer.image = function(url,title,text){ return `\u003cimg class='test' src={url} title='${title}' alt='${text}'\u003e` } 如以上代码，会在渲染img标签时加入一个class名为test的属性。因此加入图片懒加载与fancybox就只需要在这个方法上做文章就好了。 图片懒加载 引入https://cdn.jsdelivr.net/npm/lazyload@2.0.0-rc.2/lazyload.js一个js库，然后将图片加入一个类名或者id名，用于表示哪些图片需要懒加载。然后将src属性改成没有被加载时图片，data-src为真实的图片地址。 renderer.image = function(url,title,text){ return `\u003cimg class='lazyload' src='https://cdn.jsdelivr.net/gh/sviptzk/StaticFile_HEXO@v3.2.8/butterfly/img/loading8.gif' title='${title}' alt='${text}' data-src=${url}\u003e` } 接下来调用方法即可，由于是jQuery的插件，因此只需要用jQuery的入口函数找到需要懒加载的图片，然后调用方法即可。 $(\".lazyload\").lazyload(); fancybox 同样的引入js文件与css文件 js https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js css https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css 加下来只需要给原本的img标签外边套一个a标签即可。其href属性就是图片的地址，data-caption属性就是图片的描述（alt），但还有一个标识属性data-fancybox renderer.image = function(url,title,text){ return `\u003ca style=\"cursor: zoom-in\" data-caption=\"${text}\" data-fancybox=\"gallery\" href=${url}\u003e\u003cimg class=\"lazyload\" src=${returnObj.configs.lazyloadImg}data-src=${url}alt=\"${text}\"\u003e\u003c/a\u003e` } ","date":"2020-07-12","objectID":"/posts/project/20200712/:2:1","tags":null,"title":"Express框架实现一个简单的博客系统","uri":"/posts/project/20200712/"},{"categories":["project"],"content":"2020-07-14 一个404页面 \r后台部分列表可以进行搜索 \r修改了部分逻辑，略微减少代码量 \r文章可指定显示顺序 \r去除了部分不必要的页面 \r前台可以修改个人信息 \r下次更新可能要等8月3日之后了！！！ \r","date":"2020-07-12","objectID":"/posts/project/20200712/:3:0","tags":null,"title":"Express框架实现一个简单的博客系统","uri":"/posts/project/20200712/"},{"categories":["project"],"content":"模糊搜索及表格重载 利用layui的表格重载进行模糊搜索。（实现这个着实麻烦） 在头部工具条添加搜索框 script#toolbarDemo(type='text/html'). \u003cdiv\u003e搜索配置： \u003cdiv class=\"layui-inline\"\u003e \u003cinput class=\"layui-input\" id=\"search\" name=\"search\" autocomplete=\"off\"\u003e \u003c/div\u003e \u003cbutton class=\"layui-btn layui-btn-sm\" data-type=\"reload\" id=\"search-btn\"\u003e搜索\u003c/button\u003e \u003ca class=\"layui-btn layui-btn-sm\" lay-event=\"addConfig\"\u003e添加配置\u003c/a\u003e \u003c/div\u003e 为表格绑定重载事件 layui.use('table', function () { .... , id: \"configTable\" $('body').delegate('#search-btn', 'click', function () { // 获取输入框的值 var val =$('#search').val() // 重载的表格，也就是上边的ID table.reload('configTable', { page: { curr: 1 //重新从第 1 页开始 } // where表示附加的条件 , where: { search: val }, }, 'data'); }) } 重写获取数据的接口 方法 getConfig: function (page, limit,search) { obj = {} var find = {} // 需要判断search是否传入从而设置是否需要查询条件 if(search){ find={ $or:[ {configdesc:{$regex:search}}, {configname:{$regex:search}}, {configvalue:{$regex:search}}, ]} } return Config.countDocuments().then((count) =\u003e { return Config.find(find) .skip((parseInt(page) - 1) * parseInt(limit)) .limit(parseInt(limit)) .sort({configname: -1}) .then(result =\u003e { obj['data'] = result obj['count'] = count return obj }) }) }, 调用 // 获取配置接口 router.get('/pages/setting/config', (req, res) =\u003e { let {page, limit,search} = req.query console.log(page, limit,search) configUtils.getConfig(page, limit,search) .then((result) =\u003e { res.send({ code: 0, count: result.count, data: result.data, message: '' }) }) }) ","date":"2020-07-12","objectID":"/posts/project/20200712/:3:1","tags":null,"title":"Express框架实现一个简单的博客系统","uri":"/posts/project/20200712/"},{"categories":["project"],"content":"2020-07-13 前台 文章支持markdown解析及代码高亮（highlight） \r文章置顶 \r文章分页显示 \r分类文章 \r修改登陆注册的UI \r后台 可以修改用户头像以及昵称 \r前台 根据登陆用户头像显示头像 \r根据用户昵称显示作者（文章）昵称 \rAplayer播放器 \r待完善\r评论虽然可以分页，但存在小bug \r由于开始时考虑不周，导致置顶无法自定义顺序 \r由于前期不了解layui，因此导致一些布局等出现了小问题 \r其他问题发现中。。。 \r功能开坑 前台可以修改个人信息 \r","date":"2020-07-12","objectID":"/posts/project/20200712/:4:0","tags":null,"title":"Express框架实现一个简单的博客系统","uri":"/posts/project/20200712/"},{"categories":["project"],"content":"设置某个字段查询不显示 password:{ type:String, select:false }, ","date":"2020-07-12","objectID":"/posts/project/20200712/:4:1","tags":null,"title":"Express框架实现一个简单的博客系统","uri":"/posts/project/20200712/"},{"categories":["project"],"content":"置顶文章 置顶文章需要设置一个字段，用于记录这篇文章是否置顶。然后按时间排序。 sort({hot:-1,_id: -1}) 得益于可以传入多个参数。 ","date":"2020-07-12","objectID":"/posts/project/20200712/:4:2","tags":null,"title":"Express框架实现一个简单的博客系统","uri":"/posts/project/20200712/"},{"categories":["project"],"content":"markdown解析及代码高亮（highlight） markdown解析借助于marked插件得以实现；highlight则是借助于highlight.js得以实现。 marked.setOptions({ highlight: function (code) { return require('highlight.js').highlightAuto(code).value } }) result.data[0].context = marked(result.data[0].context) ","date":"2020-07-12","objectID":"/posts/project/20200712/:4:3","tags":null,"title":"Express框架实现一个简单的博客系统","uri":"/posts/project/20200712/"},{"categories":["project"],"content":"2020-07-12 前台 首页及某个文章的显示 \r评论的发表 \r登陆与注册 \r分类的显示 \r前台分类获取文章 \r前台文章分页显示 \r用户头像、昵称 \rmarkdown解析 \r后台 文章管理（新增、修改、删除） \r评论管理（删除） \r用户管理（密码修改） \r全局配置（标题等全局信息） \r分类管理（新增、修改、删除） \r未完成（待完成） 前台分类获取文章 \r前台文章分页显示 \r用户头像、昵称 \rmarkdown解析 \r... \r","date":"2020-07-12","objectID":"/posts/project/20200712/:5:0","tags":null,"title":"Express框架实现一个简单的博客系统","uri":"/posts/project/20200712/"},{"categories":["project"],"content":"layui模板动态表格 layui.use('table', function(){ var table = layui.table, $=layui.jquery, admin = layui.admin table.render({ elem: '#test' ,url:'/api/article/list' ,toolbar: '#toolbarDemo' //开启头部工具栏，并为其绑定左侧模 ,title: '文章数据表' ,page: { //支持传入 laypage 组件的所有参数（某些参数除外，如：jump/elem） - 详见文档 layout: ['limit', 'count', 'prev', 'page', 'next', 'skip'] //自定义分页布局 //,curr: 5 //设定初始在第 5 页 ,groups: 3 //只显示 1 个连续页码 ,first: false //不显示首页 ,last: false //不显示尾页 ,limit:10 }, parseData:function (result) { return { \"code\":0, \"msg\":'666', \"data\":result.data, 'count':result.count } } ,cols: [[ {field:'_id', title:'ID', fixed: 'left', sort: true} ,{field:'title', title:'标题', sort: true} ,{field:'description', title:'描述'} ,{field:'author', title:'作者', edit: 'text', sort: true,templet:function (obj) { return obj.author.username }} ,{field:'category', title:'分类', sort: true,templet:function (obj) { return obj.category.name }} ,{field:'comments', title:'评论数', sort: true,templet:function (obj) { return obj.comments.length }} ,{fixed: 'right', title:'操作', toolbar: '#barDemo'} ]] }); //头工具栏事件 table.on('toolbar(test)', function(obj){ var checkStatus = table.checkStatus(obj.config.id); switch(obj.event){ case 'getCheckData': var data = checkStatus.data; layer.alert(JSON.stringify(data)); break; case 'getCheckLength': var data = checkStatus.data; layer.msg('选中了：'+ data.length + ' 个'); break; case 'isAll': layer.msg(checkStatus.isAll ? '全选': '未全选'); break; //自定义头工具栏右侧图标 - 提示 case 'LAYTABLE_TIPS': layer.alert('这是工具栏右侧自定义的一个图标按钮'); break; }; }); //监听行工具事件 table.on('tool(test)', function(obj){ var data = obj.data; //console.log(obj) if(obj.event === 'del'){ layer.confirm('真的删除行么', function(index){ console.log(obj.data._id) $.ajax({ url:'/admin/pages/article/delete?id='+obj.data._id, success:function (backData) { obj.del(); layer.close(index); } }) }); } else if(obj.event === 'edit'){ console.log(obj.data._id) layer.open({ type: 2, skin: 'layui-layer-demo', //样式类名 title: '编辑', closeBtn: 1, //不显示关闭按钮 anim: 2, area: ['893px', '600px'], shadeClose: true, //开启遮罩关闭 content: '/admin/pages/article/edit.html?id='+obj.data._id }); } }); }); 其中cols表示显示的行，利用field属性可以自动获取返回数据对应的键。但是如果数据的某个值为一个对象，那么是无法通过.运算符取到对象的内容。此时需要解析数据 table.render({ elem: '#itemslist', url:'XXXXXXXXX', id:'itemslist', title: '关联客户信息', where:where, page:false, cols: [[ {field: 'name', title: '客户', minWidth: 210,width: 180,height:60, align: 'left'}, {field: 'total', title: '数量', minWidth: 120,width: 140,align: 'left'}, {field: 'unit_name', title: '商品单位', minWidth: 120,width: 160,align: 'left'}, {field: 'address', title: '地址', minWidth: 120,width: 260,align: 'left'}, {field: 'remark', title: '备注', minWidth: 120, align: 'left'}, ]], parseData: function(res){ //res 即为原始返回的数据 return { \"code\": res.code, //解析接口状态 \"msg\": res.msg, //解析提示文本 \"count\": res.data.items.length, //解析数据长度 \"data\": res.data.items //解析数据列表 }; }, done:function (res, curr, count) { var info = res.data.Order; if(info.item_title){ $(\"#item_title\").html(info.item_title); } } }); 数据返回的格式： { code:0, count:200, data:[] } 其中响应代码默认为0，count表示数据总数量（用于分页）。data为真实的数据。 ","date":"2020-07-12","objectID":"/posts/project/20200712/:5:1","tags":null,"title":"Express框架实现一个简单的博客系统","uri":"/posts/project/20200712/"},{"categories":["project"],"content":"删除关联数据 例如如下数据结构 { createAt: 2020-07-12T14:05:58.654Z, _id: 5f0b18ddebfa0e171463148f, author: 5f0972f32e19df3a7846d826, post: { title: '一篇新的文章', description: '描述', hot: false, mete: [], comments: [ 5f0b16103b438e54a497e632, 5f0b18ddebfa0e171463148f ], createAt: 2020-07-12T13:36:29.499Z, upDate: 2020-07-12T13:36:29.499Z, _id: 5f0b11fb2433c835a017c061, author: 5f0972f32e19df3a7846d826, context: '正文', category: 5f09a72a1055a7296c035cb3, __v: 2 }, context: '123123132231', __v: 0 } post为引用类型，当删除comments表中的某个值时，自动的将comments字段对应的数据也删除。 deleteComment:function(id){ return Comments.findOne({_id:id}) .populate('post') .then(comments=\u003e{ Article.update({_id:comments.post._id},{$pull:{comments:id}}).then(result=\u003e{ return Comments.remove({_id:id}) }) }) }, ","date":"2020-07-12","objectID":"/posts/project/20200712/:5:2","tags":null,"title":"Express框架实现一个简单的博客系统","uri":"/posts/project/20200712/"},{"categories":["notes"],"content":"Windows系统 由于二进制包安装了半个小时，还是卡在进度条不动。因此决定使用压缩包进行安装。 下载安装包 下载地址 下载完成后将其解压，例如我解压到了F:\\MongoDB文件下。 接下来进入该文件创建data与logs文件 以管理员身份启动终端，然后输入如下命令 mongod --install --dbpath F:\\MongoDB\\data --logpath F:\\MongoDB\\logs\\mongo.log 开启数据库服务 net start mongodb 链接数据库 mongo 其他命令 删除服务 mongod --remove 关闭服务 net stop mongodb ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-1/:1:0","tags":["Node"],"title":"一、MongoDB的安装","uri":"/posts/notes/20200708/20200708-1/"},{"categories":["notes"],"content":"Linux系统 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-1/:2:0","tags":["Node"],"title":"一、MongoDB的安装","uri":"/posts/notes/20200708/20200708-1/"},{"categories":["notes"],"content":"排序\u0026分页 准备数据 use test3 db.c1.insert({_id:1,name:\"a\",sex:1,age:1}) db.c1.insert({_id:2,name:\"a\",sex:1,age:2}) db.c1.insert({_id:3,name:\"b\",sex:2,age:3}) db.c1.insert({_id:4,name:\"c\",sex:2,age:4}) db.c1.insert({_id:5,name:\"d\",sex:2,age:5}) db.c1.find() ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:1:0","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"排序 db.集合名.find().sort(JSON数据) ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:1:1","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"Limit与Skip方法 db.集合名.find().sort().skip(数字).limit(数字) skip跳过指定数量（可选） limit限制查询的数量 使用.count()可以统计数量 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:1:2","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"实例练习 跳过0条数据，查询两条 db.c1.find().sort({age:-1}).skip(0).limit(2) db.c1.find().sort({age:-1}).limit(2) 跳过两条数据，查询两条数据 db.c1.find().sort({age:-1}).skip(2).limit(2) 数据库1-10数据，每页显示两条 db.集合名.find().skip().limit(2) skip计算公式：（当前页-1）* 每页显示条数 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:1:3","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"聚合查询 db.聚合名称.aggregate([ {管道:{表达式}} .... ]) 常用管道 说明 $group 将集合中的文档分组，用于统计结果 $match 过滤数据，只要输出符合条件的文档 $sort 聚合数据进一步排序 $skip 跳过指定文档数 $limit 限制集合数据返回文档数 常用表达式 说明 $sum 总和 $sum:1同count表示统计 $avg 平均 $min 最小值 $max 最大值 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:2:0","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"实例练习 准备数据 use test4 db.c1.insert({_id:1,name:\"a\",sex:1,age:1}) db.c1.insert({_id:2,name:\"a\",sex:1,age:2}) db.c1.insert({_id:3,name:\"b\",sex:2,age:3}) db.c1.insert({_id:4,name:\"c\",sex:2,age:4}) db.c1.insert({_id:5,name:\"d\",sex:2,age:5}) _id键表示按哪一个字段分组，需要显示的列新增字段即可。 统计男生、女生的总年龄 db.c1.aggregate([ { $group:{ _id:\"$sex\", rs:{$sum:\"$age\"} } } ]) 统计男生、女生的总人数 db.c1.aggregate([ { $group:{ _id:\"$sex\", rs:{$sum:1} } } ]) 求学生总数和平均年龄 db.c1.aggregate([ { $group:{ _id:null, total_num:{$sum:1}, total_avg:{$avg:\"$age\"} } } ]) 查询男生、女生人数，按人数升序 db.c1.aggregate([ { $group:{ _id:\"$sex\", rs:{$sum:1} } }, { $sort:{rs:1} } ]) ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:2:1","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"索引 创建索引 db.集合名.createIndex(带创建索引的列[,额外选项]) 带创建索引的列:{键:1,键:-1} 1表示升序，-1表示降序 额外选项 设置索引的名称或者唯一索引等等 删除索引 全部删除 db.集合名.dropIndexes() 删除指定 db.集合名.dropIndex(索引名) 查看索引语法 db.集合名.getIndexes() ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:3:0","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"实例练习 数据准备 //选择数据库 use test5; //向数据库中添加数据 for(var i=0;i\u003c100000;i++){ db.c1.insert({'name':\"aaa\"+i,\"age\":i}); } 给name添加普通索引 db.c1.createIndex({name:1}) 删除name索引 db.c1.dropIndex('name_1') 给name创建索引并起名webopenfather db.c1.createIndex({name:1},{name:'webopenfather'}) 创建复合/组合索引 给name和age添加组合索引 db.c1.createIndex({name:1,age:1}) 创建唯一索引 db.c1.createIndex(待添加索引的列,{unique:列名}) ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:3:1","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"分析索引（explain） db.集合名.find().explain('executionStats') COLLSCAN 全表扫描 IXSCAN 索引扫描 FETCH 根据索引去检索指定document 测试：age未添加索引情况 语法：db.c1.find({age:18}).explain(‘executionStats’); 测试：age添加索引情况 语法：db.c1.createIndex({age: 1}) 继续：db.c1.find({age:18}).explain(‘executionStats’) ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:3:2","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"选择规则 为常做条件、排序、分组的字段建立索引 选择唯一性索引 同值较少如性别字段 选择较小的数据列，为较长的字符串使用前缀索引 索引文件更小 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:3:3","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"MongoDB权限机制 db.createUser({ \"user\" : \"账号\", \"pwd\": \"密码\", \"roles\" : [{ role: \"角色\", db: \"所属数据库\" }] }) 角色种类 说明 超级用户角色 root 数据库用户角色 read、readWrite 数据库管理角色 dbAdmin、userAdmin 集群管理角色 clusterAdmin、clusterManager、clusterMonitor、hostManager 备份恢复角色 backup、restore 所有数据库角色 readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase 角色 角色说明 root 只在admin数据库中可用。超级账号，超级权限； read 允许用户读取指定数据库 readWrite 允许用户读写指定数据库 dbAdmin 允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile； dbAdminAnyDatabase 只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限 clusterAdmin 只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限 userAdmin 允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户 userAdminAnyDatabase 只在admin数据库中可用，赋予用户所有数据库的userAdmin权限 readAnyDatabase 只在admin数据库中可用，赋予用户所有数据库的读权限 readWriteAnyDatabase 只在admin数据库中可用，赋予用户所有数据库的读写权限 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:4:0","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"开启验证模式 添加超级管理员 use admin db.createUser({ \"user\" : \"root\", \"pwd\": \"root\", \"roles\" : [{ role: \"root\", db: \"admin\" }] }) 退出卸载服务 需要使用管理员模式打开终端 mongod --remove 重新安装需要输入账号密码的服务 在原安装命令基础上加--auth即可 mongod --install --dbpath F:\\MongoDB\\data --logpath F:\\MongoDB\\logs\\mongoDB2.log --auth 启动服务 net start mongodb ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:4:1","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"通过超级管理员账号登陆 第一种方式 mongo 服务器IP地址:端口/数据库 -u 用户名 -p 密码 第二种方式 先登录 选择数据库 输入db.auth(用户名,密码) ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:4:2","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"实例练习 准备数据 use shop; for(var i=1; i\u003c=10; i++) { db.goods.insert({\"name\":\"goodsName\"+i,\"price\":i}); } 添加用户并设置权限 use shop // 只能读 db.createUser({ \"user\" : \"shop1\", \"pwd\": \"shop1\", \"roles\" : [{ role: \"read\", db: \"shop\" }] }) // 只能写 db.createUser({ \"user\" : \"shop2\", \"pwd\": \"shop2\", \"roles\" : [{ role: \"readWrite\", db: \"shop\" }] }) ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:4:3","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"备份还原 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:5:0","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"备份 mongodump -h -port -u -p -d -o -h表示服务器IP地址（不写默认本机） -port表示端口（默认27017） -u表示账号 -p表示密码 -d表示数据库（数据库不写则导出全部） -o备份到指定目录ia 备份所有数据到F:\\MongoDB\\back mongodump -u root -p root -o F:\\MongoDB\\back 备份指定数据到F:\\MongoDB\\back1 mongodump -u shop2 -p shop2 -d shop -o F:\\MongoDB\\back1 因为数据库是属于shop1与shop2的，因此导出需要使用这两个账号。 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:5:1","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"还原数据 mongorestore -h -port -u -p --drop -d -d 不写则还原全部数据 –drop表示先删除在导出，不写则覆盖 还原所有数据 mongorestore -u root -p root --drop F:\\MongoDB\\back 备份指定数据库 备份指定数据库，不能使用root账户，需要使用有写权限的账户。且需要指定具体文件名。 mongorestore -u shop2 -p shop2 -d shop --drop F:\\MongoDB\\back1\\shop ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:5:2","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"可视化工具 Robo 3T ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:6:0","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"安装 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:6:1","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"使用 创建链接 授权 此时可以看到所有数据库 对于可视化工具，我个人更喜欢Navicat ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-3/:6:2","tags":["Node"],"title":"三、MongoDB高级操作","uri":"/posts/notes/20200708/20200708-3/"},{"categories":["notes"],"content":"基本操作 登陆数据库 mongo ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-2/:1:0","tags":["Node"],"title":"二、MongoDB基本操作及增删改查","uri":"/posts/notes/20200708/20200708-2/"},{"categories":["notes"],"content":"查看数据库 语法 show databases; ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-2/:1:1","tags":["Node"],"title":"二、MongoDB基本操作及增删改查","uri":"/posts/notes/20200708/20200708-2/"},{"categories":["notes"],"content":"选择数据库 use 数据库名 如果切换到一个没有的数据库，例如use admin2，那么会隐式创建这个数据库。（后期当该数据库有数据时，系统自动创建） use admin2 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-2/:1:2","tags":["Node"],"title":"二、MongoDB基本操作及增删改查","uri":"/posts/notes/20200708/20200708-2/"},{"categories":["notes"],"content":"查看集合 show collections ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-2/:1:3","tags":["Node"],"title":"二、MongoDB基本操作及增删改查","uri":"/posts/notes/20200708/20200708-2/"},{"categories":["notes"],"content":"创建集合 db.createCollection('集合名') ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-2/:1:4","tags":["Node"],"title":"二、MongoDB基本操作及增删改查","uri":"/posts/notes/20200708/20200708-2/"},{"categories":["notes"],"content":"删除集合 db.集合名.drop() ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-2/:1:5","tags":["Node"],"title":"二、MongoDB基本操作及增删改查","uri":"/posts/notes/20200708/20200708-2/"},{"categories":["notes"],"content":"删除数据库 通过use语法选择数据 通过db.dropDataBase()删除数据库 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-2/:1:6","tags":["Node"],"title":"二、MongoDB基本操作及增删改查","uri":"/posts/notes/20200708/20200708-2/"},{"categories":["notes"],"content":"增删改查 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-2/:2:0","tags":["Node"],"title":"二、MongoDB基本操作及增删改查","uri":"/posts/notes/20200708/20200708-2/"},{"categories":["notes"],"content":"C增 db.集合名.insert(JSON数据) 如果集合存在，那么直接插入数据。如果集合不存在，那么会隐式创建。 在test2数据库的c1集合中插入数据（姓名叫webopenfather年龄18岁） use test2 db.c1.insert({uname:\"webopenfather\",age:18}) 数据库和集合不存在都隐式创建 对象的键统一不加引号（方便看），但是查看集合数据时系统会自动加 mongodb会给每条数据增加一个全球唯一的_id键 _id键的组成 自己增加_id 可以，只需要给插入的JSON数据增加_id键即可覆盖（但实战强烈不推荐） db.c1.insert({_id:1, uname:\"webopenfather\", age:18}) 一次性插入多条数据 传递数据，数组中写一个个JSON数据即可。 db.c1.insert([ {uname:\"z3\", age:3}, {uname:\"z4\", age:4}, {uname:\"w5\", age:5} ]) 快速插入10条数据 由于mongodb底层使用JS引擎实现的，所以支持部分js语法。因此：可以写for循环 for (var i=1; i\u003c=10; i++) { db.c2.insert({uanme: \"a\"+i, age: i}) } ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-2/:2:1","tags":["Node"],"title":"二、MongoDB基本操作及增删改查","uri":"/posts/notes/20200708/20200708-2/"},{"categories":["notes"],"content":"R查询文档 db.集合名.find(条件[,查询的列]) 条件 写法 查询所有的数据 {}或者不写 查询age=6的数据 {age:6} 既要age=6又要性别=男 {age:6,sex:'男'} 查询的列（可选参数） 写法 查询全部列（字段） 不写 只显示age列（字段） {age:1} 除了age列（字段）都显示 {age:0} 其他语法 db.集合名.find({ 键:{运算符：值} }) 运算符 作用 $gt 大于 $gte 大于等于 $lt 小于 $lte 小于等于 $ne 不等于 $in in $nin not in 实例练习 查询所有数据 db.c1.find() 系统的_id无论如何都会存在 查询age大于5的数据 db.c1.find({age:{$gt:5}}) 查询年龄是5岁、8岁、10岁的数据 db.c2.find({age:{$in:[5,8,10]}}) 只看年龄列，或者年龄以外的列 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-2/:2:2","tags":["Node"],"title":"二、MongoDB基本操作及增删改查","uri":"/posts/notes/20200708/20200708-2/"},{"categories":["notes"],"content":"U修改文档 db.集合名.update(条件,新数据[是否新增,是否修改多条,]) 新数据 此数据需要使用修改器，如果不使用，那么会将新数据替换原来的数据。 db.集合名.update(条件,{修改器:{键:值}}[是否新增,是否修改多条,]) 修改器 作用 $inc 递增 $rename 重命名列 $set 修改列值 $unset 删除列 是否新增 指条件匹配不到数据则插入(true是插入，false否不插入默认) db.c3.update({uname:\"zs30\"},{$set:{age:30}},true) 是否修改多条 指将匹配成功的数据都修改（true是，false否默认） db.c3.update({uname:\"zs2\"},{$set:{age:30}},false,true) 实例练习 准备工作 use test2; for(var i = 1; i\u003c= 10; i++){ db.c3.insert( {\"uname\":\"zs\"+i,\"age\":i} ); } 将{uname:\"zs1\"}改为{uname:\"zs2\"} db.c3.update({uname:\"zs1\"},{$set:{uname:\"zs2\"}}) 给{uname:\"zs10\"}的年龄加2岁或减2岁 db.c3.update({uname:\"zs10\"},{$inc:{age:2}}) 递减只需要将2改为-2即可。 综合练习 插入数据：db.c4.insert( {uname:\"神龙教主\",age:888,who:\"男\",other:\"非国人\"}); 需求： uname改成 webopenfather 可以使用修改器$set age增加111 可以使用修改器$inc who改字段sex 可以使用修改器$rename other删除 可以使用修改器$unset db.c4.update({uname:'神龙教主'}, {$set:{uname:'webopenfather'}, $inc:{age:111}, $rename:{who:\"sex\"}, $unset:{other:true} }) ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-2/:2:3","tags":["Node"],"title":"二、MongoDB基本操作及增删改查","uri":"/posts/notes/20200708/20200708-2/"},{"categories":["notes"],"content":"删除文档 db.集合名.remove(条件[,是否删除一条]) 是否删除一条 true：是（删除的数据为第一条） false：否 db.c3.remove({uname:\"zs3\"}) ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-2/:2:4","tags":["Node"],"title":"二、MongoDB基本操作及增删改查","uri":"/posts/notes/20200708/20200708-2/"},{"categories":["notes"],"content":"总结 高级开发攻城狮统称：所有数据库都需要增删改查CURD标识 MongoDB删除语法：remove 增Create db.集合名.insert(JSON数据) 删Delete db.集合名.remove(条件 [,是否删除一条true是false否默认]) 也就是默认删除多条 改Update db.集合名.update(条件， 新数据 [,是否新增,是否修改多条]) 升级语法db.集合名.update(条件，{修改器：{键：值}}) 查Read db.集合名.find(条件 [,查询的列]) ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-2/:3:0","tags":["Node"],"title":"二、MongoDB基本操作及增删改查","uri":"/posts/notes/20200708/20200708-2/"},{"categories":["notes"],"content":"mongoose 核心概念 schema 约束字段/列数据 model模型 对应 集合 后期用它来实现数据增删改查 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-4/:1:0","tags":["Node"],"title":"四、mongoose的使用","uri":"/posts/notes/20200708/20200708-4/"},{"categories":["notes"],"content":"简介 安装 npm i mongoose schema 英文网： http://mongoosejs.com 中文网： http://mongoosejs.net/ 作用：用来约束MongoDB文档数据（哪些字段必须，哪些字段可选的） model 一个模型对应一个集合。后面通过模型管理集合中的数据。 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-4/:1:1","tags":["Node"],"title":"四、mongoose的使用","uri":"/posts/notes/20200708/20200708-4/"},{"categories":["notes"],"content":"使用 基本模型 // 一、导入模块 const mongoose = require(\"mongoose\"); // 二、连接数据库 const db = mongoose.createConnection( \"mongodb://shop2:shop2@localhost:27017/shop\", { useNewUrlParser: true, useUnifiedTopology: true }, (err) =\u003e { if (err) { console.log(\"---------------------------------------\"); console.log(\"数据库连接失败：\", err); console.log(\"---------------------------------------\"); return; } console.log(\"数据库连接成功\"); } ); // 三、设置数据模型（声明是哪个集合，限制字段个数和字段类型） const model = db.model(\"api\", { uname: { type: String, default: \"神龙教主\" }, pwd: String, age: { type: Number }, sex: { type: String }, }); 插入一条数据 const insertObj = new model({ uname: \"张三\", pwd: \"123\", age: 18, sex: \"man\", }); insertObj .save() .then((res) =\u003e { return res; }) .catch((err) =\u003e { console.log(\"插入失败\" + err); return false; }); 查询数据 model .find({ uname: \"张三\" }) .then((res) =\u003e { console.log(res); return res; }) .catch((err) =\u003e { console.log(err); return false; }); 分页查询 model .find({ uname: \"张三\" }) .skip(1) .limit(1) .then((res) =\u003e { console.log(res); return res; }) .catch((err) =\u003e { console.log(err); return false; }); ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-4/:1:2","tags":["Node"],"title":"四、mongoose的使用","uri":"/posts/notes/20200708/20200708-4/"},{"categories":["notes"],"content":"教学管理系统接口开发 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-4/:2:0","tags":["Node"],"title":"四、mongoose的使用","uri":"/posts/notes/20200708/20200708-4/"},{"categories":["notes"],"content":"基本框架(express) const express = require(\"express\"); const app = express(); const port = 3000; app.get(\"/\", (req, res) =\u003e res.send(\"Hello World!\")); app.listen(port, () =\u003e console.log(`Server running at http://127.0.0.1:${port}`) ); ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-4/:2:1","tags":["Node"],"title":"四、mongoose的使用","uri":"/posts/notes/20200708/20200708-4/"},{"categories":["notes"],"content":"学生添加接口 导入body-parser模块接收前端传来的数据 定义路由 分模块开发，将路由的方法写在/constroller/stu.js文件中。 const stuController = require(process.cwd() + \"/constroller/stu\"); app.post(\"/stu\", stuController.create); 在/constroller/stu.js文件中，导入模型，调用模型中的方法完成逻辑的编写，最后导出。 // 导入模型 const { createModle } = require(process.cwd() + \"/models/stu\"); const create = async (req, res) =\u003e { // res.send(\"this is stu create\"); let postData = req.body; let rs = await createModle(postData); if (rs) { res.send({ meta: { state: 200, msg: \"添加成功\", }, data: null, }); } else { res.send({ meta: { state: 500, msg: \"添加失败\", }, data: null, }); } }; // 导出成员 module.exports = { create }; 在/models/stu.js模型文件中，定义与数据库相关的操作。 // 一、导入模块 const mongoose = require(\"mongoose\"); // 二、连接数据库 const db = mongoose.createConnection( \"mongodb://shop2:shop2@localhost:27017/shop\", { useNewUrlParser: true, useUnifiedTopology: true }, (err) =\u003e { if (err) { console.log(\"---------------------------------------\"); console.log(\"数据库连接失败：\", err); console.log(\"---------------------------------------\"); return; } console.log(\"数据库连接成功\"); } ); // 三、设置数据模型（声明是哪个集合，限制字段个数和字段类型） const model = db.model(\"stu\", { uname: { type: String, default: \"神龙教主\" }, pwd: String, age: { type: Number }, sex: { type: String }, }); const createModle = (postData) =\u003e { insertObj = new model(postData); return insertObj .save() .then((res) =\u003e { return res; }) .catch((err) =\u003e { console.log(err); return false; }); }; // 四、方法 module.exports = { createModle }; ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-4/:2:2","tags":["Node"],"title":"四、mongoose的使用","uri":"/posts/notes/20200708/20200708-4/"},{"categories":["notes"],"content":"学生列表接口 定义路由/stu get请求 app.get(\"/stu\", stuController.create); 为控制器新增方法 const index = (req, res) =\u003e { listModle().then((rs) =\u003e { if (rs) { res.send({ meta: { state: 200, msg: \"查询成功\", }, data: rs, }); } else { res.send({ meta: { state: 500, msg: \"查询失败\", }, data: null, }); } }); }; 修改stu模型，增加查询方法 const listModle = () =\u003e { return model .find() .then((res) =\u003e { console.log(res); return res; }) .catch((err) =\u003e { console.log(err); return null; }); }; ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-4/:2:3","tags":["Node"],"title":"四、mongoose的使用","uri":"/posts/notes/20200708/20200708-4/"},{"categories":["notes"],"content":"学生列表接口分页 添加路由 app.get(\"/stu\", stuController.index); 修改控制器 const index = (req, res) =\u003e { let getData = req.query; let pagesize = parseInt(getData.pagesize); let skip = (parseInt(getData.pageno) - 1) * pagesize; listModle(skip, pagesize).then((rs) =\u003e { if (rs) { res.send({ meta: { state: 200, msg: \"查询成功\", }, data: rs, }); } else { res.send({ meta: { state: 500, msg: \"查询失败\", }, data: null, }); } }); }; 修改模型 const listModle = (skip, limit) =\u003e { return model .find() .skip(skip) .limit(limit) .then((res) =\u003e { console.log(res); return res; }) .catch((err) =\u003e { console.log(err); return null; }); }; ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-4/:2:4","tags":["Node"],"title":"四、mongoose的使用","uri":"/posts/notes/20200708/20200708-4/"},{"categories":["notes"],"content":"apiDoc的使用 安装模块（仅一次） npm install apidoc -g 在项目根目录创建apidoc.json文件（仅一次） { \"name\": \"example\", \"version\": \"0.1.0\", \"description\": \"apiDoc basic example\", \"title\": \"Custom apiDoc browser title\", \"url\" : \"https://api.github.com/v1\" } 例如： { \"name\": \"教学管理系统接口文档\", \"version\": \"1.0.0\", \"description\": \"一个非常NB的接口文档\", \"title\": \"Custom apiDoc browser title\", \"url\" : \"http://localhost:3000\" } 写接口注释（N次） /** * @api {get} /user/:id Request User information * @apiName GetUser * @apiGroup User * * @apiParam {Number} id Users unique ID. * * @apiSuccess {String} firstname Firstname of the User. * @apiSuccess {String} lastname Lastname of the User. */ 例如： /** * @api {get} /stu 学生模块列表 * @apiName Add * @apiGroup Stu * * @apiParam {Number} pageno 当前页 * @apiParam {Number} pagesize 每页显示条数 * * @apiSuccess {String} meta 状态码\u0026提示信息 * @apiSuccess {String} data 数据 */ 生成接口文档（N次） apidoc -i ./接口注释目录 -o ./接口文档存放目录 ","date":"2020-07-08","objectID":"/posts/notes/20200708/20200708-4/:3:0","tags":["Node"],"title":"四、mongoose的使用","uri":"/posts/notes/20200708/20200708-4/"},{"categories":["project"],"content":" 下载源码\r","date":"2020-07-07","objectID":"/posts/project/20200707/:0:0","tags":null,"title":"NodeJs博客系统开发","uri":"/posts/project/20200707/"},{"categories":["project"],"content":"开发前的准备 安装插件 body-parser cookies express markdown mongoose swig npm i body-parser cookies markdown mongoose swig 基本的目录结构 blog ├── app.js 应用（启动）入口文件 ├── db 数据库存储目录 ├── models 数据库模型文件目录 ├── node_modules node第三方模块目录 ├── package-lock.json ├── package.json ├── public 公共文件目录（css、js、image...） ├── routers 路由文件目录 ├── schemas 数据库结构文件（schema）目录 └── views 模板试图文件目录 导入并定义当前使用的模板引擎 以下内容均写入入口文件。 var swig = require(\"swig\"); /** * 定义当前应用使用的模板引擎 * @date 2020-07-07 * @param {any} \"html\" 模板引擎的名称，同时也是模板文件的后缀 * @param {any} swig.renderFile 用于解析处理模板内容的方法 */ app.engine(\"html\", swig.renderFile); 设置模板引擎存放目录 /** * 设置模板引擎存放目录 * @date 2020-07-07 * @param {any} \"views\" 固定 必须是views * @param {any} \"./views\" 表示目录 */ app.set(\"views\", \"./views\"); 注册所使用的模板引擎 /** * 注册所使用的模板引擎 * @date 2020-07-07 * @param {any} \"view engine\" 第一个参数固定 * @param {any} \"html\" 第二个参数与app.engine方法中第一个参数相同 * @returns {any} */ app.set(\"view engine\", \"html\"); 为了防止内存影响修改模板，因此需要禁用内存 // 开发过程中取消缓存 swig.setDefaults({ cache: false }); 添加一个模板文件，并在路由中将其返回 app.get(\"/\", (req, res) =\u003e { /** * 返回文件 * @date 2020-07-07 * @param {any} \"index\" 表示views文件中所使用的文件 * @param {any} 表示传递给模板的数据 */ res.render(\"index.html\"); }); \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003e欢迎光临我的博客!!!\u003c/h1\u003e \u003c/body\u003e \u003c/html\u003e 静态文件托管 app.use(\"/public\", express.static(\"public\")); //设置托管静态资源文件 那么在HTML页面只需要/public/js/jquery.min.js即可引入public文件中的文件。 第一个参数默认为/ 划分模块 // TAG 根据不同功能划分模块 app.use(\"/admin\", require(\"./routers/admin\")); app.use(\"/api\", require(\"./routers/api\")); app.use(\"/\", require(\"./routers/main\")); 在app.js中划分好模块后，接下来就是在路由文件里新建admin.js、api.js、main.js三个文件。并在三个文件中写入基本内容后，即可通过地址查看。 var express = require(\"express\"); var router = express.Router(); router.get(\"/user\", (req, res, next) =\u003e { res.send(\"API - User\"); }); module.exports = router; 定义数据库结构 安装MongoDB 链接数据库 mongoose.connect(\"mongodb://localhost:27018/blog\", function (err) { if (err) { console.log(\"链接失败\"); } else { console.log(\"链接成功\"); app.listen(port, () =\u003e console.log(`Server running at http://127.0.0.1:${port}`) ); } }); 定义Schema var mongoose = require(\"mongoose\"); // 用户的表结构 module.exports = new mongoose.Schema({ // 用户名 username: String, // 密码 password: String, }); 定义module var mongoose = require(\"mongoose\"); // 用户的表结构 var userSchema = require(\"../schemas/user\"); module.exports = mongoose.model(\"User\", userSchema); ","date":"2020-07-07","objectID":"/posts/project/20200707/:1:0","tags":null,"title":"NodeJs博客系统开发","uri":"/posts/project/20200707/"},{"categories":["project"],"content":"注册接口 用户注册时请求注册接口 判断账号密码是否合法 判断用户是否存在 根据判断做出相应的相应 router.post(\"/user/register\", (req, res, next) =\u003e { let { username, password } = req.body; console.log(username, password); if (username != \"\" \u0026\u0026 password != \"\") { console.log(respondseData); // 验证用户是否被注册 User.findOne({ username: username }) .then((userinfo) =\u003e { if (userinfo) { // 数据库中有此数据 respondseData.code = 4; respondseData.message = \"用户已被注册\"; console.log(respondseData); } else { // 数据库中无此数据 var user = new User({ username: username, password: password, }); respondseData.code = 200; respondseData.message = \"注册成功\"; return user.save(); } }) .then((newUserInfo) =\u003e { res.send(respondseData); console.log(newUserInfo); }); } else { respondseData.message = \"你输入的内容似乎不对哦！\"; res.send(respondseData); } }); ","date":"2020-07-07","objectID":"/posts/project/20200707/:2:0","tags":null,"title":"NodeJs博客系统开发","uri":"/posts/project/20200707/"},{"categories":["project"],"content":"登陆接口及Cookie保存 判断用户名及密码是否符合规范 判断数据库是否存在这个用户以及密码是否一致 登陆后，保存Cookie 主程序app.js app.use(function (req, res, next) { req.cookies = new Cookies(req, res); if (req.cookies.get(\"userInfo\")) { req.userinfo = JSON.parse(req.cookies.get(\"userInfo\")); try { // 获取当前登陆用户的类型，是否是管理员 User.findById(req.userinfo._id).then(function (userInfo) { req.userinfo.isAdmin = userInfo.isAdmin; next(); }); } catch (e) { req.userinfo = {}; next(); } } else { next(); } }); 用户表结构schema var mongoose = require(\"mongoose\"); // 用户的表结构 module.exports = new mongoose.Schema({ // 用户名 username: String, // 密码 password: String, // 管理员权限 isAdmin: { type: Boolean, default: false }, }); 登陆接口的实现 router.post(\"/user/login\", (req, res) =\u003e { let { username, password } = req.body; if (username != \"\" \u0026\u0026 password != \"\") { // 判断数据库是否存在此用户 User.findOne({ username: username, password: password, }).then((userInfo) =\u003e { if (!userInfo) { // 没有合适的用户 respondseData.message = \"用户名或密码错误\"; } else { // 有合适的用户 respondseData.code = 200; respondseData.message = \"登陆成功\"; req.cookies.set( \"userInfo\", JSON.stringify({ _id: userInfo._id, username: userInfo.username, }) ); } res.send(respondseData); }); } else { respondseData.message = \"你输入的好像不合法哦！\"; res.send(respondseData); } }); ","date":"2020-07-07","objectID":"/posts/project/20200707/:3:0","tags":null,"title":"NodeJs博客系统开发","uri":"/posts/project/20200707/"},{"categories":["project"],"content":"后台开发 ","date":"2020-07-07","objectID":"/posts/project/20200707/:4:0","tags":null,"title":"NodeJs博客系统开发","uri":"/posts/project/20200707/"},{"categories":["project"],"content":"基本框架 首先我们定义一个公用模板，用于每个模块（首页等）的调用。 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003clink rel=\"stylesheet\" href=\"http://cdn.static.runoob.com/libs/bootstrap/3.3.7/css/bootstrap.min.css\"\u003e \u003cscript src=\"http://cdn.static.runoob.com/libs/jquery/2.1.1/jquery.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"http://cdn.static.runoob.com/libs/bootstrap/3.3.7/js/bootstrap.min.js\"\u003e\u003c/script\u003e \u003ctitle\u003e后台管理\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cnav class=\"navbar navbar-default\"\u003e \u003cdiv class=\"container-fluid\"\u003e \u003c!-- Brand and toggle get grouped for better mobile display --\u003e \u003cdiv class=\"navbar-header\"\u003e \u003cbutton type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\" aria-expanded=\"false\"\u003e \u003cspan class=\"sr-only\"\u003eToggle navigation\u003c/span\u003e \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e \u003c/button\u003e \u003ca class=\"navbar-brand\" href=\"#\"\u003e后台管理\u003c/a\u003e \u003c/div\u003e \u003c!-- Collect the nav links, forms, and other content for toggling --\u003e \u003cdiv class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\"\u003e \u003cul class=\"nav navbar-nav\"\u003e \u003cli \u003e\u003ca href=\"/admin/user\"\u003e用户管理\u003c/a\u003e\u003c/li\u003e \u003c!--\u003cli \u003e\u003ca href=\"/admin/category\"\u003e分类管理\u003c/a\u003e\u003c/li\u003e--\u003e \u003cli class=\"dropdown\"\u003e \u003ca href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003e分类管理 \u003cspan class=\"caret\"\u003e\u003c/span\u003e\u003c/a\u003e \u003cul class=\"dropdown-menu\"\u003e \u003cli\u003e\u003ca href=\"/admin/category\"\u003e分类首页\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/admin/category/add\"\u003e添加分类\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli class=\"dropdown\"\u003e \u003ca href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003e内容管理 \u003cspan class=\"caret\"\u003e\u003c/span\u003e\u003c/a\u003e \u003cul class=\"dropdown-menu\"\u003e \u003cli\u003e\u003ca href=\"/admin/content\"\u003e内容管理首页\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/admin/content/add\"\u003e添加内容\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli class=\"dropdown\"\u003e \u003ca href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003e文章管理 \u003cspan class=\"caret\"\u003e\u003c/span\u003e\u003c/a\u003e \u003cul class=\"dropdown-menu\"\u003e \u003cli\u003e\u003ca href=\"#\"\u003eAction\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eAnother action\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eSomething else here\u003c/a\u003e\u003c/li\u003e \u003cli role=\"separator\" class=\"divider\"\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eSeparated link\u003c/a\u003e\u003c/li\u003e \u003cli role=\"separator\" class=\"divider\"\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003eOne more separated link\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003e评论\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003cul class=\"nav navbar-nav navbar-right\"\u003e \u003c!--\u003cli\u003e\u003ca href=\"#\"\u003eLink\u003c/a\u003e\u003c/li\u003e--\u003e \u003cli class=\"dropdown\"\u003e \u003ca href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003e{{userinfo.username}} \u003cspan class=\"caret\"\u003e\u003c/span\u003e\u003c/a\u003e \u003cul class=\"dropdown-menu\"\u003e \u003cli\u003e\u003ca href=\"#\"\u003e退出\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e\u003c!-- /.navbar-collapse --\u003e \u003c/div\u003e\u003c!-- /.container-fluid --\u003e \u003c/nav\u003e \u003cdiv class=\"container-fluid\"\u003e \u003c!--模板中的此部分可能不同，使用block占位--\u003e {% block main%} {endblock} \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e 其中，{% block main%} {endblock}表示占位。在其他模板页面中只需要重写这个区块即可。 例如index.html页面。 \u003c!--layout.html是公用的模板，可以使用继承--\u003e {% extends 'layout.html' %} {% block main %} \u003cdiv class=\"jumbotron\"\u003e \u003ch1\u003eHello, {{userinfo.username}}\u003c/h1\u003e \u003cp\u003e欢迎进入破梨博客后台管理\u003c/p\u003e \u003c!--\u003cp\u003e\u003ca class=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\"\u003eLearn more\u003c/a\u003e\u003c/p\u003e--\u003e \u003c/div\u003e {% endblock%} ","date":"2020-07-07","objectID":"/posts/project/20200707/:4:1","tags":null,"title":"NodeJs博客系统开发","uri":"/posts/project/20200707/"},{"categories":["project"],"content":"注册用户列表展示 路由规则 router.get(\"/user\", (req, res, next) =\u003e { var page = Number(req.query.page || 1); var limit = 10; var pages = 0; User.count().then((count) =\u003e { pages = Math.ceil(count / limit); page = Math.min(page, pages); page = Math.max(page, 1); console.log(page); var skip = (page - 1) * limit; User.find() .skip(skip) .limit(limit) .then((result) =\u003e { res.render(\"admin/user_index\", { users: result, page: page, pages: pages, }); }); }); }); HTML模板 \u003c!--layout.html是公用的模板，可以使用继承--\u003e {% extends 'layout.html' %} {% block main %} \u003col class=\"breadcrumb\"\u003e \u003cli\u003e\u003ca href=\"/admin\"\u003e管理首页\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"#\"\u003e用户列表\u003c/a\u003e\u003c/li\u003e \u003c!--\u003cli class=\"active\"\u003eData\u003c/li\u003e--\u003e \u003c/ol\u003e \u003ch3\u003e用户列表\u003c/h3\u003e \u003ctable class=\"table table-hover table-bordered table-striped\"\u003e \u003ctr\u003e \u003cth\u003eID\u003c/th\u003e \u003cth\u003e用户名\u003c/th\u003e \u003cth\u003e密码\u003c/th\u003e \u003cth\u003e管理员\u003c/th\u003e \u003c/tr\u003e {% for item in users%} \u003ctr\u003e \u003ctd\u003e{{item._id.toString()}}\u003c/td\u003e \u003ctd\u003e{{item.username}}\u003c/td\u003e \u003ctd\u003e{{item.password}}\u003c/td\u003e {% if item.isAdmin%} \u003ctd style=\"color: green;\"\u003e是\u003c/td\u003e {% else %} \u003ctd style=\"color: red;\"\u003e否\u003c/td\u003e {% endif %} \u003c/tr\u003e {% endfor %} \u003c/table\u003e \u003c!--分页功能在page.html中，因为很多地方都会用到，所以封装成模板，调用即可--\u003e {% include 'page.html' %} {% endblock%} 分页模板 \u003cnav aria-label=\"Page navigation\"\u003e \u003cul class=\"pager\"\u003e \u003cli class=\"previous\"\u003e\u003ca href=\"/admin/user?page={{page-1}}\"\u003e\u003cspan aria-hidden=\"true\"\u003e\u0026larr;\u003c/span\u003e 上一页\u003c/a\u003e\u003c/li\u003e \u003c!--\u003cli\u003e一共{{pages}}页,当前第{{page}}页\u003c/li\u003e--\u003e \u003cli class=\"next\"\u003e\u003ca href=\"/admin/user?page={{page+1}}\"\u003e下一页 \u003cspan aria-hidden=\"true\"\u003e\u0026rarr;\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e \u003cli\u003e一共{{pages}}页,当前第{{page}}页\u003c/li\u003e \u003c/ul\u003e \u003c/nav\u003e ","date":"2020-07-07","objectID":"/posts/project/20200707/:4:2","tags":null,"title":"NodeJs博客系统开发","uri":"/posts/project/20200707/"},{"categories":["project"],"content":"分类 首页 用于展示所有分类，为每个分类设置删除与修改的功能。以及将最新添加的分类按照索引降序将其排列。 router.get(\"/category\", (req, res, next) =\u003e { var page = Number(req.query.page || 1); var limit = 10; var pages = 0; Categories.count().then((count) =\u003e { pages = Math.ceil(count / limit); page = Math.min(page, pages); page = Math.max(page, 1); console.log(page); var skip = (page - 1) * limit; Categories.find() .sort({ _id: -1 }) .skip(skip) .limit(limit) .then((result) =\u003e { res.render(\"admin/category_index\", { categories: result, page: page, pages: pages, }); }); }); }); 修改分类 须判断修改的分类是否存在。 // 添加分类页面 router.get(\"/category/add\", (req, res, next) =\u003e { res.render(\"admin/category_add\", { userinfo: req.userinfo, }); }); // 分类保存 router.post(\"/category/add\", (req, res, next) =\u003e { let { name } = req.body || null; if (name == \"\") { console.log(\"分类名称必须填写\"); res.render(\"admin/error\", { userinfo: req.userinfo, message: \"分类名称必须填写\", }); } else { Categories.findOne({ name: name, }) .then(function (rs) { if (rs) { res.render(\"admin/error\", { userinfo: req.userinfo, message: \"分类已经存在\", }); return Promise.reject(); } else { return new Categories({ name: name, }).save(); } }) .then(function (newCategory) { res.render(\"admin/success\", { userinfo: req.userinfo, message: \"分类保存成功\", url: \"/admin/category\", }); }); } }); // 分类修改页面 router.get(\"/category/edit\", function (req, res) { var id = req.query.id || \"\"; Categories.findOne({ _id: id }).then(function (category) { console.log(category); if (!category) { res.render(\"admin/error\", { userinfo: req.userinfo, message: \"此分类不存在\", }); } else { res.render(\"admin/category_edit\", { userinfo: req.userinfo, message: category.name, }); } }); }); router.post(\"/category/edit\", function (req, res) { var id = req.query.id || \"\"; var name = req.body.name || \"\"; Categories.findOne({ _id: id }) .then(function (category) { if (!category) { res.render(\"admin/error\", { userinfo: req.userinfo, message: \"此分类不存在\", }); return Promise.reject(); } else { // 是否存在此数据 if (name == category.name) { res.render(\"admin/success\", { userinfo: req.userinfo, message: \"修改成功\", url: \"/admin/category\", }); return Promise.reject(); } else { return Categories.findOne({ _id: { $ne: id }, name: name, }); } } }) .then(function (sameCategory) { if (sameCategory) { res.render(\"admin/error\", { userinfo: req.userinfo, message: \"分类已存在！\", }); return Promise.reject(); } else { return Categories.update( { _id: id, }, { name: name } ); } }) .then(function () { res.render(\"admin/success\", { userinfo: req.userinfo, message: \"修改成功\", url: \"/admin/category\", }); }); }); 删除分类 直接删除即可 // 分类删除 router.get(\"/category/delete\", function (req, res) { var id = req.query.id || \"\"; Categories.remove({ _id: id, }).then(function () { res.render(\"admin/success\", { userinfo: req.userinfo, message: \"删除成功\", url: \"/admin/category\", }); }); }); ","date":"2020-07-07","objectID":"/posts/project/20200707/:4:3","tags":null,"title":"NodeJs博客系统开发","uri":"/posts/project/20200707/"},{"categories":["project"],"content":"文章 文章模型的创建 模型 var mongoose = require(\"mongoose\"); // 用户的表结构 var contentSchema = require(\"../schemas/content\"); module.exports = mongoose.model(\"Content\", contentSchema); schema var mongoose = require(\"mongoose\"); // 用户的表结构 module.exports = new mongoose.Schema({ // 关联字段 category: { // 类型 type: mongoose.Schema.Types.ObjectId, // 引用另一张表的模型 ref: \"categories\", }, // 关联字段 user: { // 类型 type: mongoose.Schema.Types.ObjectId, // 引用另一张表的模型 ref: \"User\", }, // 添加时间 addTime: { type: Date, default: new Date(), }, // 阅读数量 views: { type: Number, default: 0, }, // 用户名 title: String, // 简介 description: { type: String, default: \"\", }, content: { type: String, default: \"\", }, }); 添加文章 router.post(\"/content/add\", function (req, res) { if (req.body.category == \"\") { res.render(\"admin/error\", { userinfo: req.userinfo, message: \"分类不能为空\", }); return; } // 保存到数据库 console.log(req.userinfo); new Content({ category: req.body.category, title: req.body.title, description: req.body.description, content: req.body.content, user: req.userinfo._id, }) .save() .then(function () { res.render(\"admin/success\", { userinfo: req.userinfo, message: \"内容保存成功\", }); }); }); 显示文章 router.get(\"/content\", function (req, res) { var page = Number(req.query.page || 1); var limit = 10; var pages = 0; Content.count().then((count) =\u003e { pages = Math.ceil(count / limit); page = Math.min(page, pages); page = Math.max(page, 1); console.log(page); var skip = (page - 1) * limit; Content.find() .sort({ _id: -1 }) .skip(skip) .limit(limit) .populate([\"category\", \"user\"]) .then((result) =\u003e { res.render(\"admin/content_index\", { userinfo: req.userinfo, page: page, pages: pages, contents: result, user: req.userinfo, }); }); }); }); ","date":"2020-07-07","objectID":"/posts/project/20200707/:4:4","tags":null,"title":"NodeJs博客系统开发","uri":"/posts/project/20200707/"},{"categories":["project"],"content":"首页 router.get(\"/\", (req, res, next) =\u003e { var data = { page: Number(req.query.page || 1), limit: 10, pages: 1, userinfo: req.userinfo, navinfo: [], count: 0, }; console.log(req.userinfo); Categories.find() .then(function (result) { data.navinfo = result; return Content.count(); }) .then(function (count) { data.count = count; pages = Math.ceil(data.count / data.limit); page = Math.min(data.page, data.pages); page = Math.max(data.page, 1); var skip = (data.page - 1) * data.limit; return Content.find() .limit(data.limit) .skip(skip) .populate([\"category\", \"user\"]) .sort({ _id: -1 }); }) .then(function (contents) { data.contents = contents; console.log(data); navinfo = data.navinfo; res.render(\"main/index\", data); }); }); ","date":"2020-07-07","objectID":"/posts/project/20200707/:4:5","tags":null,"title":"NodeJs博客系统开发","uri":"/posts/project/20200707/"},{"categories":["project"],"content":"评论 // 评论提交 router.post(\"/comment\", function (req, res) { // 评论的ID var contentid = req.body.contentid || \"\"; var postData = { username: req.userinfo.username, postTime: new Date(), content: req.body.content, }; Content.findOne({ _id: contentid, }) .then(function (content) { console.log(content); content.comments.push(postData); return content.save(); }) .then(function (newContent) { respondseData.data = newContent; res.send(respondseData); }); }); router.get(\"/comment\", function (req, res) { // 评论的ID var contentid = req.query.contentid || \"\"; Content.findOne({ _id: contentid, }).then(function (newContent) { respondseData.data = newContent; res.send(respondseData); }); }); ","date":"2020-07-07","objectID":"/posts/project/20200707/:4:6","tags":null,"title":"NodeJs博客系统开发","uri":"/posts/project/20200707/"},{"categories":["notes"],"content":"Promise用来做什么 用来解决回调地狱。回调地狱也就是回调函数中嵌套了回调函数，代码阅读性低。 例如如下代码： const fs = require(\"fs\"); // 读A文件 fs.readFile(`${__dirname}/etc/a.txt`, \"utf-8\", (err, data) =\u003e { if (err) { console.log(err); } else { console.log(data); // 读B文件 fs.readFile(`${__dirname}/etc/b.txt`, \"utf-8\", (err, data) =\u003e { if (err) { console.log(err); } else { console.log(data); // 读C文件 fs.readFile(`${__dirname}/etc/c.txt`, \"utf-8\", (err, data) =\u003e { if (err) { console.log(err); } else { console.log(data); } }); } }); } }); 在读完A文件后读取B文件在读取C文件。 ","date":"2020-07-07","objectID":"/posts/notes/20200707/:1:0","tags":["Node"],"title":"十、Promise的使用","uri":"/posts/notes/20200707/"},{"categories":["notes"],"content":"Promise工作流程 Promise对象是一个构造函数，用来生成Promise实例。Promise构造函数接收一个函数作为参数。这个参数的函数又有两个参数，这两个参数分别是resolve和reject。这两个参数也是函数，由JavaScript引擎提供。 异步操作成功后调用resolve()方法，他内部调用了then()里面的第一个参数函数。 异步操作失败后调用reject()方法，他内部调用了then()里面的第二个参数函数。 const fs = require(\"fs\"); let p = new Promise((resolve, reject) =\u003e { // 读文件 fs.readFile(`${__dirname}/etc/a.txt`, \"utf-8\", (err, data) =\u003e { if (!err) { // 读取成功 resolve(data); // 调用此方法 } else { // 读取失败 reject(err); // 调用此方法 } }); }); p.then( (data) =\u003e { console.log(data); }, (err) =\u003e { console.log(err); } ); ","date":"2020-07-07","objectID":"/posts/notes/20200707/:2:0","tags":["Node"],"title":"十、Promise的使用","uri":"/posts/notes/20200707/"},{"categories":["notes"],"content":"Promise原理 Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。 只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。 Promise对象的状态改变，只有两种可能： 异步操作成功 从pending变为fulfilled 异步操作失败 从pending变为rejected ","date":"2020-07-07","objectID":"/posts/notes/20200707/:3:0","tags":["Node"],"title":"十、Promise的使用","uri":"/posts/notes/20200707/"},{"categories":["notes"],"content":"Promise对象的特点以及封装 特点 创建Promise对象后立即执行。 const fs = require(\"fs\"); let p = new Promise((resolve, reject) =\u003e { console.log(\"promise - test\"); // 读文件 fs.readFile(`${__dirname}/etc/a.txt`, \"utf-8\", (err, data) =\u003e { if (!err) { // 读取成功 resolve(data); // 调用此方法 } else { // 读取失败 reject(err); // 调用此方法 } }); }); p.then( (data) =\u003e { console.log(data); }, (err) =\u003e { console.log(err); } ); console.log(\"promise end- test\"); 因此不要在Promise里面写其他的代码，只写异步操作即可。 封装 const fs = require(\"fs\"); function getPromise(fileName) { return new Promise((resolve, reject) =\u003e { // 读文件 fs.readFile(`${__dirname}/etc/${fileName}.txt`, \"utf-8\", (err, data) =\u003e { if (!err) { // 读取成功 resolve(data); // 调用此方法 } else { // 读取失败 reject(err); // 调用此方法 } }); }); } getPromise(\"a\").then( (data) =\u003e { console.log(data); }, (err) =\u003e { console.log(err); } ); ","date":"2020-07-07","objectID":"/posts/notes/20200707/:4:0","tags":["Node"],"title":"十、Promise的使用","uri":"/posts/notes/20200707/"},{"categories":["notes"],"content":"解决回调地狱 让异步操作的本质实际上就是在异步操作成功后的回调函数里返回另外的Promise，在执行另一个then方法。 const fs = require(\"fs\"); function getPromise(fileName) { return new Promise((resolve, reject) =\u003e { // 读文件 fs.readFile(`${__dirname}/etc/${fileName}.txt`, \"utf-8\", (err, data) =\u003e { if (!err) { // 读取成功 resolve(data); // 调用此方法 } else { // 读取失败 reject(err); // 调用此方法 } }); }); } getPromise(\"a\") .then((data) =\u003e { console.log(data); return getPromise(\"b\"); }) .then((data) =\u003e { console.log(data); return getPromise(\"c\"); }) .then((data) =\u003e { console.log(data); }); ","date":"2020-07-07","objectID":"/posts/notes/20200707/:5:0","tags":["Node"],"title":"十、Promise的使用","uri":"/posts/notes/20200707/"},{"categories":["notes"],"content":"Ajax也会返回Promise对象 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton id=\"btn\"\u003e点我看笑话\u003c/button\u003e \u003cscript\u003e $('#btn').on('click', function () { $.ajax({ type: 'get', url: 'https://v1.hitokoto.cn/?a=g\u0026encode=json', }).then((backData) =\u003e { console.log(backData.hitokoto); }, (err) =\u003e { console.log(err); }) }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-07-07","objectID":"/posts/notes/20200707/:6:0","tags":["Node"],"title":"十、Promise的使用","uri":"/posts/notes/20200707/"},{"categories":["notes"],"content":"catch()方法 此方法能够抓取错误，在最后一个then()方法后边在加一个catch方法。无论哪一个出错都会抓取到错误。 getPromise(\"a\") .then((data) =\u003e { console.log(data); return getPromise(\"b\"); }) .then((data) =\u003e { console.log(data); return getPromise(\"c1\"); }) .then((data) =\u003e { console.log(data); }) .catch((err) =\u003e { console.log(err); }); ","date":"2020-07-07","objectID":"/posts/notes/20200707/:7:0","tags":["Node"],"title":"十、Promise的使用","uri":"/posts/notes/20200707/"},{"categories":["notes"],"content":"all()方法 Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。 let p1 = getPromise(\"a\"); let p2 = getPromise(\"b\"); let p3 = getPromise(\"c\"); let pAll = Promise.all([p1, p2, p3]); pAll.then((data) =\u003e { console.log(data); }); 此方法要求每一个小的Promise都要成功，只要有一个失败都会导致整个的Promise错误。 ","date":"2020-07-07","objectID":"/posts/notes/20200707/:8:0","tags":["Node"],"title":"十、Promise的使用","uri":"/posts/notes/20200707/"},{"categories":["notes"],"content":"race()方法 Promise.race()方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。 此方法与all方法的区别是只要有一个成功即成功。 let p1 = getPromise(\"a\"); let p2 = getPromise(\"b\"); let p3 = getPromise(\"c\"); let pRace = Promise.race([p1, p2, p3]); pRace.then((data) =\u003e { console.log(data); }); ","date":"2020-07-07","objectID":"/posts/notes/20200707/:9:0","tags":["Node"],"title":"十、Promise的使用","uri":"/posts/notes/20200707/"},{"categories":["notes"],"content":"Module的语法 使用模块的好处 避免变量污染，命名冲突 提供代码的复用率、维护性 依赖关系管理 export命令：用于规定模块对外的接口 外部能够读取模块内部的某个变量、函数、类 使用as关键字重命名 该命令可以出现在模块的任何位置，只要用于模块顶层即可。除了块作用域内 import命令：用于输入其他模块提供的功能 变量、函数 使用as关键字 输入的变量都是只读的 import命令具有提升效果 注意：module是静态导入，因此不能使用表达式和变量那些运行时才能知道的结果的变量。 通过export导出 导出变量 逐个导出 export let name = \"张三\"; export let age = 12; 批量导出 let name = \"张三\"; let age = 23; export { name, age }; 导出函数 逐个导出 export function addFn(a, b) { console.log(a + b); } 批量导出 function addFn1(a, b) { console.log(a + b); } function addFn2(a, b) { console.log(a + b); } export { addFn1, addFn2 }; 通过import导入 导入的变量只能读不能修改。 导入变量 直接导入 import { name, age } from \"./09-export.js\"; 设置别名导入 import { name as myName, age } from \"./09-export.js\"; 导入对象 对象中的属性可以修改。 import { obj } from \"./09-export.js\"; console.log(obj); obj.age = 78; console.log(obj); HTML引入模块 在HTML引入 \u003cscript type=\"module\" src=\"./10-import.js\"\u003e\u003c/script\u003e 浏览器加载 ES6 模块，也使用\u003cscript\u003e标签，但是要加入type=\"module\"属性。 ","date":"2020-07-07","objectID":"/posts/notes/20200707/:10:0","tags":["Node"],"title":"十、Promise的使用","uri":"/posts/notes/20200707/"},{"categories":["notes"],"content":"其他用法 整体加载 import * as obj from \"./export.js\"; console.log(\"fn1\", obj.fn1(5)); console.log(\"fn1\", obj.fn2(5)); 默认导入 正常输出导入时，要加{}。默认输出，导入时不要加{} 一个模块中只能由一个export default export default function () { console.log(\"temp\"); } import myfn from \"./export.js\"; ","date":"2020-07-07","objectID":"/posts/notes/20200707/:10:1","tags":["Node"],"title":"十、Promise的使用","uri":"/posts/notes/20200707/"},{"categories":["notes"],"content":"复合写法 在上面的三个文件中，import.js需要使用export.hs中的变量，而export.js又需要使用public.js中的变量。此时可以使用复合写法。 public.js export let number1 = 10; export.js // 导入public.js的number1变量 // 继续导出给 import.js 使用 // 复合写法 export { number1 } from \"./public.js\"; import.js import { number1 } from \"./export.js\"; console.log(number1); ","date":"2020-07-07","objectID":"/posts/notes/20200707/:10:2","tags":["Node"],"title":"十、Promise的使用","uri":"/posts/notes/20200707/"},{"categories":["exercise"],"content":" 查看源代码 ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:0:0","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"准备 ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:1:0","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"mysql-ithm的使用 安装npm i mysql-ithm 使用 参照文档即可。 简单示例 // 导入模块 const hm = require(\"mysql-ithm\"); //2.连接数据库 //如果数据库存在则连接，不存在则会自动创建数据库 hm.connect({ host: \"localhost\", //数据库地址 port: \"3306\", user: \"root\", //用户名，没有可不填 password: \"root\", //密码，没有可不填 database: \"cqmanager502\", //数据库名称 }); //3.创建Model(表格模型：负责增删改查) //如果table表格存在则连接，不存在则自动创建 let herotModel = hm.model(\"hero\", { heroName: String, heroSkill: String, }); //4.调用API：添加数据 // herotModel.insert( // { heroName: \"张三10\", heroSkill: \"吃吃吃\" }, // (err, results) =\u003e { // console.log(err); // console.log(results); // if (!err) console.log(\"增加成功\"); // } // ); // 批量增加 var arr = [ { heroName: \"张三10\", heroSkill: \"吃吃吃\" }, { heroName: \"张三11\", heroSkill: \"吃吃吃\" }, { heroName: \"张三12\", heroSkill: \"吃吃吃\" }, ]; herotModel.insert(arr, (err, results) =\u003e { console.log(err); console.log(results); if (!err) console.log(\"增加成功\"); }); ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:1:1","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"抓包入口 发起两个请求 只需要实例化第二个请求，在第一个请求中使用crawler.queue方法即可。 var c = new Crawler({ maxConnections: 10, callback: function (error, res, done) { if (error) { console.log(error); } else { var $ = res.$; JSON.parse(res.body).forEach((v) =\u003e { xq.queue(`https://pvp.qq.com/web201605/herodetail/${v.ename}.shtml`); }); } done(); }, }); c.queue(\"https://pvp.qq.com/web201605/js/herolist.json\"); // 创建一个详情实例 var xq = new Crawler({ maxConnections: 10, callback: function (error, res, done) { if (error) { console.log(error); } else { var $ = res.$; // console.log($(\".cover-name\").text(), $(\".skill-name\u003eb\").first().text()); // console.log(\"https:\" + $(\".ico-play\").prev(\"img\").attr(\"src\")); heroes.push({ heroName: $(\".cover-name\").text(), heroSkill: $(\".skill-name\u003eb\").first().text(), heroIcon: \"https:\" + $(\".ico-play\").prev(\"img\").attr(\"src\"), isDelete: false, }); } done(); }, }); 入库 应等待所有请求完成后在进行入库操作。 xq.on(\"drain\", function () { heroModel.insert(heroes, (err, results) =\u003e { if (!err) console.log(\"增加成功\"); }); }); 完整代码 var Crawler = require(\"crawler\"); var hm = require(\"mysql-ithm\"); // 创建一个获取全部英雄的实例 var c = new Crawler({ maxConnections: 10, callback: function (error, res, done) { if (error) { console.log(error); } else { var $ = res.$; JSON.parse(res.body).forEach((v) =\u003e { xq.queue(`https://pvp.qq.com/web201605/herodetail/${v.ename}.shtml`); }); } done(); }, }); c.queue(\"https://pvp.qq.com/web201605/js/herolist.json\"); // 声明一个数组 用于存放所有英雄 var heroes = []; // 创建一个详情实例 var xq = new Crawler({ maxConnections: 10, callback: function (error, res, done) { if (error) { console.log(error); } else { var $ = res.$; // console.log($(\".cover-name\").text(), $(\".skill-name\u003eb\").first().text()); // console.log(\"https:\" + $(\".ico-play\").prev(\"img\").attr(\"src\")); heroes.push({ heroName: $(\".cover-name\").text(), heroSkill: $(\".skill-name\u003eb\").first().text(), heroIcon: \"https:\" + $(\".ico-play\").prev(\"img\").attr(\"src\"), isDelete: false, }); } done(); }, }); // 等待所有请求全部做完之后，入库 xq.on(\"drain\", function () { heroModel.insert(heroes, (err, results) =\u003e { console.log(err); console.log(results); if (!err) console.log(\"增加成功\"); }); }); hm.connect({ host: \"localhost\", //数据库地址 port: \"3306\", user: \"root\", //用户名，没有可不填 password: \"root\", //密码，没有可不填 database: \"cqmanager\", //数据库名称 }); //3.创建Model(表格模型：负责增删改查) //如果table表格存在则连接，不存在则自动创建 let heroModel = hm.model(\"hero\", { heroName: String, heroSkill: String, heroIcon: String, isDelete: String, }); ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:1:2","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"项目服务端 ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:2:0","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"API接口 接口名称 URL 请求方式 请求参数 返回值 查询英雄列表 /hero/list GET {search:英雄名称}。不传返回所有 [heros:{英雄列表}] 查询英雄详情 /hero/info GET {id:英雄id} {data:英雄详情} 编辑英雄 /hero/update POST {name,skill,icon,id} {code:200} 删除英雄 /hero/delete POST {id} {code:200} 新增英雄 /hero/add POST {name,skill,icon} {code:200} 验证码 /captcha GET 无 验证码图片 用户注册 /user/register POST {username,password,code:验证码} {code:200|401|402} 用户登录 /user/login POST {username,password} {code:200|401|402} 退出登录 /logout GET 无 无 ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:2:1","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"后端基本架构 // 1. 导包 const express = require(\"express\"); // 2. 创建服务器 const app = express(); // 3. 托管静态资源 app.use(express.static(\"www\")); // 4. 配置中间件 // 5. 写接口 // 5.1 查询英雄列表（没有删除的） app.get(\"/hero/list\", (req, res) =\u003e { res.send(\"sb\"); }); // 5.2 查询英雄的详情（编辑的第一步：根据ID查询，显示到编辑页） app.get(\"/hero/info\", (req, res) =\u003e { res.send(\"sb\"); }); // 5.3 编辑英雄（） app.post(\"/hero/update\", (req, res) =\u003e { res.send(\"sb\"); }); // 5.4 删除英雄（软删除，实际上修改的是当前id的英雄isDelete为true） app.post(\"/hero/delete\", (req, res) =\u003e { res.send(\"sb\"); }); // 5.5 新增英雄 app.post(\"/hero/add\", (req, res) =\u003e { res.send(\"sb\"); }); // 5.6 验证码 app.get(\"/captcha\", (req, res) =\u003e { res.send(\"sb\"); }); // 5.7 用户注册 app.post(\"/user/register\", (req, res) =\u003e { res.send(\"sb\"); }); // 5.8 用户登录 app.post(\"/user/login\", (req, res) =\u003e { res.send(\"sb\"); }); // 5.9 退出登录 app.get(\"/logout\", (req, res) =\u003e { res.send(\"sb\"); }); // 6. 开启服务器 const port = 3000; app.listen(port, () =\u003e console.log(`Server running at http://127.0.0.1:${port}`) ); ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:2:2","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"查询英雄列表 简单分析 \r 考虑是否传入了参数 传入参数 模糊查询参数内容 没有传入参数 查询全部数据 此接口代码 // 5.1 查询英雄列表（没有删除的） app.get(\"/hero/list\", (req, res) =\u003e { let { search } = req.query; console.log(search); if (!search) { // 没有查询参数 -- 查询所有的英雄 heroModel.find('isDelete=\"false\"', (err, results) =\u003e { if (err) { res.send({ code: 500, msg: \"服务器错误\" + err, }); } else { res.send({ code: 200, heros: results, }); } }); } else { // 用户参数了参数 -- 查询包含search的英雄 // 模糊查询 heroModel.find( `heroName like \"%${search}%\" and isDelete=\"false\"`, (err, results) =\u003e { if (err) { res.send({ code: 500, msg: \"服务器错误\" + err, }); } else { res.send({ code: 200, heros: results, }); } } ); } }); ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:2:3","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"新增英雄 简单分析 \r 由于英雄是有头像的，因此接收参数需要用到multer模块 其余参数可使用req.body接收。 将其插入到数据库 需要对isDelete设置默认值。 此接口代码 app.post(\"/hero/add\", upload.single(\"heroIcon\"), (req, res) =\u003e { let { heroName, heroSkill, isDelete = \"false\" } = req.body; let heroIcon = req.file.filename; heroModel.insert( { heroName, heroSkill, heroIcon, isDelete }, (err, results) =\u003e { if (err) { res.send({ code: 500, msg: \"服务器内部错误\" + err, }); } else { res.send({ code: 200, msg: \"新增成功\", }); } } ); }); ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:2:4","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"根据ID查询英雄 简单分析 \r 接收到传来的id，然后根据此ID进行查询 为了防止恶意查询，应设置所查询的ID字段没有被删除 没有错误，且有数据 返回该数据 有错误 返回错误信息 无错误，但没有英雄 返回提示 此接口代码 app.get(\"/hero/info\", (req, res) =\u003e { // a. 接收传递过来的英雄ID let { id } = req.query; // b.根据id查询英雄的详细信息 heroModel.find(`id=${id}and isDelete=\"false\"`, (err, results) =\u003e { if (err == null \u0026\u0026 results.length != 0) { res.send({ code: 200, data: results[0], }); } else if (err) { res.send({ code: 500, mgs: \"服务器内部错误\" + err, }); } else { res.send({ code: 201, mgs: \"没有此英雄，或已被删除！\", }); } }); }); ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:2:5","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"编辑英雄 简单分析 \r 根据前端传来的参数，判断是否传入了图片 根据ID进行对应的修改 此接口代码 app.post(\"/hero/update\", upload.single(\"heroIcon\"), (req, res) =\u003e { let { id, heroName, heroSkill } = req.body; let obj = { heroName, heroSkill, }; if (req.file != undefined) { // 传递了文件参数 obj.heroIcon = req.file.filename; } heroModel.update(`id=${id}`, obj, (err, results) =\u003e { if (err) { res.send({ code: 500, msg: \"服务器内部错误\" + err, }); } else { res.send({ code: 200, msg: \"修改成功\", }); } }); }); ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:2:6","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"英雄删除 简单分析 \r 接收传来的ID 软删除，而不是真的删除 此接口代码 app.post(\"/hero/delete\", (req, res) =\u003e { let = { id } = req.body; hm.update(`id=${id}`, { isDelete: \"true\" }, function (err, results) { if (err) { res.send({ code: 500, msg: \"服务器内部错误\" + err, }); } else { res.send({ code: 200, msg: \"删除成功\", }); } }); }); ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:2:7","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"生成验证码 简单分析 \r 安装插件svg-captcha 验证码实际返回的是一个svg的图片 此接口代码 const svgCaptcha = require(\"svg-captcha\"); //验证码插件 app.get(\"/captcha\", (req, res) =\u003e { // 创建一个验证码 var captcha = svgCaptcha.create(); // 返回验证码 res.type(\"svg\"); res.status(200).send(captcha.data); }); ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:2:8","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"注册用户 简单分析 \r 建立一个表格，用于存放用户信息 进入路由逻辑后，首先判断验证码是否正确 可以通过一个变量接收验证码的值 当验证码正确时，应首先验证数据库无此用户，然后在进行逻辑处理 app.post(\"/user/register\", (req, res) =\u003e { let { username, password, code } = req.body; console.log(username, password, code); if (code.toLocaleLowerCase() != captchaCode.toLocaleLowerCase()) { res.send({ code: 402, msg: \"验证码错误\", }); } else { userModel.find(`username=\"${username}\"`, (err, results) =\u003e { if (err) { res.send({ code: 500, msg: \"服务器内部错误\", }); } else { if (results.length \u003e 0) { // 用户名是否存在 res.send({ code: 401, msg: \"用户已存在\", }); } else { userModel.insert( { username, password, }, (err, results) =\u003e { // 注册时的错误判断 if (err) { res.send({ code: 500, msg: \"服务器内部错误\", }); } else { res.send({ code: 200, msg: \"注册成功\", }); } } ); } } }); } }); ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:2:9","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"用户登录 简单分析 \r 只需要查询用户名与密码匹配的数据即可 核心代码 app.post(\"/user/login\", (req, res) =\u003e { let { username, password } = req.body; userModel.find( `username=\"${username}\" and password=\"${password}\"`, (err, results) =\u003e { if (err) { res.send({ code: 500, msg: \"服务器内部错误\" + err, }); } else { if (results.length \u003e 0) { res.send({ code: 200, msg: \"登录成功\", }); } else { res.send({ code: 401, msg: \"账号或密码错误\", }); } } } ); }); ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:2:10","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"加入Cookie登录验证 cookie使用cookie-session可以使用模块。 const cookieSession = require(\"cookie-session\"); app.use( cookieSession({ name: \"session\", keys: [\"123\", \"456\", \"xiaokang\"], maxAge: 24 * 69 * 60 * 1000, // 过期事件 24小时过期 }) ); 由于多个页面都是需要判断用户是否登陆，因此需要单独写一个接口，用于判断用户有没有登陆。 app.get(\"/isLogin\", (req, res) =\u003e { // 如果没有登录， res.send(req.session.user); }); 当用户登陆后会返回一个设定的值，否则返回空字符串。 ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:2:11","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"退出登陆 简单分析 \r 退出登陆即删除cookie 核心代码 app.get(\"/logout\", (req, res) =\u003e { req.session = null; res.writeHead(302, { Location: \"login.html\", }); res.end(); }); ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:2:12","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"项目客户端 ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:3:0","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"首页 简单分析 \r 进入页面 首先发送Ajax请求全部数据，然后渲染到页面 点击查询按钮 查询数据框内的内容 效果展示 核心代码 \u003c!-- 创建模板 --\u003e \u003cscript id=\"cq\" type=\"text/html\"\u003e {{ each heros v }} \u003ctr\u003e \u003ctd\u003e{{ v.heroName }}\u003c/td\u003e \u003ctd\u003e{{ v.heroSkill }}\u003c/td\u003e \u003ctd\u003e\u003cimg src=\"{{ v.heroIcon }}\" alt=\"\" /\u003e\u003c/td\u003e \u003ctd\u003e \u003cbutton class=\"btn btn-success btn-edit\" onclick='location.href=\"./update.html?id={{v.id}}\"'\u003e编辑🍞\u003c/button\u003e \u003cbutton class=\"btn btn-danger btn-delete\" data-id='{{v.id}}'\u003e删除👍\u003c/button\u003e \u003c/td\u003e \u003c/tr\u003e {{ /each }} \u003c/script\u003e \u003cscript\u003e $.ajax({ type: 'get', url: '/hero/list', success: function (backData) { if (backData.code == 200) { var resHtml = template('cq', backData) $('tbody').html(resHtml) } } }); // 二、英雄名包含关键词的英雄 $('#searchBtn').on('click', function (e) { e.preventDefault() let search = $('#search').val().trim() $.ajax({ type: 'get', url: '/hero/list', data: { search }, success: function (backData) { if (backData.heros.length == 0) { $('tbody').html('没有数据') return } if (backData.code == 200) { var resHtml = template('cq', backData) $('tbody').html(resHtml) } } }); }) \u003c/script\u003e ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:3:1","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"新增页面 简单分析 \r 点击新增按钮，跳转新增页面 输入英雄昵称、技能与头像后点击提交 将输入内容新增，并且跳回首页 效果展示 核心代码 \u003cscript\u003e $(function () { // 1. 图片预览 $('#heroIcon').on('change', function () { // 1. 获取用户选择的图片 var file = this.files[0] // 2. 创建一个url var url = URL.createObjectURL(file) // 3. 把url赋值给与滥用的img的src属性 $('.preview').attr('src', url) }) // 2. 完成新增 $('.btn-add').on('click', function (e) { e.preventDefault() var fd = new FormData(document.querySelector('form')) $.ajax({ type: 'post', url: '/hero/add', data: fd, contentType: false, processData: false, success: function (backData) { if (backData.code == 200) { alert('新增成功') window.location.href = '/' } } }) }) }) \u003c/script\u003e ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:3:2","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"根据ID查询英雄（编辑第一步） 简单分析 \r 根据id查询英雄是放在编辑页面展示，也就是说进入编辑页首先发送Ajax请求，获取英雄的信息 效果展示 核心代码 \u003cscript\u003e $(function () { // 一、根据ID发送Ajax请求，获取详细信息 并显示在页面标签上 var id = window.location.search.split('=')[1] $.ajax({ url: '/hero/info', type: 'get', data: { id }, success: function (backData) { if (backData.code == 200) { $('#id').val(id) $('#name').val(backData.data.heroName) $('#skill').val(backData.data.heroSkill) $('#iconImg').attr('src', backData.data.heroIcon) } } }) }) \u003c/script\u003e ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:3:3","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"编辑英雄 简单分析 \r 与新增英雄较为类似，获取formData数据后提交即可 核心代码 // 图片预览 $('#heroIcon').on('change', function () { var file = this.files[0] var url = URL.createObjectURL(file) $('#iconImg').attr('src', url) }) // 保存按钮事件 $('.btn-save').on('click', function (e) { e.preventDefault() var fd = new FormData(document.querySelector('form')) $.ajax({ type: 'post', url: '/hero/update', contentType: false, processData: false, data: fd, success: function (backData) { if (backData.code == 200) { alert('编辑成功') window.location.href = '/' } } }) }) ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:3:4","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"删除英雄 简单分析 \r 点击按钮后，发送POST请求即可 核心代码 app.post(\"/hero/delete\", (req, res) =\u003e { let = { id } = req.body; heroModel.update(`id=${id}`, { isDelete: \"true\" }, function (err, results) { if (err) { res.send({ code: 500, msg: \"服务器内部错误\" + err, }); } else { res.send({ code: 200, msg: \"删除成功\", }); } }); }); ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:3:5","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"显示验证码 简单分析 \r 只需要将图片的路径设置为验证码接口即可 但需要注意的是img标签有缓存，如果路径相同则不发送请求。 因此解决这个问题只需要在请求时加入一个随机参数即可，而参数值使用随机数即可 效果展示 核心代码 \u003cscript\u003e $(function () { $('.vCode').on('click', function () { $(this).attr('src', '/captcha?xc=' + Math.random()) }) }) \u003c/script\u003e ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:3:6","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"注册用户 简单分析 \r 获取输入框的内容，发送Ajax请求即可。 但是发送的密码是明文，因此需要进行加密处理（MD5） 效果展示 核心代码 $('.register').on('click', function (e) { e.preventDefault() let username = $('#username').val().trim() $('#password').val(md5($('#password').val().trim(), 'yingyingguaiguai')) let password = $('#password').val().trim() let code = $('#code').val().trim() $.ajax({ type: 'post', url: '/user/register', data: { username, password, code }, success: function (backData) { if (backData.code == 200) { alert(backData.msg); window.location.href = '/' } else { alert(backData.msg) } } }) }) ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:3:7","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"用户登录 简单分析 \r 获取输入框的内容，发送Ajax请求即可。 但是发送的密码是明文，因此需要进行加密处理（MD5） 效果展示 核心代码 $(function () { $('.login').on('click', function (e) { e.preventDefault() let username = $('#username').val().trim() $('#password').val(md5($('#password').val().trim(), 'yingyingguaiguai')) let password = $('#password').val().trim() $.ajax({ type: \"post\", url: '/user/login', data: { username, password }, success: function (backData) { if (backData.code == 200) { window.location.href = '/' } else { alert(backData.msg) } } }) }) }) ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:3:8","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"判断是否登陆 简单分析 \r 因为已经存在了一个接口用于判断是否登陆，因此在页面加载后自动发送请求判断是否登陆即可。 核心代码 \u003cscript\u003e (function () { $.ajax({ type: 'get', url: '/isLogin', success: function (backData) { if (backData == '') { alert('没有登陆') window.location.href = '/login.html' } } }) })() \u003c/script\u003e ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:3:9","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"涉及概念 ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:4:0","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["exercise"],"content":"COOKIE工作流程 一个简单的演示 const express = require(\"express\"); const app = express(); app.get(\"/login\", (req, res) =\u003e { res.writeHead(200, { \"Content-Type\": \"text/plain;charset=utf-8\", \"Set-Cookie\": \"userid=123456\", }); res.end(); }); // 查询接口 app.get(\"/list\", (req, res) =\u003e { // 接收cookie console.log(req.headers); res.send(\"sb\"); }); app.listen(8086, () =\u003e { console.log(\"服务器已开启\"); }); ","date":"2020-07-05","objectID":"/posts/exercise/20200705-cqmanager/:4:1","tags":null,"title":"九、英雄管理系统","uri":"/posts/exercise/20200705-cqmanager/"},{"categories":["notes"],"content":"如何写NodeJs模块 遵守commentjs规范。 导入模块 暴露出去（导出） 一个简单的示例： // 定义一个对象 let db = { baseUrl: \"http://127.0.0.1:3000/\", insert: function () { console.log(\"插入方法\"); }, delete: function () { console.log(\"删除方法\"); }, }; // 将其暴露出去 module.exports = db; 在我们的模块中定义一个对象，并将其暴露出去。接下来在我们自己的js文件中去使用这个对象。 const myMoudle = require(\"./01-自己写的模块.js\"); myMoudle.insert(); ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-3/:1:0","tags":["Node"],"title":"八、NPM包管理","uri":"/posts/notes/20200704/20200704-3/"},{"categories":["notes"],"content":"写一个自己的模块 ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-3/:2:0","tags":["Node"],"title":"八、NPM包管理","uri":"/posts/notes/20200704/20200704-3/"},{"categories":["notes"],"content":"NPM发布包 进入待发布的目录，然后初始化目录npm init。并依次填入包名、版本、描述等信息。如果没有可以跳过（回车）。 注册NPM账号 官方网址注册（推荐） 使用npm adduser命令注册 登录账号npm login 如果使用了淘宝镜像须切换回官方源npm config set registry https://registry.npmjs.org/ 发布包npm publish 包名不能重复 需要注意配置文件的main字段指定的为主文件。 如果使用了淘宝镜像须切换回官方源npm config set registry https://registry.npmjs.org/ 更新包 修改版本 重新发布 教程参考 https://blog.csdn.net/taoerchun/article/details/82531549 ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-3/:3:0","tags":["Node"],"title":"八、NPM包管理","uri":"/posts/notes/20200704/20200704-3/"},{"categories":["notes"],"content":"title: 七、NodeJs数据库管理 categories: 大前端 NodeJs tags: 大前端 NodeJs mysql 笔记 date: 2020-07-04 15:56:58 ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-2/:0:0","tags":["Node"],"title":"七、NodeJs数据库管理","uri":"/posts/notes/20200704/20200704-2/"},{"categories":["notes"],"content":"建表 MySQL程序可以使用PHP study集成工具。链接、操作数据库可以使用phpstudy自带的工具也可以使用navicat工具。 ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-2/:1:0","tags":["Node"],"title":"七、NodeJs数据库管理","uri":"/posts/notes/20200704/20200704-2/"},{"categories":["notes"],"content":"SQL语句-增删改查 插入数据 insert into 表名(字段名1，字段名2) values(值1，值2); 例如： insert into user(name,description) values('陈浩南','铜锣湾扛把子'); 删除数据 delete from 表名 where 条件; 条件一定要写，如果不写则会删除该表中所有的数据删除。 例如： delete from user where id\u003e3; 修改数据 update 表名 set 字段名1=新值1,字段名2=新值2 where 条件; 条件一定要写，如果不写则会修改数据表中的全部数据 例如： update user set name='子风兄',description='比波波还骚' where id=3; 查询数据 select * from 表名 [where 条件]; ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-2/:2:0","tags":["Node"],"title":"七、NodeJs数据库管理","uri":"/posts/notes/20200704/20200704-2/"},{"categories":["notes"],"content":"NodeJs操作数据库 NodeJs链接数据库需要使用模块mysql。基本结构如下： var mysql = require(\"mysql\"); // 创建一个链接数据库的链接 var connection = mysql.createConnection({ // 数据库地址 host: \"localhost\", // 数据库账号 user: \"root\", // 数据库密码 password: \"root\", // 数据库名（非表名） database: \"study\", }); // 打开链接 connection.connect(); // 具体语句 // ..... connection.end(); 连接与关闭链接可以不写。 ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-2/:3:0","tags":["Node"],"title":"七、NodeJs数据库管理","uri":"/posts/notes/20200704/20200704-2/"},{"categories":["notes"],"content":"查 connection.query(\"select * from user\", (error, result, fields) =\u003e { // 如果查询遇到错误，则error代表错误。没有错误则为null console.log(error); // 执行sql语句得到的结果。如果查询遇到错误，则为undefined console.log(result); // 字段信息 console.log(fields); }); result fields ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-2/:3:1","tags":["Node"],"title":"七、NodeJs数据库管理","uri":"/posts/notes/20200704/20200704-2/"},{"categories":["notes"],"content":"其他查询方法 以什么开头 select * from hero where heroName like \"马%\"; 以什么结尾 select * from hero where heroName like \"%韦\"; 包含什么内容 select * from hero where heroName like \"%魔%\"; 并且条件 select * from hero where heroName like \"%魔%\" and isDelete='false'; 可用and链接多个条件。 或条件 select * from hero where heroName like \"%魔%\" or heroName like \"%信%\"; 排序 降序 select * from hero where heroName like \"%魔%\" or heroName like \"%信%\" order by id desc; 升序 默认为升序 select * from hero where heroName like \"%魔%\" or heroName like \"%信%\" order by id asc; 分页 倒序情况下拿到前20条数据 select * from hero order by id desc limit 0,20; 连表查询 select 字段 from 表1 inner join 表2 on 对应关系 select * from horder inner join customer on horder.cid = custom.id; 可对两个表设置别名，但是后边也要设置别名。 select * from horder h inner join customer c on h.cid = c.id; 也可以只查询某个字段。 select h.id,h.oname,c.price,c.id,c.cname,c.age from horder h inner join customer c on h.cid = c.id; ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-2/:3:2","tags":["Node"],"title":"七、NodeJs数据库管理","uri":"/posts/notes/20200704/20200704-2/"},{"categories":["notes"],"content":"增 let name = \"伦哥\"; let description = \"这是个描述\"; connection.query( `insert into user(name,description) values('${name}','${description}')`, (error, result, fields) =\u003e { // 如果查询遇到错误，则error代表错误。没有错误则为null console.log(error); // 执行sql语句得到的结果。如果查询遇到错误，则为undefined console.log(result); // 字段信息 console.log(fields); } ); 其中result会返回一个对象，fields返回undefined。其中affectedRows表示受影响的行数，如果大于0则表示新增成功。 ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-2/:3:3","tags":["Node"],"title":"七、NodeJs数据库管理","uri":"/posts/notes/20200704/20200704-2/"},{"categories":["notes"],"content":"删 let id = 3; connection.query(`delete from user where id=${id}`, (error, result, fields) =\u003e { if (error == null) { console.log(result); } }); ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-2/:3:4","tags":["Node"],"title":"七、NodeJs数据库管理","uri":"/posts/notes/20200704/20200704-2/"},{"categories":["notes"],"content":"改 改与新增类似。 let name = \"伦哥\"; let description = \"这是个描述\"; let id = 3; connection.query( `update user set name='${name}',description='${description}' where id=${id}`, (error, result, fields) =\u003e { if (error == null) { console.log(result); } } ); ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-2/:3:5","tags":["Node"],"title":"七、NodeJs数据库管理","uri":"/posts/notes/20200704/20200704-2/"},{"categories":["notes"],"content":"英雄管理系统-添加接口 app.post(\"/hero/add\", upload.single(\"heroIcon\"), (req, res) =\u003e { // 1.1 接收前端传递过来的参数 console.log(req.file); console.log(req.body); let heroIcon = req.file.filename; let { heroName, heroSkill } = req.body; // 执行sql语句代码 connection.query( `insert into hero(heroName,heroSkill,heroIcon) values('${heroName}','${heroSkill}','${heroIcon}');`, (error, result, fields) =\u003e { if (error == null) { res.send({ code: 200, msg: \"新增成功\", list: { heroName: heroName, heroSkill: heroSkill }, }); } else { res.send({ code: 400, msg: \"新增失败\", list: { heroName: heroName, heroSkill: heroSkill }, }); } } ); }); ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-2/:4:0","tags":["Node"],"title":"七、NodeJs数据库管理","uri":"/posts/notes/20200704/20200704-2/"},{"categories":["notes"],"content":"英雄管理系统-获取接口 app.get(\"/hero/all\", (req, res) =\u003e { connection.query( `select id,heroName,heroSkill,heroIcon from hero where isDelete = 0`, (error, result, fields) =\u003e { if (error == null) { console.log(result); res.send({ code: 200, msg: \"查询成功\", list: result, }); } else { res.send({ code: 400, msg: \"查询失败\", list: null, }); } } ); }); ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-2/:5:0","tags":["Node"],"title":"七、NodeJs数据库管理","uri":"/posts/notes/20200704/20200704-2/"},{"categories":["notes"],"content":"完整代码 const express = require(\"express\"); const multer = require(\"multer\"); const mysql = require(\"mysql\"); var connection = mysql.createConnection({ host: \"localhost\", user: \"root\", password: \"root\", database: \"study\", }); const app = express(); var upload = multer({ dest: \"uploads/\" }); app.use(express.static(\"uploads\")); // 路由 // 参数:heroName heroSkill,heroIcon(文件), app.post(\"/hero/add\", upload.single(\"heroIcon\"), (req, res) =\u003e { // 1.1 接收前端传递过来的参数 console.log(req.file); console.log(req.body); let heroIcon = req.file.filename; let { heroName, heroSkill } = req.body; // 执行sql语句代码 connection.query( `insert into hero(heroName,heroSkill,heroIcon) values('${heroName}','${heroSkill}','${heroIcon}');`, (error, result, fields) =\u003e { if (error == null) { res.send({ code: 200, msg: \"新增成功\", list: { heroName: heroName, heroSkill: heroSkill }, }); } else { res.send({ code: 400, msg: \"新增失败\", list: { heroName: heroName, heroSkill: heroSkill }, }); } } ); }); app.get(\"/hero/all\", (req, res) =\u003e { connection.query( `select id,heroName,heroSkill,heroIcon from hero where isDelete = 0`, (error, result, fields) =\u003e { if (error == null) { console.log(result); res.send({ code: 200, msg: \"查询成功\", list: result, }); } else { res.send({ code: 400, msg: \"查询失败\", list: null, }); } } ); }); // 开启服务器 app.listen(3000, () =\u003e { console.log(\"开启成功\"); }); ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-2/:6:0","tags":["Node"],"title":"七、NodeJs数据库管理","uri":"/posts/notes/20200704/20200704-2/"},{"categories":["notes"],"content":"什么是中间件 在路由相应之前就会执行中间件的内容，例如在中间件中进行赋值，这种就可以在路由执行时使用这个值。 所以中间件就是服务器开启之后和路由响应之前执行的一个函数。这个函数可以操作req与res。使用next()向下传递到下一个中间件，最后传到路由。 例如开启三个中间件的写法： app.use((req, res, next) =\u003e { console.log(\"中间件1\"); req.requestTime = Date.now(); next(); }); app.use((req, res, next) =\u003e { console.log(\"中间件2\"); next(); }); app.get(\"/\", (req, res) =\u003e { console.log(Date.now() - req.requestTime); res.send(\"Hello World!\"); }); ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-1/:1:0","tags":["Node"],"title":"六、中间件与跨域","uri":"/posts/notes/20200704/20200704-1/"},{"categories":["notes"],"content":"什么是跨域 浏览器使用ajax时，如果请求的接口地址和当前打开的页面地址不同源称之为跨域。 协议和地址、端口都一样成为同源。有一个不同则为不同源。 同源与不同源的意义 浏览器安全策略。 ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-1/:2:0","tags":["Node"],"title":"六、中间件与跨域","uri":"/posts/notes/20200704/20200704-1/"},{"categories":["notes"],"content":"设置响应头允许跨域 只需要在响应头处设置Access-Control-Allow-Origin为*即可。 app.post(\"/login\", (req, res) =\u003e { // 设置响应头，允许资源被访问、共享 res.setHeader(\"Access-Control-Allow-Origin\", \"*\"); // 接收用户传递过来的用户名和密码 let { username, password } = req.body; if (username == \"admin\" \u0026\u0026 password == \"123\") { res.send({ code: 200, msg: \"登陆成功\", }); } else { res.send({ code: 400, msg: \"登陆失败\", }); } }); ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-1/:3:0","tags":["Node"],"title":"六、中间件与跨域","uri":"/posts/notes/20200704/20200704-1/"},{"categories":["notes"],"content":"在中间件设置允许跨域 自己写中间件 \r因为中间件会在执行路由之前会被调用，因此可以将设置响应头在中间件中设置。 app.use((req, res, next) =\u003e { // 设置响应头，允许资源被访问、共享 res.setHeader(\"Access-Control-Allow-Origin\", \"*\"); next(); }); 使用第三方模块 \r安装cors模块（npm i cors）。接下来使用即可。 const cors = require(\"cors\"); app.use(cors()); ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-1/:4:0","tags":["Node"],"title":"六、中间件与跨域","uri":"/posts/notes/20200704/20200704-1/"},{"categories":["notes"],"content":"jsonp 原理 通过动态创建script标签，通过script标签的src请求没有域限制来获取资源 例如在html页面中，将script标签地址改为后端接口。 app.get(\"/all\", (req, res) =\u003e { console.log(Date.now() - req.requestTime); res.send(\"console.log('hah')\"); }); \u003cscript src=\"http://127.0.0.1:3000/all\"\u003e\u003c/script\u003e 那么当服务器开启时，我们就会看到返回来的内容会当作JavaScript代码执行。 因此此方式需要与前端进行配合才可使用。例如前端通过get参数方式将函数名传递给后端。 \u003cscript\u003e function fn() { console.log('这是事先准备好的函数！') } function fn1(backData) { console.log(backData) } \u003c/script\u003e \u003cscript src=\"http://127.0.0.1:3000/all?callback=fn\"\u003e\u003c/script\u003e app.get(\"/all\", (req, res) =\u003e { let fn = req.query.callback; res.send(`fn()`); }); app.get(\"/all\", (req, res) =\u003e { let fn = req.query.callback; res.send(`${fn}({'name':'haha','price':100})`); }); 动态获取数据的示例 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton id=\"btn\"\u003e点我获取\u003c/button\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js\"\u003e\u003c/script\u003e \u003cscript\u003e function sb(backData) { // 接收后端的数据 console.log(backData); } $('#btn').on('click', function () { // 1. 动态创建script标签 var script1 = document.createElement('script') $(script1).attr('src', 'http://127.0.0.1:3000/all?callback=sb') // 2. 把script添加到body中使用 $('body').append(script1) }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e app.get(\"/all\", (req, res) =\u003e { let fn = req.query.callback; res.send(`${fn}({'name':'haha','price':100})`); }); ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-1/:5:0","tags":["Node"],"title":"六、中间件与跨域","uri":"/posts/notes/20200704/20200704-1/"},{"categories":["notes"],"content":"ajax请求使用jsonp $.ajax({ url: 'http://127.0.0.1:3000/all', dataType: 'jsonp', success: function (backData) { console.log(backData) } }) 如果访问的接口支持jsonp，那么jQuery会自动创建script标签 ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-1/:6:0","tags":["Node"],"title":"六、中间件与跨域","uri":"/posts/notes/20200704/20200704-1/"},{"categories":["notes"],"content":"请求一言接口示例 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton id=\"btn\"\u003e点我获取\u003c/button\u003e \u003cdiv\u003e\u003c/div\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js\"\u003e\u003c/script\u003e \u003cscript\u003e function sb(backData) { // 接收后端的数据 console.log(backData); } $('#btn').on('click', function () { $.ajax({ url: 'https://v1.hitokoto.cn?encode=json', dataType: 'jsonp', success: function (backData) { let data = JSON.parse(backData) $('div').html(data['hitokoto'] + '---' + data['from']) } }) }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-07-04","objectID":"/posts/notes/20200704/20200704-1/:7:0","tags":["Node"],"title":"六、中间件与跨域","uri":"/posts/notes/20200704/20200704-1/"},{"categories":["notes"],"content":" 查看源码\r","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-2/:0:0","tags":["Node"],"title":"五、express实战-英雄管理系统","uri":"/posts/notes/20200703/20200703-2/"},{"categories":["notes"],"content":"后端路由 简单来说，注册路由就是写接口 ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-2/:1:0","tags":["Node"],"title":"五、express实战-英雄管理系统","uri":"/posts/notes/20200703/20200703-2/"},{"categories":["notes"],"content":"登录接口 登录接口实现很简单，只需要接收post传来的参数，然后进行验证即可。 const express = require(\"express\"); const bodyParser = require(\"body-parser\"); app.use(bodyParser.urlencoded({ extended: false })); // 登录接口 app.post(\"/login\", (req, res) =\u003e { // 接收用户传递过来的用户名和密码 let { username, password } = req.body; if (username == \"admin\" \u0026\u0026 password == \"123\") { res.send({ code: 200, msg: \"登陆成功\", }); } else { res.send({ code: 400, msg: \"登陆失败\", }); } }); app.listen(3000, () =\u003e { console.log(\"开启成功\"); }); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-2/:2:0","tags":["Node"],"title":"五、express实战-英雄管理系统","uri":"/posts/notes/20200703/20200703-2/"},{"categories":["notes"],"content":"获取所有英雄接口 获取所有英雄接口需要调用工具的方法。 const path = require(\"path\"); // 导入自己写的模块(需要拼接绝对路径) const db = require(path.join(__dirname, \"utils\", \"db.js\")); // 获取所有英雄接口 app.get(\"/getAllHero\", (req, res) =\u003e { // 调用自己写的db.js模块中的方法,获取所有英雄 let list = db.getHeros(); res.send({ code: 200, data: list, }); }); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-2/:3:0","tags":["Node"],"title":"五、express实战-英雄管理系统","uri":"/posts/notes/20200703/20200703-2/"},{"categories":["notes"],"content":"根据ID获取英雄 app.get(\"/getHeroById\", (req, res) =\u003e { let { id } = req.query; let result = db.getHeroById(id); if (result != false) { res.send({ code: 200, msg: \"获取成功\", data: result, }); } else { res.send({ code: 400, msg: \"获取失败\", }); } }); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-2/:4:0","tags":["Node"],"title":"五、express实战-英雄管理系统","uri":"/posts/notes/20200703/20200703-2/"},{"categories":["notes"],"content":"前端页面–登录 登录页面使用Ajax向后端发送请求即可。 $(function () { $('.login').on('click', function (e) { e.preventDefault() let username = $('#username').val().trim() let password = $('#password').val().trim() $.ajax({ type: 'post', url: 'http://127.0.0.1:3000/login', data: { username, password }, success: function (backData) { if (backData.code == 200) { alert('登录成功') window.location.href = 'index.html' } else { alert(backData.msg) } } }) }) } ) ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-2/:5:0","tags":["Node"],"title":"五、express实战-英雄管理系统","uri":"/posts/notes/20200703/20200703-2/"},{"categories":["notes"],"content":"前端页面–显示数据 当页面一加载，首先应自动发送请求获取全部的英雄数据。然后通过模板引擎渲染。 $(function () { $.ajax({ type: 'get', url: 'http://127.0.0.1:3000/getAllHero', success: function (res) { console.log(res) // var temp = template('cq', res); // $('tbody').html(temp) if (res.code == 200) { // 通过模板引擎渲染 var resHtml = template('cq', res) console.log(resHtml) $('tbody').html(resHtml) } } }) }) // 模板引擎 \u003cscript type=\"text/html\" id=\"cq\"\u003e {{each data v}} \u003ctr\u003e \u003ctd\u003e\u003cimg src=\"{{v.icon}}\"\u003e\u003c/td\u003e \u003ctd\u003e{{v.name}}\u003c/td\u003e \u003ctd\u003e{{v.skill}}\u003c/td\u003e \u003ctd\u003e \u003cbutton onclick=\"location.href='./edit.html?id={{v.id}}'\" class=\"btn btn-primary\"\u003e编辑\u003c/button\u003e \u003cbutton data-id='{{v.id}}' class=\"btn btn-danger delete\"\u003e删除\u003c/button\u003e \u003c/td\u003e \u003c/tr\u003e {{/each}} \u003c/script\u003e 由于我们的上传目录(uploads)没有暴露，因此外部不可以访问到，需要将此目录暴露出去，这样就能解决图片无法加载的问题。 ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-2/:6:0","tags":["Node"],"title":"五、express实战-英雄管理系统","uri":"/posts/notes/20200703/20200703-2/"},{"categories":["notes"],"content":"删除数据 $('tbody').on('click', '.delete', function () { var that = this; // console.log(this) var id = $(this).attr('data-id').trim(); if (confirm('你要删除吗??')) { $.ajax({ type: 'get', url: 'http://127.0.0.1:3000/delete', data: { id: id }, success: function (res) { // console.log(res) if (res.code == 200) { $(that).parent().parent().remove(); } } }) } }) ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-2/:7:0","tags":["Node"],"title":"五、express实战-英雄管理系统","uri":"/posts/notes/20200703/20200703-2/"},{"categories":["notes"],"content":"修改数据 $(function () { var id = window.location.search.split('=')[1]; console.log(id) $.ajax({ type: 'get', url: 'http://127.0.0.1:3000/getHeroById', data: { id: id }, success: function (res) { // console.log(res) if (res.code == 200) { $('#heroName').val(res.data.name) $('#skillName').val(res.data.skill); $('.preview').attr('src', res.data.icon); $('#id').val(id) } } }) $('#heroIcon').on('change', function () { // console.log() var fileName = URL.createObjectURL(this.files[0]); $('.preview').attr('src', fileName) }) //保存数据 $('.btn-save').on('click', function (e) { e.preventDefault(); var formData = new FormData($('form')[0]); $.ajax({ type: 'post', url: 'http://127.0.0.1:3000/edit', data: formData, contentType: false, processData: false, success: function (res) { // console.log(res) if (res.code == 200) { alert(res.msg); window.location.href = './index.html'; } else { alert(res.msg) } } }) }) }) ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-2/:8:0","tags":["Node"],"title":"五、express实战-英雄管理系统","uri":"/posts/notes/20200703/20200703-2/"},{"categories":["notes"],"content":"服务器重定向 // 如果找不到页面 app.use((req, res) =\u003e { // 服务器重定向：主动修改地址栏 res.writeHead(302, { Location: \"http://www.baidu.com\", }); res.end(); }); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-2/:9:0","tags":["Node"],"title":"五、express实战-英雄管理系统","uri":"/posts/notes/20200703/20200703-2/"},{"categories":["notes"],"content":"什么是端口 一台电脑可以部署多个服务器，根据端口不同找到不同的服务器。 默认的http端口为80端口。 ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:1:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"web服务器读取网页并返回 使用http模块开启一个服务器 在服务器内部读取文件，将读取到的字符串内容作为服务器的响应返回 const http = require(\"http\"); const fs = require(\"fs\"); const path = require(\"path\"); const server = http.createServer((req, res) =\u003e { // 拼接路径 const filePath = path.join(__dirname, \"index.html\"); fs.readFile(filePath, \"utf-8\", (err, data) =\u003e { if (err == null) { // 返回页面 res.end(data); } else { res.end(err); } }); }); server.listen(8080, () =\u003e { console.log(\"成功开启\"); }); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:2:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"静态服务器的实现 静态服务器的流程 浏览器向服务器发起请求 服务器查询受否存在这个文件 存在 返回 不存在 返回默认404页面 静态服务器的实现 静态服务器实现与读取网页返回几乎一致，通过request.url可以获取用户访问的路径。 const http = require(\"http\"); const fs = require(\"fs\"); const path = require(\"path\"); const server = http.createServer((req, res) =\u003e { // 得到用户请求的是哪一个页面 console.log(req.url); // /pica.jpg var filePath = path.join(__dirname, \"static\", req.url); // 服务器存在嗅探功能，根据请求资源名字，能够得知请求类型。因此编码参数可以省略 fs.readFile(filePath, (err, data) =\u003e { if (err == null) { res.end(data); } else { res.end(path.join(__dirname, \"static\", \"404.html\")); } }); }); server.listen(8080, () =\u003e { console.log(\"成功开启:http://127.0.0.1:8080\"); }); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:3:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"接收前端传来的get参数 get参数是与url拼接在一起的，因此可以使用url.parse方法解析字符串。 const http = require(\"http\"); // 处理url const url = require(\"url\"); const server = http.createServer((req, res) =\u003e { // res.end(req.url); /** * url.parse 解析通过get传来的参数 * @param {string} req.url 待解析的url * @param {boolean} true 如果为true则返回一个对象 * @returns {Object} */ let urlObj = url.parse(req.url, true); console.log(urlObj.query); res.end(JSON.stringify(urlObj.query)); }); server.listen(8080, () =\u003e { console.log(\"成功开启\"); }); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:4:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"接收前端传来的post参数 接收post数据需要为请求体注册data事件与end事件。前者表示接收数据，回调函数内参数传入数据，函数体处理数据；后者表示接收完数据后调用的回调函数。 处理接收的数据使用querystring.parse可以将接收的数据转换为对象形式。 const http = require(\"http\"); const querystring = require(\"querystring\"); const server = http.createServer((req, res) =\u003e { let postData = \"\"; // 时间处理程序，参数是传递过来的数据 req.on(\"data\", (chunk) =\u003e { postData += chunk; }); req.on(\"end\", () =\u003e { console.log(postData); //name=123\u0026passwd=haha // 解析传来的参数数据 let postObj = querystring.parse(postData); //{ name: '123', passwd: 'haha' } console.log(postObj); }); res.end(\"sb\"); }); server.listen(8080, () =\u003e { console.log(\"成功开启\"); }); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:5:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"GET与POST的区别 GET POST 传值 通过url传值 通过请求体(querystring) 数据大小 相对较少 将对较大 安全性 相对较低 相对较高 一般用途 请求数据、获取数据 提交数据 ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:6:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"爬虫示例 使用第三方模块的步骤： 新建一个文件夹（非中文且不能与模块名相同） npm init -y 进行初始化 下载模块 可以到npm官网搜索 使用模块 参照模块说明文档 爬取丁香园的body数据 const fs = require(\"fs\"); var Crawler = require(\"crawler\"); var c = new Crawler({ maxConnections: 10, callback: function (err, res, done) { if (err) { console.log(err); } else { var $ = res.$; fs.writeFile(\"./temp/1.txt\", $(\"body\").text(), (err) =\u003e { if (err == null) { console.log(\"成功\"); } }); } done(); }, }); c.queue(\"https://ncov.dxy.cn/ncovh5/view/pneumonia\"); 爬取一张图片 var Crawler = require(\"crawler\"); var fs = require(\"fs\"); var c = new Crawler({ encoding: null, jQuery: false, // set false to suppress warning message. callback: function (err, res, done) { if (err) { console.error(err.stack); } else { fs.createWriteStream(res.options.filename).write(res.body); } done(); }, }); c.queue({ uri: \"https://ae01.alicdn.com/kf/H21b5f6b8496141a1979a33666e1074d9x.jpg\", filename: \"./temp/test.jpg\", }); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:7:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"npm命令的使用 安装当前目录下的项目所需要的所有依赖包npm install 如果下载过程中卡住，可以使用npm cache clean -f清除缓存 使用淘宝镜像 参考地址：https://developer.aliyun.com/mirror/NPM?from=tnpm ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:8:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"pakeage与pakeage-lock的区别 使用npm5之前的版本，是不会生成package-lock.json这个文件的。 npm5以后，包括npm5这个版本，才会生成package-lock.json文件 当使用npm安装包的时候，npm都会生成或書更新package-lock.json文件 npm5以后的版本，在安装包的时候，不需要加--save(s)参数，也会自动在package.json中保存依项 当安装包的时候，会自动创建或更新package-jock.json文件 package-lock.json文件内保存了node_modules：中所有包的信息，包含这些包的名称、版本号、下地址。带来好处是，如果重新npm install的时候，就无逐个分析包的依赖项，因比会大大加快安装速度 从package-lock.json文件名来看，Iock代表的是\"锁定\"的意思。它用来物定当前开发使用的版本号，防止npm install的时侯自动更新到了更新版本。因为新版本有可能会更新老的API,导数之前的代码出错 原来的package.json文件只能定大版本，也就是版本号的第一位，并不能定后面的小版本，你每次npm install都是拉取的该大版本下的最新的版本，为了稳定性考虑我们几手是不敢随意升级依包的，这将导数多出来很多工作量，测试/适配等，所以package-lock.json文件出来了，当你每次安装一个依赖的候就定在你安装的这个版本。 ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:8:1","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"使用express模块 GET与POST传参： GET传参–接收参数 只需要在请求体内直接通过request.query即可取到传参对象 POST参数–接收参数 需要导入body-parser模块，首先对url进行转码，然后在请求体内可以通过request.body获取传参对象 ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:9:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"创建一个简单的服务器 const express = require(\"express\"); // 创建服务器 const app = express(); // 创建路由 app.get(\"/\", (req, res) =\u003e { // 注意 使用express模块创建服务器，使用send作为相应 res.send(\"Hello World!你好啊\"); }); // 监听接口 app.listen(3000, () =\u003e { console.log(`Server running at http://127.0.0.1:3000`); }); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:9:1","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"创建一个静态资源服务器 创建静态资源可以设置静态目录app.use(express.static(\"PATH\")); const express = require(\"express\"); // 创建服务器 const app = express(); // 设置静态目录 app.use(express.static(\"static\")); // 创建路由 app.get(\"/\", (req, res) =\u003e { // 注意 使用express模块创建服务器，使用send作为相应 res.send(\"Hello World!你好啊\"); }); // 监听接口 app.listen(3000, () =\u003e { console.log(`Server running at http://127.0.0.1:3000`); }); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:9:2","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"实现一个简单的get接口 const express = require(\"express\"); const app = express(); /** * 得到随机笑话 * @date 2020-07-03 * @param {string} \"/joke\" 请求地址 * @param {function} (req,res) 请求与相应 */ app.get(\"/joke\", (req, res) =\u003e { let arr = [\"第一个笑话\", \"第二个笑话\", \"第三个笑话\"]; let index = Math.floor(Math.random() * 3); res.send(arr[index]); }); app.listen(3000); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:10:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"返回JSON 返回json直接返回一个对象即可。 const express = require(\"express\"); const app = express(); app.get(\"/food\", (req, res) =\u003e { let arr = [\"第一个笑话\", \"第二个笑话\", \"第三个笑话\"]; let index = Math.floor(Math.random() * 3); res.send({ foodName: arr[index], price: 100, desc: \"这是一个描述\", }); }); app.listen(3000); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:11:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"实现一个带有参数的GET接口 通过req.query可以获取传输的参数对象，然后取到具体的内容。 const express = require(\"express\"); const app = express(); app.get(\"/getNickName\", (req, res) =\u003e { // 接收参数 let heroName = req.query.heroName; console.log(heroName); let heroNickName = \"\"; let hero = { 提莫: \"迅捷斥候\", 李青: \"盲僧\", 盖伦: \"德玛西亚之力\", 亚索: \"疾风剑豪\", }; if (hero[heroName] != undefined) { heroNickName = hero[heroName]; } else { heroNickName = \"暂无这个英雄的资料\"; } res.send(heroNickName); }); app.listen(3000); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:12:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"实现简单的POST接口 const express = require(\"express\"); const app = express(); // 只需要将方式改为post即可 app.post(\"/sb\", (req, res) =\u003e { res.send(\"sb\"); }); app.listen(3000); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:13:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"带参数的POST接口 在post请求中，无法使用req.query拿到请求的数据。所以拿到数据需要使用第三方模块body-parser模块。 将请求体解析 app.use(bodyParser.urlencoded({ exrtended: false })); 通过req.body拿到请求的数据 const express = require(\"express\"); const bodyParser = require(\"body-parser\"); const app = express(); // 将请求体的数据解析 app.use(bodyParser.urlencoded({ exrtended: false })); app.post(\"/login\", (req, res) =\u003e { console.log(req.body); if (req.body.name == \"123\" \u0026\u0026 req.body.passwd == \"123\") { res.send(\"登录成功\"); } else { res.send(\"登录失败\"); } }); app.listen(3000); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:14:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"返回是json格式字符串的接口 使用express模块返回字符串默认为text/html格式，设置响应头后即可返回json格式的字符串。 const express = require(\"express\"); const app = express(); app.get(\"/getFood\", (req, res) =\u003e { res.setHeader(\"Content-Type\", \"text/json\"); res.send( `foodName:\"红烧肉\", price:100` ); }); app.listen(3000, () =\u003e { console.log(\"服务器已开启\"); }); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:15:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"POST传文件参数 post接收文件参数需要使用multer模块，然后将传过来的文件放在此模块创建的文件夹下。 请求第二个可选参数为接收文件的键值。通过req.file获取文件信息，通过req.body获取一同传输的文本信息。 const express = require(\"express\"); const multer = require(\"multer\"); const app = express(); // 创建一个uploads文件夹 var upload = multer({ dest: \"uploads/\" }); app.post(\"/register\", upload.single(\"usericon\"), (req, res) =\u003e { // 传过来的文件，参数名用usericon // 一起传过来的文本信息保存在req.body中 console.log(req.file); console.log(req.body); res.send(\"sb\"); }); app.listen(3000); ","date":"2020-07-03","objectID":"/posts/notes/20200703/20200703-1/:16:0","tags":["Node"],"title":"四、node服务器搭建","uri":"/posts/notes/20200703/20200703-1/"},{"categories":["notes"],"content":"内置模块的基本使用(删除文件) const fs = require(\"fs\"); /** * 删除文件 * @param {string} \"./temp/test.txt\" 被删除文件的路径 * @param {function} (err) 回调函数，将错误信息传入其中 */ fs.unlink(\"./temp/test.txt\", (err) =\u003e { if (err) throw err; console.log(\"已成功删除 test\"); }); ","date":"2020-07-02","objectID":"/posts/notes/20200702/20200702-1/:1:0","tags":["Node"],"title":"三、NodeJs模块化","uri":"/posts/notes/20200702/20200702-1/"},{"categories":["notes"],"content":"fs模块读文件 const fs = require(\"fs\"); /** * 读取文件信息 * @date 2020-07-01 * @param {sting} \"./temp/t.txt\" 文件路径 * @param {sting} \"utf-8\" 指定字符编码 * @param {function} (err,data) 回调函数传入错误信息与读到的数据 */ fs.readFile(\"./temp/t.txt\", \"utf-8\", (err, data) =\u003e { if (err) throw err; console.log(data); }); ","date":"2020-07-02","objectID":"/posts/notes/20200702/20200702-1/:2:0","tags":["Node"],"title":"三、NodeJs模块化","uri":"/posts/notes/20200702/20200702-1/"},{"categories":["notes"],"content":"fs模块写文件 如果没有文件夹那么会抛出错误，但是没有文件则会自动创建文件。如果已经存在，则会覆盖。 const fs = require(\"fs\"); const data1 = ` 这是一个测试 `; /** * 写文件 * @param {any} \"./temp/1.txt\" 待写入文件的路径 * @param {any} data 待写入的数据 * @param {function} err 回调函数传入错误类型 */ fs.writeFile(\"./temp/1.txt\", data1, (err) =\u003e { if (err) throw err; console.log(\"文件已保存\"); }); ","date":"2020-07-02","objectID":"/posts/notes/20200702/20200702-1/:3:0","tags":["Node"],"title":"三、NodeJs模块化","uri":"/posts/notes/20200702/20200702-1/"},{"categories":["notes"],"content":"同步异步 同步 所谓同步也就是按顺序执行 异步 同时执行，谁先做完谁输出。不会造成阻塞。 面试题-1 var t = true; windows.setTimeout(function () { t = false; }, 1000); while (t) {} console.log(\"end\"); 以上代码会无限循环，因为定时器是异步执行。则先进入循环，一旦进入，那么就会发生无限循环。 面试题-2 var t = true; while (t) { windows.setTimeout(function () { t = false; }, 1000); } console.log(\"end\"); 以上代码还是会死循环。计时器虽然已经声明了，但计时器的回调函数无法被执行。 ","date":"2020-07-02","objectID":"/posts/notes/20200702/20200702-1/:4:0","tags":["Node"],"title":"三、NodeJs模块化","uri":"/posts/notes/20200702/20200702-1/"},{"categories":["notes"],"content":"相对路径的问题 ","date":"2020-07-02","objectID":"/posts/notes/20200702/20200702-1/:5:0","tags":["Node"],"title":"三、NodeJs模块化","uri":"/posts/notes/20200702/20200702-1/"},{"categories":["notes"],"content":"路径问题 NodeJs中的相对路径是相对于执行js文件的终端工具路径而言。 const fs = require(\"fs\"); fs.readFile(\"./temp/1.txt\", \"utf-8\", (err, data) =\u003e { if (err == null) { console.log(data); } else { console.log(err); } }); ","date":"2020-07-02","objectID":"/posts/notes/20200702/20200702-1/:5:1","tags":["Node"],"title":"三、NodeJs模块化","uri":"/posts/notes/20200702/20200702-1/"},{"categories":["notes"],"content":"和路径相关的变量 获取当前文件所在目录 __dirname 获取当前文件的绝对路径 __filename 以上两个变量不需要定义即可使用。 console.log(__dirname); // d:\\coder\\studyCode\\project\\2020\\07\\02 console.log(__filename); // d:\\coder\\studyCode\\project\\2020\\07\\02\\06-路径相关的变量.js 因此要读取的文件可以使用此变量进行拼接。 const fs = require(\"fs\"); console.log(__dirname); console.log(__filename); fs.readFile(__dirname + \"/temp/1.txt\", \"utf-8\", (err, data) =\u003e { if (err == null) { console.log(data); } else { console.log(err); } }); ","date":"2020-07-02","objectID":"/posts/notes/20200702/20200702-1/:5:2","tags":["Node"],"title":"三、NodeJs模块化","uri":"/posts/notes/20200702/20200702-1/"},{"categories":["notes"],"content":"path模块 为了避免出现少写斜杠（\\）的错误出现。 join路径拼接方法 path.join()方法使用平台特定的分隔符作为定界符将所有给定的 path 片段连接在一起，然后规范化生成的路径。 const path = require(\"path\"); const fs = require(\"fs\"); const fullPath = path.join(__dirname, \"temp\", \"1.txt\"); console.log(fullPath); fs.readFile(fullPath, \"utf-8\", (err, data) =\u003e { if (err == null) { console.log(data); } else { console.log(err); } }); ","date":"2020-07-02","objectID":"/posts/notes/20200702/20200702-1/:6:0","tags":["Node"],"title":"三、NodeJs模块化","uri":"/posts/notes/20200702/20200702-1/"},{"categories":["notes"],"content":"http模块 创建一个简单的本地服务器 const http = require(\"http\"); // 创建服务器 // 返回值代表服务器 const server = http.createServer((request, response) =\u003e { response.end(\"Hello World\"); }); // 开启服务器 server.listen(8080, () =\u003e { console.log(\"服务器已经开启：8080\"); }); 中文乱码问题 解决中文乱码须在响应头设置Content-Type const http = require(\"http\"); // 创建服务器 // 返回值代表服务器 const server = http.createServer((request, response) =\u003e { // 设置响应头，防止中文乱码 response.setHeader(\"Content-Type\", \"text/html;charset=utf-8\"); response.end(\"你好，世界\"); }); // 开启服务器 server.listen(8080, () =\u003e { console.log(\"服务器已经开启：8080\"); }); ","date":"2020-07-02","objectID":"/posts/notes/20200702/20200702-1/:7:0","tags":["Node"],"title":"三、NodeJs模块化","uri":"/posts/notes/20200702/20200702-1/"},{"categories":["notes"],"content":"nodemon工具 此工具作用为自动监视文件的修改，自动重新运行。 安装 npm install nodemon -g 使用 nodemon 文件名 ","date":"2020-07-02","objectID":"/posts/notes/20200702/20200702-1/:8:0","tags":["Node"],"title":"三、NodeJs模块化","uri":"/posts/notes/20200702/20200702-1/"},{"categories":["notes"],"content":"let关键字 特点 var关键字 let关键字 变量提升 √ × 作用域 没有块级作用域，是函数作用域 有块级作用域 重复声明 √ × 重新赋值 √ √ 变量提升 console.log(age); let age = 38; 作用域 for (var i = 0; i \u003c 10; i++) {} console.log(i); for (let n = 0; i \u003c 10; i++) {} console.log(n); 图中可对比看出，如果用var声明，在循环外部还是可以使用i变量；但用let声明变量，循环外部不可以使用n变量 不可重复声明 let num2 = 10; let num2 = 20; console.log(\"num2: \", num2); 重新赋值 let num2 = 10; num2 = 20; console.log(\"num2: \", num2); ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:1:0","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"const关键字 使用场景 一些不会变化的值，比如圆周率PI 大事件项目中，保存基地址 没有变量提升 有块级作用域 不能重复声明 不能重新赋值（声明必须要初始化） ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:2:0","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"解构赋值 ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:3:0","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"对象解构 取对象中属性的值，赋值给变量。 例如对于如下对象来说，在ES5与ES6中将对象赋值于变量的方式 let obj = { name: \"波波\", age: 38, gender: \"男\", score: 88, }; ES5中的写法 let name1 = obj.name; let age1 = obj.age; let gender1 = obj.gender; let score1 = obj.score; console.log(name1, age1, gender1, score1); ES6中的写法 定义变量名 let { name: name2, age: age2, gender: gender2, score: score2 } = obj; console.log(name2, age2, gender2, score2); 变量名可与属性名一致 let { name: name, age: age, gender: gender, score: score } = obj; console.log(name, age, gender, score); 当变量名与属性名一致时，可以省略变量名 let { name, age, gender, score } = obj; console.log(name, age, gender, score); 以上代码的输出结果都为下图所示 当简写时，对象中没有的属性会赋值为undefined \r let obj = { name: \"波波\", age: 38, gender: \"男\", score: 88, }; let { name, age, gender, fenshu } = obj; console.log(name, age, gender, fenshu); 简写与全写可以一起用 \r let { name, age, gender, score: fenshu } = obj; console.log(name, age, gender, fenshu); 设置默认值。当对象中没有此属性时会赋值为默认值而不是undefined。如果对象中存在这个属性，那么将赋值为对象中的属性，而不是默认值。 \r let { name, age, gender, score: fenshu, height = 180 } = obj; console.log(name, age, gender, fenshu, height); 赋值一个除了某个属性不存在，但存在其余属性的对象 \r let obj = { name: \"波波\", age: 38, gender: \"男\", score: 100, }; // obj2相当于是obj对象里面除了name属性之外的属性组成的一个对象 let { name, ...obj2 } = obj; console.log(obj2); // { age: 38, gender: '男', score: 100 } ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:3:1","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"数组解构 把数组中每一个元素的值依次的赋值给变量。声明如下数组： // 声明一个数组 let arr = [10, 20, 30, 40]; ES5中的写法 let num1 = arr[0]; let num2 = arr[1]; let num3 = arr[2]; let num4 = arr[3]; console.log(num1, num2, num3, num4); ES6中的写法 基础写法–一一对应 let [num1, num2, num3, num4] = arr; console.log(num1, num2, num3, num4); 默认值与没有值时与对象解构一致。 let [num1, num2, num3, num4, num5] = arr; console.log(num1, num2, num3, num4, num5); // num5为undefined let [num1, num2, num3, num4, num5=5] = arr; console.log(num1, num2, num3, num4, num5); // num5为5 ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:3:2","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"解构赋值结合函数声明 ES5中的写法 function test1(obj) { console.log(obj.name, obj.age, obj.gender); } test1({ name: \"波波\", age: 38, gender: \"男\", }); ES6中的写法 function test2({ name, age, gender, height = 180 }) { console.log(name, age, gender, height); } test2({ name: \"波波\", age: 38, gender: \"男\", }); test2({ name: \"波波\", age: 38, gender: \"男\", height: 160, }); ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:3:3","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"箭头函数 简单来说，箭头函数就是匿名函数的一个简写。 // 1. 普通的匿名函数 let fn = function (name) { console.log(\"my name is \", name); }; fn(\"波波\"); // 2. 箭头函数 let fn1 = (name) =\u003e console.log(\"my name is \", name); fn1(\"波波\"); 简写规则： function改成=\u003e，=\u003e可以读成goes to 如果只有一个形参，那就可以省略形参小括号 如果不是一个形参（0个或多个），那就不能省略形参小括号 如果函数体只有一句话，那就可以省略函数体的大括号 如果函数体只有一句话，并且这一句话是return返回值，那return也要省略 let fn1 = function (name) { return name + \"你好吗?\"; }; let fn1 = (name) =\u003e name + \"你好吗?\"; 如果函数体不是一句话，那就不能省略这个大括号 let fn2 = function (num1, num2) { console.log(num1 + num2); return num1 + num2 + 30; }; let fn2 = (num1, num2) =\u003e { console.log(num1 + num2); return num1 + num2 + 30; }; 无参数，一句话 let fn1 = function () { console.log(\"你好吗\"); }; let f1 = () =\u003e console.log(\"你好吗\"); 一个参数，一句话 let fn2 = function (name) { console.log(name + \"你好吗\"); }; let fn2 = (name) =\u003e console.log(name + \"你好吗\"); 两个参数，一句话 let fn3 = function (name, age) { console.log(name + \"你好吗,你的年龄是\" + age); }; let fn3 = (name, age) =\u003e console.log(name + \"你好吗,你的年龄是\" + age); 一个参数，一个return let fn4 = function (age) { return age + 10; }; let fn4 = (age) =\u003e age + 10; 两个参数，多句 let fn5 = function (name, age) { console.log(name + \"你好吗\"); return age + 10; }; let fn5 = (name, age) =\u003e { console.log(name + \"你好吗\"); return age + 10; }; ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:4:0","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"this指向 箭头函数的this由上下文环境决定，其原理就是将箭头函数的上下文this保存，在箭头函数内部使用这个被保存的this。使用注意： 不是什么时候都使用箭头函数 不要用new关键字调用箭头函数 var Fn = (name, age) =\u003e { this.name = name this.age = age } var obj = new Fn('伦哥', 10) // Fn is not a constructor 箭头函数的this是由上下文环境决定，而不是new关键字来决定 var obj = { name: '波波', sayHi: function () { console.log('我的名字是：', this.name) // 我的名字是： 波波 // 上文环境 setTimeout(() =\u003e { console.log('我的名字是：', this.name) // 我的名字是： 波波 }, 2000) // 下文环境 } } obj.sayHi() 当多层箭头函数套用时，那么里面的this指向都与最外层的this指向一致。 \r var obj = { name: '波波', sayHi: function () { console.log('我的名字是1：', this.name) // 上文环境 setTimeout(() =\u003e { console.log('我的名字是2：', this.name) setTimeout(() =\u003e { console.log('我的名字是3：', this.name) setTimeout(() =\u003e { console.log('我的名字是4：', this.name) }, 1000) }, 1000) }, 1000) // 下文环境 } } obj.sayHi() ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:4:1","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"对象成员简写 let name = \"千里\"; let age = 18; let gender = \"man\"; let score = 10; // es6 let obj = { name, age, gender, score, sayHi() { console.log(\"哈哈\"); }, }; console.log(obj); obj.sayHi(); 在这种写法中，如果传入一个没有赋值的变量，那么就会报错。例如： let name = \"千里\"; let age = 18; let gender = \"man\"; let score = 10; // es6 let obj = { name, age, gender, score, // fenshu, // 会发生报错，因为外部没有此变量，可以修改为下面的写法 fenshu:score, sayHi() { console.log(\"哈哈\"); }, }; console.log(obj); obj.sayHi(); ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:5:0","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"扩展（展开）运算符 ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:6:0","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"对象展开 // 声明一个对象 let chinese = { skin: \"yellow\", hair: \"black\", sayHi() { console.log(\"Are you eat?\"); }, }; let CXK = { slill: \"jump sing rap and play basketball\", song: \"啊哈哈哈\", }; let linge = { // skin: \"yellow\", // hair: \"black\", // sayHi() { // console.log(\"Are you eat?\"); // }, // slill: \"jump sing rap and play basketball\", // song: \"啊哈哈哈\", // 展开语法 等同于上方写法 ...chinese, ...CXK, }; console.log(linge); 当新增属性时，直接添加即可。如果重新定义已经存在的，那么覆盖原来的。 \r let linge = { ...chinese, ...CXK, gender: \"Man\", hair: \"白发苍苍\", }; ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:6:1","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"数组展开 与对象展开类似。 let arr1 = [10, 20, 30]; let arr2 = [40, 50, 60]; let arr3 = [...arr1, ...arr2, 70]; console.log(arr3); 使用场景： 数组的拼接 求最大/小值 let arr1 = [10, 23, 54, 446, 56, 2]; let max = Math.max(...arr1); console.log(max); ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:6:2","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"数据类型set 作用和数组类型，和数组不同的是set不能存放重复的元素。 基本使用 let set1 = new Set([10, 20, 30, 40, 10, 20, 30, 40, 50]); console.log(set1); 数组去重 let arr = [10, 20, 30, 10, 20, 30, 20, 10, 33, 200]; let set = new Set(arr); let arrNew = [...set]; console.log(arrNew); 也可以改写为如下： let arr = [10, 20, 30, 10, 20, 30, 20, 10, 33, 200]; let arrNew = [...new Set(arr)]; console.log(arrNew); ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:7:0","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"模板字符串 模板字符串会保留原样字符串格式，以及可以占位。其语法为反引号`` let author = \"波波\"; let str1 = ` 静夜思 ${author}哈哈哈 `; console.log(str1); let name = \"xiaokang\"; let age = 12; function test() { return \"test\"; } console.log(`my name is ${name}and age is ${age}. ${test()}`); ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:8:0","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"补充数组的方法 forEach 无返回值 let arr = [10, 20, 30, 40]; arr.forEach(function (item, index) { // item 遍历出的每一项 // index 遍历出来的每一项对应的索引 console.log(item, index); }); map 有返回值。 let arr = [10, 20, 30, 40]; let arrNew = arr.map(function (item, index) { // item 遍历出的每一项 // index 遍历出来的每一项对应的索引 // console.log(item, index); return item * item; }); console.log(arrNew); filter let arr = [10, 20, 11, 21, 30, 31, 23, 43]; let arrNew = arr.filter((item, index) =\u003e { console.log(item, index); // 如果条件成立,返回当前项 return item % 2 == 0; }); console.log(arrNew); //[ 10, 20, 30 ] 数组的其他应用 数组降维 将二维数组降维为一维数组 // 将二维数组将为一维数组 var arr = [[10, 20], [30, 40, 50], [60, 79, 80]] var arrNew = [] arr.forEach(v =\u003e { arrNew.push(...v) }) console.log(arrNew); // [10, 20, 30, 40, 50, 60, 79, 80] 数组的去重（排序法） var arr = [10, 20, 30, 23, 4, 512, 20, 10]; var arrNew = []; arr.sort((a, b) =\u003e { return a - b; }); console.log(arr); // [4, 10, 10, 20, 20, 23, 30, 512]; arr.forEach((v, i) =\u003e { if (v != arr[i + 1]) { arrNew.push(v); } }); console.log(arrNew); // [ 4, 10, 20, 23, 30, 512 ] 数组去重（对象法） 原理：利用对象属性不能同名。 // 使用对象法 var obj = {}; var arrNew = []; // 遍历要去重的数组 arrNew.forEach((v) =\u003e { if (obj[v] == undefined) { arrNew.push(v); // 不存在九江这个v存起来 obj[v] = 1; // 随意写，作为属性的值（避免undefined） } }); 数组升维 假设从后端拿到的数据为如下格式： var arr = [ { type: \"电子产品\", name: \"iPhone\", price: 8888 }, { type: \"家具\", name: \"桌子\", price: 100 }, { type: \"食品\", name: \"瓜子\", price: 10 }, { type: \"家具\", name: \"椅子\", price: 380 }, { type: \"电子产品\", name: \"小米手机\", price: 1380 }, { type: \"食品\", name: \"辣条\", price: 5 }, { type: \"食品\", name: \"咖啡\", price: 50 }, ]; 第一种： var obj = {}; //将测type有没有重复的 var arrNew = []; // 升级后的二维数组 // 1. 将type去重，找出所有的产品类型 // 遍历这个arr一维数组 arr.forEach((v) =\u003e { if (obj[v.type] == undefined) { obj[v.type] = 1; // 把这个数组放到arrNew中 arrNew.push({ type: v.type, data: [v], }); } else { // 判断当前v输入arrNew中的哪一类 arrNew.forEach((v2, j) =\u003e { if (v.type == v2.type) { arrNew[j].data.push(v); } }); } }); console.log(arrNew); 第二种： var obj = {}; //将测type有没有重复的 var arrNew = []; // 升级后的二维数组 var index = 0; // 用于记录索引 arr.forEach((v) =\u003e { if (obj[v.type] == undefined) { obj[v.type] = index++; // 把这个数组放到arrNew中 arrNew.push({ type: v.type, data: [v], }); } else { var _index = obj[v.type]; arrNew[_index].data.push(v); } }); console.log(arrNew); ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:9:0","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"babel将ES6代码转为ES5 https://www.babeljs.cn/ ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-2/:10:0","tags":["ES6"],"title":"二、ES6新语法","uri":"/posts/notes/20200701/20200701-2/"},{"categories":["notes"],"content":"什么是NodeJs NodeJs是一个基于谷歌V8引擎的运行环境。(服务器上的v8引擎就是node.js) 其作用是让js拥有开发服务端的功能 ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-1/:1:0","tags":["Node"],"title":"一、Node.js入门","uri":"/posts/notes/20200701/20200701-1/"},{"categories":["notes"],"content":"环境安装 官方地址：https://nodejs.org/zh-cn/ 安装完成后，添加环境变量。命令行终端输入node -v即可输出版本号。 同样的，安装完NodeJs之后会自动安装npm（node package manager）。输入npm -v也会出现版本号。 npm可以到NPM去寻找包，类似GitHub。 ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-1/:2:0","tags":["Node"],"title":"一、Node.js入门","uri":"/posts/notes/20200701/20200701-1/"},{"categories":["notes"],"content":"运行NodeJs VSCode中使用RunCoder插件 终端 注意路径问题，执行命令为node 文件名 VSCode中的终端同理。 双击node.exe，在其内编写代码 ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-1/:3:0","tags":["Node"],"title":"一、Node.js入门","uri":"/posts/notes/20200701/20200701-1/"},{"categories":["notes"],"content":"服务器端与浏览器端 服务端的JavaScript只有ECMAScript，也就意味着在NodeJs ","date":"2020-07-01","objectID":"/posts/notes/20200701/20200701-1/:4:0","tags":["Node"],"title":"一、Node.js入门","uri":"/posts/notes/20200701/20200701-1/"},{"categories":["notes"],"content":"on方法 // 事件操作相关方法 kjQuery.prototype.extend({ on: function (name, callBack) { this.each(function (key, ele) { // 2. 判断当前元素中是否有保存所有事件的对象 if (!ele.eventsCache) { ele.eventsCache = {}; } // 3. 判断对象中有没有对应类型的数组 if (!ele.eventsCache[name]) { ele.eventsCache[name] = []; // 4. 将回调函数添加到数组中 ele.eventsCache[name].push(callBack); // 5. 添加对应类型的事件 kjQuery.addEvent(ele, name, function () { kjQuery.each(ele.eventsCache[name], function (k, method) { method(); }); }); } else { ele.eventsCache[name].push(callBack); } }); }, }); 将事件名称作为一个对象的键来存储，具体事件放到该键对应的数组中。 ","date":"2020-06-24","objectID":"/posts/notes/20200624/20200615-2/:1:0","tags":["jQuery"],"title":"jQuery原理（事件操作相关方法）","uri":"/posts/notes/20200624/20200615-2/"},{"categories":["notes"],"content":"off方法 off: function (name, callBack) { // 1. 判断是否传入参数 if (arguments.length == 0) { this.each(function (key, ele) { ele.eventsCache = {}; }); } else if (arguments == 1) { this.each(function (key, ele) { ele.eventsCache[name] = []; }); } else if (arguments.length == 2) { this.each(function (key, ele) { kjQuery.each(ele.eventsCache[name], function (index, method) { if (method === callBack) { ele.eventsCache[name].splice(index, 1); } }); }); } }, ","date":"2020-06-24","objectID":"/posts/notes/20200624/20200615-2/:2:0","tags":["jQuery"],"title":"jQuery原理（事件操作相关方法）","uri":"/posts/notes/20200624/20200615-2/"},{"categories":["notes"],"content":"attr方法 设置或者获取元素的属性节点值 //属性操作相关的方法 kjQuery.prototype.extend({ attr: function (attr, value) { // 1. 判断是否是字符串 if (kjQuery.isString(attr)) { if (arguments.length == 1) { return this[0].getAttribute(attr); } else { this.each(function (key, ele) { ele.setAttribute(attr, value); }); } } // 2. 判断是否是对象 else if (kjQuery.isObject(attr)) { var $this = this; // 遍历取出所有属性节点的名称和对应值 $.each(attr, function (key, value) { // 遍历取出所有的元素 $this.each(function (k, ele) { ele.setAttribute(key, value); }); }); } return this; }, }); ","date":"2020-06-24","objectID":"/posts/notes/20200624/20200615-1/:1:0","tags":["jQuery"],"title":"jQuery原理（属性操作相关方法）","uri":"/posts/notes/20200624/20200615-1/"},{"categories":["notes"],"content":"prop方法 设置或者获取元素的属性值 prop: function () { // 1. 判断是否是字符串 if (kjQuery.isString(attr)) { if (arguments.length == 1) { return this[0][attr]; } else { this.each(function (key, ele) { ele[attr] = value; }); } } // 2. 判断是否是对象 else if (kjQuery.isObject(attr)) { var $this = this; // 遍历取出所有属性节点的名称和对应值 $.each(attr, function (key, value) { // 遍历取出所有的元素 $this.each(function (k, ele) { ele[key] = value; }); }); } return this; }, 与attr方法相似。 ","date":"2020-06-24","objectID":"/posts/notes/20200624/20200615-1/:2:0","tags":["jQuery"],"title":"jQuery原理（属性操作相关方法）","uri":"/posts/notes/20200624/20200615-1/"},{"categories":["notes"],"content":"css方法 设置获取样式 css: function (attr, value) { // 1. 判断是否是字符串 if (kjQuery.isString(attr)) { if (arguments.length == 1) { return kjQuery.getStyle(this[0], attr); } else { this.each(function (key, ele) { ele.style[attr] = value; }); } } // 2. 判断是否是对象 else if (kjQuery.isObject(attr)) { var $this = this; // 遍历取出所有属性节点的名称和对应值 $.each(attr, function (key, value) { // 遍历取出所有的元素 $this.each(function (k, ele) { ele.style[key] = value; }); }); } return this; }, ","date":"2020-06-24","objectID":"/posts/notes/20200624/20200615-1/:3:0","tags":["jQuery"],"title":"jQuery原理（属性操作相关方法）","uri":"/posts/notes/20200624/20200615-1/"},{"categories":["notes"],"content":"val方法 val: function (content) { if (arguments.length == 0) { return this[0].value; } else { this.each(function (key, ele) { ele.value = content; }); return this; } }, ","date":"2020-06-24","objectID":"/posts/notes/20200624/20200615-1/:4:0","tags":["jQuery"],"title":"jQuery原理（属性操作相关方法）","uri":"/posts/notes/20200624/20200615-1/"},{"categories":["notes"],"content":"addClass方法 给元素添加一个或多个指定的类 addClass: function (name) { if (arguments.length == 0) { return this; } else { // 1. 对传入的类名进行切割 var names = name.split(\" \"); // 2. 遍历取出所有的元素 this.each(function (key, ele) { // 遍历数组取出每一个类名 $.each(names, function (k, value) { // 判断指定元素中是否包含指定的类名 if (!$(ele).hasClass(value)) { ele.className = ele.className + \" \" + value; } }); }); return this; } }, ","date":"2020-06-24","objectID":"/posts/notes/20200624/20200615-1/:5:0","tags":["jQuery"],"title":"jQuery原理（属性操作相关方法）","uri":"/posts/notes/20200624/20200615-1/"},{"categories":["notes"],"content":"removeClass方法 删除元素中一个或多个指定的类 removeClass: function (name) { if (arguments.length == 0) { this.each(function (key, ele) { ele.className = \"\"; }); } else { // 1. 对传入的类名进行切割 var names = name.split(\" \"); // 2. 遍历取出所有的元素 this.each(function (key, ele) { // 遍历数组取出每一个类名 $.each(names, function (k, value) { // 判断指定元素中是否包含指定的类名 if ($(ele).hasClass(value)) { ele.className = (\" \" + ele.className + \" \").replace( \" \" + value + \" \", \"\" ); } }); }); } return this; }, ","date":"2020-06-24","objectID":"/posts/notes/20200624/20200615-1/:6:0","tags":["jQuery"],"title":"jQuery原理（属性操作相关方法）","uri":"/posts/notes/20200624/20200615-1/"},{"categories":["notes"],"content":"toggleClass方法 没有则添加,有则删除 toggleClass: function (name) { if (arguments.length == 0) { this.removeClass(); } else { // 1. 对传入的类名进行切割 var names = name.split(\" \"); // 2. 遍历取出所有的元素 this.each(function (key, ele) { // 遍历数组取出每一个类名 $.each(names, function (k, value) { // 判断指定元素中是否包含指定的类名 if ($(ele).hasClass(value)) { // 删除 $(ele).removeClass(value); } else { // 添加 $(ele).addClass(value); } }); }); } return this; }, ","date":"2020-06-24","objectID":"/posts/notes/20200624/20200615-1/:7:0","tags":["jQuery"],"title":"jQuery原理（属性操作相关方法）","uri":"/posts/notes/20200624/20200615-1/"},{"categories":["notes"],"content":"empty方法 清空指定元素中的所有内容。也就是遍历内容，然后将其innerHTML清空。 kjQuery.prototype.extend({ empty: function () { // 遍历所有找到的元素 this.each(function (k, v) { v.innerHTML = ''; }); // 返回this对象为了方便链式编程 return this; }, }) ","date":"2020-06-23","objectID":"/posts/notes/20200623/:1:0","tags":null,"title":"jQuery原理（DOM操作相关方法）","uri":"/posts/notes/20200623/"},{"categories":["notes"],"content":"remove方法 删除所有的元素或指定元素。判断是否传入参数，如果传入参数，则删除指定元素，否则删除全部。 JavaScript元素不能自己删除自己，只能通过上级元素删除。 remove: function (sele) { if (arguments.length === 0) { // 遍历指定的元素 this.each(function (k, v) { // 根据遍历到的元素找到父元素 var parent = v.parentNode; // 通过父元素删除指定元素 parent.removeChild(v); }); } else { var $this = this; // 根据传入的选择器 找到对应的元素 $(sele).each(function (key, value) { var type = value.tagName; $this.each(function (k, v) { var t = v.tagName; if (t === type) { // 根据遍历到的元素找到父元素 var parent = value.parentNode; // 通过父元素删除指定元素 parent.removeChild(value); } }); }); } return this; }, ","date":"2020-06-23","objectID":"/posts/notes/20200623/:2:0","tags":null,"title":"jQuery原理（DOM操作相关方法）","uri":"/posts/notes/20200623/"},{"categories":["notes"],"content":"html方法 设置所有元素的内容，获取第一个元素的内容 html: function (content) { if (arguments.length === 0) { return this[0].innerHTML; } else { this.each(function (k, v) { v.innerHTML = content; }); } }, ","date":"2020-06-23","objectID":"/posts/notes/20200623/:3:0","tags":null,"title":"jQuery原理（DOM操作相关方法）","uri":"/posts/notes/20200623/"},{"categories":["notes"],"content":"text方法 设置所有元素的文本内容，获取所有元素的文本 text: function (content) { if (arguments.length === 0) { var res = \"\"; this.each(function (k, v) { res += v.innerText; }); return res; } else { this.each(function (k, v) { v.innerText = content; }); } }, ","date":"2020-06-23","objectID":"/posts/notes/20200623/:4:0","tags":null,"title":"jQuery原理（DOM操作相关方法）","uri":"/posts/notes/20200623/"},{"categories":["notes"],"content":"appendTo方法 将元素添加到指定元素内部的最后 如果指定元素有多个,会将元素拷贝多份添加到指定元素中 给appendTo方法传递字符串, 会根据字符串找到所有对应元素后再添加 给appendTo方法传递jQuery对象,会将元素添加到jQuery对象保存的所有指定元素中 给appendTo方法传递DOM元素, 会将元素添加到所有指定DOM元素中 appendTo: function (sele) { // 1. 统一的将传入的数据传递给核心函数 var $target = $(sele); var $this = this; var res = []; // 2. 遍历取出所有指定元素 $.each($target, function (key, value) { // 遍历取出所有的元素 $this.each(function (k, v) { if (key == 0) { // 直接添加 value.appendChild(v); res.push(v); } else { var temp = v.cloneNode(true); value.appendChild(temp); res.push(v); } }); }); return $(res); }, ","date":"2020-06-23","objectID":"/posts/notes/20200623/:5:0","tags":null,"title":"jQuery原理（DOM操作相关方法）","uri":"/posts/notes/20200623/"},{"categories":["notes"],"content":"prependTo方法 将元素添加到指定元素内部的最前面。 与appendTo方法一模一样，只不过将添加方法换成了insertBefore。 prependTo: function (sele) { // 1. 统一的将传入的数据传递给核心函数 var $target = $(sele); var $this = this; var res = []; // 2. 遍历取出所有指定元素 $.each($target, function (key, value) { // 遍历取出所有的元素 $this.each(function (k, v) { if (key == 0) { // 直接添加 value.insertBefore(v, value.firstChild); res.push(v); } else { var temp = v.cloneNode(true); value.insertBefore(temp, value.firstChild); res.push(v); } }); }); return $(res); }, ","date":"2020-06-23","objectID":"/posts/notes/20200623/:6:0","tags":null,"title":"jQuery原理（DOM操作相关方法）","uri":"/posts/notes/20200623/"},{"categories":["notes"],"content":"append 将元素添加到指定元素内部的最后 append: function (sele) { // 判断传入的参数是否是字符串 if (kjQuery.isString(sele)) { this[0].innerHTML += sele; } else { $(sele).appendTo(this); } return this; }, ","date":"2020-06-23","objectID":"/posts/notes/20200623/:7:0","tags":null,"title":"jQuery原理（DOM操作相关方法）","uri":"/posts/notes/20200623/"},{"categories":["notes"],"content":"prepend方法 将元素添加到指定元素内部的最后面 prepend: function (sele) { // 判断传入的参数是否是字符串 if (kjQuery.isString(sele)) { this[0].innerHTML = sele + this[0].innerHTML; } else { $(sele).prependTo(this); } return this; }, ","date":"2020-06-23","objectID":"/posts/notes/20200623/:8:0","tags":null,"title":"jQuery原理（DOM操作相关方法）","uri":"/posts/notes/20200623/"},{"categories":["notes"],"content":"insertBefore方法 将元素添加到指定元素外部的前面 insertBefore: function (sele) { // 1.统一的将传入的数据转换为jQuery对象 var $target = $(sele); var $this = this; var res = []; // 2.遍历取出所有指定的元素 $.each($target, function (key, value) { var parent = value.parentNode; // 2.遍历取出所有的元素 $this.each(function (k, v) { // 3.判断当前是否是第0个指定的元素 if (key === 0) { // 直接添加 parent.insertBefore(v, value); res.push(v); } else { // 先拷贝再添加 var temp = v.cloneNode(true); parent.insertBefore(temp, value); res.push(temp); } }); }); // 3.返回所有添加的元素 return $(res); }, ","date":"2020-06-23","objectID":"/posts/notes/20200623/:9:0","tags":null,"title":"jQuery原理（DOM操作相关方法）","uri":"/posts/notes/20200623/"},{"categories":["notes"],"content":"insertAfter方法 将元素添加到指定元素外部的后面 insertAfter: function (sele) { // 1.统一的将传入的数据转换为jQuery对象 var $target = $(sele); var $this = this; var res = []; // 2.遍历取出所有指定的元素 $.each($target, function (key, value) { var parent = value.parentNode; var nextNode = $.get_nextsibling(value); // 2.遍历取出所有的元素 $this.each(function (k, v) { // 3.判断当前是否是第0个指定的元素 if (key === 0) { // 直接添加 parent.insertBefore(v, nextNode); res.push(v); } else { // 先拷贝再添加 var temp = v.cloneNode(true); parent.insertBefore(temp, nextNode); res.push(temp); } }); }); // 3.返回所有添加的元素 return $(res); }, ","date":"2020-06-23","objectID":"/posts/notes/20200623/:10:0","tags":null,"title":"jQuery原理（DOM操作相关方法）","uri":"/posts/notes/20200623/"},{"categories":["notes"],"content":"before before: function (sele) { // 1.统一的将传入的数据转换为jQuery对象 var $target = $(sele); var $this = this; $this.each(function (k, v) { var parent = v.parentNode if (k == 0) { parent.insertBefore($target.get(0), v) } else { var temp = $target.get(0).cloneNode(true) parent.insertBefore(temp, v) } }) // 3.返回所有添加的元素 return $this }, ","date":"2020-06-23","objectID":"/posts/notes/20200623/:11:0","tags":null,"title":"jQuery原理（DOM操作相关方法）","uri":"/posts/notes/20200623/"},{"categories":["notes"],"content":"after after: function (sele) { // 1.统一的将传入的数据转换为jQuery对象 var $target = $(sele); var $this = this; $this.each(function (k, v) { var nextNode = $.get_nextsibling(v) var parent = v.parentNode if (k == 0) { parent.insertBefore($target.get(0), nextNode) } else { var temp = $target.get(0).cloneNode(true) parent.insertBefore(temp, nextNode) } }) // 3.返回所有添加的元素 return $this }, ","date":"2020-06-23","objectID":"/posts/notes/20200623/:12:0","tags":null,"title":"jQuery原理（DOM操作相关方法）","uri":"/posts/notes/20200623/"},{"categories":["notes"],"content":"replaceAll 替换所有指定元素 将元素插入到指定元素的前面 将指定元素删除 replaceAll: function (sele) { // 1.统一的将传入的数据转换为jQuery对象 var $target = $(sele); var $this = this; var res = []; // 2.遍历取出所有指定的元素 $.each($target, function (key, value) { var parent = value.parentNode; // 2.遍历取出所有的元素 $this.each(function (k, v) { // 3.判断当前是否是第0个指定的元素 if (key === 0) { // 直接添加 $(v).insertBefore(value) //将元素删除 $(value).remove() res.push(v) } else { // 先拷贝再添加 var temp = v.cloneNode(true); $(temp).insertBefore(value); $(value).remove() res.push(temp); } }); }); // 3.返回所有添加的元素 return $(res); } ","date":"2020-06-23","objectID":"/posts/notes/20200623/:13:0","tags":null,"title":"jQuery原理（DOM操作相关方法）","uri":"/posts/notes/20200623/"},{"categories":["notes"],"content":"next方法与prev方法 kjQuery.prototype.extend({ next: function (sele) { var res = []; if(arguments.length === 0){ // 返回所有找到的 this.each(function (key, value) { var temp = kjQuery.get_nextsibling(value); if(temp != null){ res.push(temp); } }); }else{ // 返回指定找到的 this.each(function (key, value) { var temp = kjQuery.get_nextsibling(value) $(sele).each(function (k, v) { if(v == null || v !== temp) return true; res.push(v); }); }); } return $(res); }, prev: function (sele) { var res = []; if(arguments.length === 0){ this.each(function (key, value) { var temp = njQuery.get_previoussibling(value); if(temp == null) return true; res.push(temp); }); }else{ this.each(function (key, value) { var temp = njQuery.get_previoussibling(value); $(sele).each(function (k, v) { if(v == null || temp !== v) return true; res.push(v); }) }); } return $(res); } }); kjQuery.prototype = { get_nextsibling: function (n) { var x = n.nextSibling; while (x != null \u0026\u0026 x.nodeType != 1) { x = x.nextSibling; } return x; }, get_previoussibling: function (n) { var x = n.previousSibling; while (x != null \u0026\u0026 x.nodeType != 1) { x = x.previousSibling; } return x; }, }; ","date":"2020-06-23","objectID":"/posts/notes/20200623/:14:0","tags":null,"title":"jQuery原理（DOM操作相关方法）","uri":"/posts/notes/20200623/"},{"categories":["notes"],"content":"jQuery原型上的属性 kjQuery.prototype = { constructor: kjQuery, init: function (selector) {}, // 版本号 jquery: \"1.1.0\", // 实例默认的选择器取值 selector: \"\", // 实例默认的长度 length: 0, // 给实例添加新元素 push: [].push, // 对实例中的元素进行排序 sort: [].sort, // 按照指定下标指定数量删除元素，也可以替换删除的元素 splice: [].splice, }; 关于三个方法（push,sort,splice）以push为例： 通过[].push找到数组的push方法 但是对象的push方法由对象调用，那么this就指向了对象（jQuery） 所以也就相当于[].push.apply(this)将元素添加到对象身上 ","date":"2020-06-22","objectID":"/posts/notes/20200622/:1:0","tags":null,"title":"jQuery原理（原型上的属性、方法）","uri":"/posts/notes/20200622/"},{"categories":["notes"],"content":"jQuery原型上的方法 ","date":"2020-06-22","objectID":"/posts/notes/20200622/:2:0","tags":null,"title":"jQuery原理（原型上的属性、方法）","uri":"/posts/notes/20200622/"},{"categories":["notes"],"content":"toArray 把实例转换为数组返回 toArray: function () { return [].slice.call(this); }, ","date":"2020-06-22","objectID":"/posts/notes/20200622/:2:1","tags":null,"title":"jQuery原理（原型上的属性、方法）","uri":"/posts/notes/20200622/"},{"categories":["notes"],"content":"get 取指定下标的元素，获取的是原生DOM get: function (num) { if (arguments.length === 0) { // 没有传入参数 return this.toArray(); } else if (num \u003e= 0) { // 传入大于0的数字 return this[num]; } else { // 传入了负数 return this[this.length + num]; } }, ","date":"2020-06-22","objectID":"/posts/notes/20200622/:2:2","tags":null,"title":"jQuery原理（原型上的属性、方法）","uri":"/posts/notes/20200622/"},{"categories":["notes"],"content":"eq 获取指定下标的元素，获取的是jQuery类型的实例对象 eq: function (num) { if (arguments.length === 0) { // 没有传入参数 return new kjQuery(); } else { // 传入了参数 return kjQuery(this.get(num)); } }, ","date":"2020-06-22","objectID":"/posts/notes/20200622/:2:3","tags":null,"title":"jQuery原理（原型上的属性、方法）","uri":"/posts/notes/20200622/"},{"categories":["notes"],"content":"first与last first：获取实例中的第一个元素，是jQuery类型的实例对象 first: function () { return this.eq(0); }, last：获取实例中的最后一个元素，是jQuery类型的实例对象 last: function () { return this.eq(-1); }, ","date":"2020-06-22","objectID":"/posts/notes/20200622/:2:4","tags":null,"title":"jQuery原理（原型上的属性、方法）","uri":"/posts/notes/20200622/"},{"categories":["notes"],"content":"each 遍历实例，把遍历到的数据传给回调使用 jQuery存在两个each方法，一个类方法，一个对象方法。当实现类方法时，只需要让对象方法调用类方法即可实现。 类方法 kjQuery.extend({ each: function (obj, fn) { // 1. 判断是否是数组 var res; if (kjQuery.isArray(obj)) { for (var i = 0; i \u003c obj.length; i++) { // res = fn(i, obj[i]); // 将this修改为指向value res = fn.call(obj[i], i, obj[i]); if (res == true) { continue; } else if (res === false) { break; } } } // 2. 判断是否是对象 else if (kjQuery.isObject(obj)) { for (var key in obj) { // res = fn(key, obj[key]); // 将this修改为指向value res = fn.call(obj[key], key, obj[key]); if (res == true) { continue; } else if (res === false) { break; } } } return obj; }, }); 对象方法 kjQuery.prototype = { each: function (fn) { return kjQuery.each(this, fn); }, }; ","date":"2020-06-22","objectID":"/posts/notes/20200622/:2:5","tags":null,"title":"jQuery原理（原型上的属性、方法）","uri":"/posts/notes/20200622/"},{"categories":["notes"],"content":"map 遍历实例，把遍历到的数据传给回调使用，然后把回调的返回值收集起来组成一个新的数组返回 map方法与each方法的区别 each静态方法默认的返回值就是, 遍历谁就返回谁； map静态方法默认的返回值是一个空数组 each静态方法不支持在回调函数中对遍历的数组进行处理；map静态方法可以在回调函数中通过return对遍历的数组进行处理, 然后生成一个新的数组返回 kjQuery.extend({ map: function (obj, fn) { var res = []; var temp; if (kjQuery.isArray(obj)) { for (var i = 0; i \u003c obj.length; i++) { temp = fn(obj[i], i); if (temp) { res.push(temp); } } } else if (kjQuery.isObject(obj)) { for (var key in obj) { temp = fn(obj[key], key); if (temp) { res.push(temp); } } } return res; }, }) ","date":"2020-06-22","objectID":"/posts/notes/20200622/:2:6","tags":null,"title":"jQuery原理（原型上的属性、方法）","uri":"/posts/notes/20200622/"},{"categories":["notes"],"content":"基本结构 jQuery的基本结构如下： (function (window, undefiend) { var jQuery = function () { return new jQuery.fn.init() } jQuery.prototype = { constructor: jQuery } jQuery.fn.init.prototype = jQuery.prototype window.jQuery = window.$ = jQuery })(window); /* 其中fn指代的是原型，因此以上结构可以转换成以下结构 */ (function (window, undefiend) { var jQuery = function () { return new kjQuery.prototype.init(); }; jQuery.prototype = { constructor: jQuery, }; jQuery.prototype.init.prototype = jQuery.prototype; window.jQuery = window.$ = jQuery; })(window); jQuery的本质是一个闭包 为了避免多个框架的冲突 jQuery如何让外界访问内部定义的局部变量 windows.xx = xxx jQuery为什么要给自己传递一个window参数 为了方便后期压缩代码 为了提升查找的效率 jQuery为什么要给自己传递一个undefiend参数 为了方便后期压缩代码 IE9以下的浏览器undefined可以被修改，为了保证内部使用的undefined不被修改，所以需要接收一个正确的undefined ","date":"2020-06-21","objectID":"/posts/notes/20200621/:1:0","tags":null,"title":"jQuery原理（入口函数）","uri":"/posts/notes/20200621/"},{"categories":["notes"],"content":"入口函数测试 传入 '' null undefined NaN 0 false 返回空的jQuery对象 console.log($()) console.log($('')) console.log($(null)) console.log($(undefined)) console.log($(NaN)) console.log($(0)) console.log($(false)) 字符串 代码片段 会将创建好的DOM元素存储到jQuery对象中返回 console.log($('\u003cp\u003e1\u003c/p\u003e\u003cp\u003e2\u003c/p\u003e\u003cp\u003e3\u003c/p\u003e')); 选择器 会将找到的所有元素存储到jQuery对象中返回 console.log($('li')); 数组 会将数组中存储的元素依次存储到jQuery对象中立返回 var arr = [1, 2, 3, 4, 5, 6]; console.log($(arr)); var likeArr = { 0: \"lnj\", 1: \"33\", 2: \"male\", length: 3 }; console.log($(likeArr)); 其他类型（对象、DOM元素、基本数据类型等） 会将传入的数据存储到jQuery对象中返回 function Person() { } console.log($(new Person())); console.log($(document.createElement('div'))); console.log($(123)); console.log($(true)); ","date":"2020-06-21","objectID":"/posts/notes/20200621/:2:0","tags":null,"title":"jQuery原理（入口函数）","uri":"/posts/notes/20200621/"},{"categories":["notes"],"content":"入口函数-代码实现 接收参数的实现：在创建时接收一个参数，并且传递给init即可。这样init就可以接收这个参数。 var kjQuery = function (selector) { return new kjQuery.prototype.init(selector); }; 接下来的方法只需要在init中定义即可。 kjQuery.prototype = { constructor: kjQuery, init: function (selector) { }, }; 传入 '' null undefined NaN 0 false if (!selector) { return this; } 处理函数 判断是否为函数，如果是则将传入的参数作为ready的回调函数传入。 isFunction: function (selector) { return typeof selector === \"function\"; }, // 2. 方法处理 else if (kjQuery.isFunction(selector)) { kjQuery.ready(selector); } 在ready函数中需要判断页面是否加载，由于IE不支持addEvem=ntListener方法添加事件，因此判断页面是否加载只能使用readyState判断页面加载状态。当页面加载完成后在进行添加事件的操作。 ready: function (fn) { // 判断DOM是否加载完毕 if (document.readyState == \"complete\") { fn(); // 判断是否含有addEventListener方法 } else if (document.addEventListener) { document.addEventListener(\"DOMContentLoaded\", function () { fn(); }); } else { // IE兼容 document.attachEvent(\"onreadystatechange\", function () { if ((document.readyState = \"complete\")) { fn(); } }); } }, 字符串 在这里需要判断是否是字符串并且需要去掉字符串两端的空格。但判断是否为字符串后边可能也会用到，因此定义一个静态方法，通过类名调用。方便后边的操作 kjQuery.isString = function (str) { return typeof str === \"string\"; }; 去掉两端的空格在传入时去掉即可。同样定义一个静态方法 // 0 去除字符串两端的空格 selector = kjQuery.trim(selector); kjQuery.trim = function (str) { if (!kjQuery.isString(str)) { return str; } if (str.trim) { return str.trim(); } else { // IE兼容处理方案 return str.replace(/^\\s+|\\s+$/g, \"\"); } }; HTML代码 判断是否为HTML与判断字符串一样，后边也可能会用到，因此定义一个静态方法。 kjQuery.isHTML = function (str) { return ( str.charAt(0) == \"\u003c\" \u0026\u0026 str.charAt(str.length - 1) == \"\u003e\" \u0026\u0026 str.length \u003e= 3 ); }; else if (kjQuery.isString(selector)) { // 2.1 判断是否是代码片段 if (kjQuery.isHTML(selector)) { // 1. 根据代码片段创建所有的元素 var temp = document.createElement(\"div\"); temp.innerHTML = selector; // 2. 创建好的一级元素添加到对象 for (var i = 0; i \u003c temp.children.length; i++) { this[i] = temp.children[i]; } // 3. 给jQuery对象添加length属性 this.length = temp.children.length; // 4. 返回加工好的this(jQuery) return this; } // 2.2 判断是否是选择器 } 其中第二三步可以修改为如下写法： [].push.apply(this, temp.children); 通过apply改变push的this，这样就不会push到数组里，而是push到this（此时为kjQuery对象）中。 选择器 // 2.2 判断是否是选择器 else { // 1. 根据传入的选择器找到对应的元素 var res = document.querySelectorAll(selector); // 2. 将找到的元素添加到kjQuery [].push.apply(this, res); // 3. 返回加工好的this return this; } 数组 注意：但凡将自定义数组转换为真数组或伪数组都先转换为真数组 else if ( typeof selector === \"object\" \u0026\u0026 \"length\" in selector \u0026\u0026 selector != window ) { // 3.1 真数组 if ({}.toString.apply(selector) == \"[object Array]\") { [].push.apply(this, selector); return this; } // 3.2 伪数组 else { // 将自定义的伪数组转换成真数组 var arr = [].slice.call(selector); [].push.apply(this, arr); return this; } } 以上代码可优化为如下： 新增静态方法 kjQuery.isObject = function (selector) { return typeof selector === \"object\"; }; kjQuery.isWindow = function (selector) { return selector === window; }; kjQuery.isArray = function (selector) { if ( kjQuery.isObject(selector) \u0026\u0026 !kjQuery.isWindow(selector) \u0026\u0026 \"length\" in selector ) { return true; } return false; }; else if (kjQuery.isArray(selector)) { var arr = [].slice.call(selector); [].push.apply(this, arr); return this; } 其他类型（对象、DOM元素、基本数据类型等） else { this[0] = selector; this.length = 1; return this; } ","date":"2020-06-21","objectID":"/posts/notes/20200621/:3:0","tags":null,"title":"jQuery原理（入口函数）","uri":"/posts/notes/20200621/"},{"categories":["notes"],"content":"真伪数组转换 真数组转换为伪数组 var obj = {},arr=[]; [].push.apply(obj,arr); 伪数组转换为真数组 var obj = {}; var arr = [].slice.call(obj) ","date":"2020-06-21","objectID":"/posts/notes/20200621/:3:1","tags":null,"title":"jQuery原理（入口函数）","uri":"/posts/notes/20200621/"},{"categories":["notes"],"content":"入口函数-extend方法 通过extend方法来为对象或类添加方法。 调用extend方法，传入一个对象。 function kjQuery() { } kjQuery.extend({ isTest: function () { console.log('test'); } }) 在extend方法的实现中，遍历传入的对象，并将值添加到类身上作为类的方法。 /* 为类和对象添加方法 */ kjQuery.extend = kjQuery.prototype.extend = function (obj) { for (var key in obj) { this[key] = obj[key]; } }; /* /* 为类添加方法 */ kjQuery.extend = function (obj) { // this指向kjQuery console.log(this); for (var key in obj) { // kjQuery[key] = obj[key] this[key] = obj[key] } } /* 为对象添加方法 */ kjQuery.extend.prototype = function (obj) { // this指向实例化对象 console.log(this); for (var key in obj) { // kjQuery[key] = obj[key] this[key] = obj[key] } } */ 通过类名调用方法 kjQuery.isTest() 通过对象调用方法 var k = new kjQuery(); k.extend({ isDemo: function () { console.log('demo') } }) k.isDemo() 因此可以将之前定义的静态方法改为如下写法： kjQuery.extend = kjQuery.prototype.extend = function (obj) { for (var key in obj) { this[key] = obj[key]; } }; kjQuery.extend({ isString: function (str) { return typeof str === \"string\"; }, isHTML: function (str) { return ( str.charAt(0) == \"\u003c\" \u0026\u0026 str.charAt(str.length - 1) == \"\u003e\" \u0026\u0026 str.length \u003e= 3 ); }, trim: function (str) { if (!kjQuery.isString(str)) { return str; } if (str.trim) { return str.trim(); } else { // IE兼容处理方案 return str.replace(/^\\s+|\\s+$/g, \"\"); } }, isObject: function (selector) { return typeof selector === \"object\"; }, isWindow: function (selector) { return selector === window; }, isArray: function (selector) { if ( kjQuery.isObject(selector) \u0026\u0026 !kjQuery.isWindow(selector) \u0026\u0026 \"length\" in selector ) { return true; } return false; }, isFunction: function (selector) { return typeof selector === \"function\"; }, ready: function (fn) { // 判断DOM是否加载完毕 if (document.readyState == \"complete\") { fn(); // 判断是否含有addEventListener方法 } else if (document.addEventListener) { document.addEventListener(\"DOMContentLoaded\", function () { fn(); }); } else { // IE兼容 document.attachEvent(\"onreadystatechange\", function () { if ((document.readyState = \"complete\")) { fn(); } }); } }, }); ","date":"2020-06-21","objectID":"/posts/notes/20200621/:4:0","tags":null,"title":"jQuery原理（入口函数）","uri":"/posts/notes/20200621/"},{"categories":["notes"],"content":"完整代码 至此入口函数部分编写已经完成，下边是工具库的全部代码。 (function (window, undefiend) { var kjQuery = function (selector) { return new kjQuery.prototype.init(selector); }; kjQuery.prototype = { constructor: kjQuery, init: function (selector) { /* 代码片段:会将创建好的DOM元素存储到jQuery对象中返回 选择器: 会将找到的所有元素存储到jQuery对象中返回 3.数组: 会将数组中存储的元素依次存储到jQuery对象中立返回 4.除上述类型以外的: 会将传入的数据存储到jQuery对象中返回 */ // 0 去除字符串两端的空格 selector = kjQuery.trim(selector); // 1.传入 '' null undefined NaN 0 false, 返回空的jQuery对象 if (!selector) { return this; } // 2. 方法处理 else if (kjQuery.isFunction(selector)) { kjQuery.ready(selector); } // 3.字符串: else if (kjQuery.isString(selector)) { // 2.1 判断是否是代码片段 if (kjQuery.isHTML(selector)) { // 1. 根据代码片段创建所有的元素 var temp = document.createElement(\"div\"); temp.innerHTML = selector; // // 2. 创建好的一级元素添加到对象 // for (var i = 0; i \u003c temp.children.length; i++) { // this[i] = temp.children[i]; // } // // 3. 给jQuery对象添加length属性 // this.length = temp.children.length; [].push.apply(this, temp.children); // this是kjQuery // 4. 返回加工好的this(jQuery) } // 2.2 判断是否是选择器 else { // 1. 根据传入的选择器找到对应的元素 var res = document.querySelectorAll(selector); // 2. 将找到的元素添加到kjQuery [].push.apply(this, res); // 3. 返回加工好的this } } // 3 数组 else if (kjQuery.isArray(selector)) { /* // 3.1 真数组 if ({}.toString.apply(selector) == \"[object Array]\") { [].push.apply(this, selector); return this; } // 3.2 伪数组 else { // 将自定义的伪数组转换成真数组 var arr = [].slice.call(selector); [].push.apply(this, arr); return this; // 但凡将自定义数组转换为真数组或伪数组都先转换为真数组 } */ var arr = [].slice.call(selector); [].push.apply(this, arr); } // 4. 其他类型 else { this[0] = selector; this.length = 1; } return this; }, }; kjQuery.extend = kjQuery.prototype.extend = function (obj) { for (var key in obj) { this[key] = obj[key]; } }; kjQuery.extend({ isString: function (str) { return typeof str === \"string\"; }, isHTML: function (str) { return ( str.charAt(0) == \"\u003c\" \u0026\u0026 str.charAt(str.length - 1) == \"\u003e\" \u0026\u0026 str.length \u003e= 3 ); }, trim: function (str) { if (!kjQuery.isString(str)) { return str; } if (str.trim) { return str.trim(); } else { // IE兼容处理方案 return str.replace(/^\\s+|\\s+$/g, \"\"); } }, isObject: function (selector) { return typeof selector === \"object\"; }, isWindow: function (selector) { return selector === window; }, isArray: function (selector) { if ( kjQuery.isObject(selector) \u0026\u0026 !kjQuery.isWindow(selector) \u0026\u0026 \"length\" in selector ) { return true; } return false; }, isFunction: function (selector) { return typeof selector === \"function\"; }, ready: function (fn) { // 判断DOM是否加载完毕 if (document.readyState == \"complete\") { fn(); // 判断是否含有addEventListener方法 } else if (document.addEventListener) { document.addEventListener(\"DOMContentLoaded\", function () { fn(); }); } else { // IE兼容 document.attachEvent(\"onreadystatechange\", function () { if ((document.readyState = \"complete\")) { fn(); } }); } }, }); kjQuery.prototype.init.prototype = kjQuery.prototype; window.kjQuery = window.$ = kjQuery; })(window); ","date":"2020-06-21","objectID":"/posts/notes/20200621/:5:0","tags":null,"title":"jQuery原理（入口函数）","uri":"/posts/notes/20200621/"},{"categories":["notes"],"content":"项目资料 查看源码\r 在线Demo\r\r","date":"2020-06-20","objectID":"/posts/notes/20200620/:1:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"基本框架及顶部布局 \u003cdiv class=\"header\"\u003e \u003ch1 class=\"logo\"\u003e\u003ca href=\"#\"\u003e\u003c/a\u003e\u003c/h1\u003e \u003cul class=\"register\"\u003e \u003cli\u003e注册\u003c/li\u003e \u003cli\u003e登陆\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e \u003cdiv class=\"content\"\u003e \u003cdiv class=\"content_in\"\u003e\u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"footer\"\u003e \u003cdiv class=\"footer_in\"\u003e\u003c/div\u003e \u003c/div\u003e * { margin: 0; padding: 0; } .header { width: 100%; height: 45px; background: red; } .header .logo { float: left; margin-left: 20px; opacity: 0.5; } .header .logo:hover { opacity: 1; } .header .logo a { display: inline-block; width: 78px; height: 21px; background: url(\"../images/player_logo.png\") no-repeat 0 0; } .header .register { float: right; line-height: 25px; } .header .register li { list-style: none; float: left; margin-right: 20px; color: #fff; opacity: 0.5; cursor: pointer; } .header .register li:hover { opacity: 1; } .content { width: 100%; height: 460px; background: blue; } .content .content_in { width: 1200px; height: 100%; background: deeppink; margin: 0 auto; } .footer { width: 100%; height: 60px; background: green; position: absolute; bottom: 0; left: 0; } .footer .footer_in { width: 1200px; height: 100%; background: plum; margin: 0 auto; } ","date":"2020-06-20","objectID":"/posts/notes/20200620/:2:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"工具条 工具条使用span作为按钮，里边为图片加文字。 \u003cdiv class=\"content_in\"\u003e \u003cdiv class=\"content_left\"\u003e \u003cdiv class=\"content_toolbar\"\u003e \u003cspan\u003e\u003ci\u003e\u003c/i\u003e收藏\u003c/span\u003e \u003cspan\u003e\u003ci\u003e\u003c/i\u003e添加到\u003c/span\u003e \u003cspan\u003e\u003ci\u003e\u003c/i\u003e下载\u003c/span\u003e \u003cspan\u003e\u003ci\u003e\u003c/i\u003e删除\u003c/span\u003e \u003cspan\u003e\u003ci\u003e\u003c/i\u003e清空列表\u003c/span\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e .content .content_in .content_left { float: left; width: 800px; height: 100%; background: pink; } .content_left .content_toolbar { width: 100%; height: 40px; background: #000; } .content_toolbar span { display: inline-block; width: 122px; height: 100%; line-height: 40px; text-align: center; box-sizing: border-box; border: 1px solid #fff; color: #fff; opacity: 0.5; cursor: pointer; } .content_toolbar span:hover { opacity: 1; } .content_toolbar span i { display: inline-block; width: 18px; height: 18px; background: url(\"../images/icon_sprite.png\") no-repeat; margin-right: 10px; vertical-align: -5px; } .content_toolbar span:nth-child(1) i { background-position: -60px -20px; } .content_toolbar span:nth-child(2) i { background-position: -20px -20px; } .content_toolbar span:nth-child(3) i { background-position: -40px -240px; } .content_toolbar span:nth-child(4) i { background-position: -100px -20px; } .content_toolbar span:nth-child(5) i { background-position: -40px -300px; } ","date":"2020-06-20","objectID":"/posts/notes/20200620/:3:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"歌曲列表 歌曲列表可以视作逐行的列表，第一行为标题，下边为歌曲。 \u003cdiv class=\"content_left\"\u003e \u003cdiv class=\"content_list\"\u003e \u003cul\u003e \u003cli class=\"list_title\"\u003e \u003cdiv class=\"list_check\"\u003e\u003ci\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=\"list_number\"\u003e\u003c/div\u003e \u003cdiv class=\"list_name\"\u003e歌曲\u003c/div\u003e \u003cdiv class=\"list_singer\"\u003e歌手\u003c/div\u003e \u003cdiv class=\"list_time\"\u003e时长\u003c/div\u003e \u003c/li\u003e \u003cli class=\"list_music\"\u003e \u003cdiv class=\"list_check\"\u003e\u003ci\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=\"list_number\"\u003e1\u003c/div\u003e \u003cdiv class=\"list_name\"\u003e哈哈哈\u003c/div\u003e \u003cdiv class=\"list_singer\"\u003eTZK\u003c/div\u003e \u003cdiv class=\"list_time\"\u003e03:17\u003c/div\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e \u003c/div\u003e /* TAG 播放列表布局 */ .content_list li { list-style: none; width: 100%; height: 50px; background: orangered; border: 1px solid rgba(255, 255, 255, 0.5); box-sizing: border-box; } .content_list li div { float: left; color: #fff; text-align: 50px; opacity: 0.5; } .content_list .list_check { width: 50px; height: 100%; background: #000; text-align: center; } .content_list .list_check i { display: inline-block; width: 14px; height: 14px; border: 1px solid #000; } .content_list .list_number { width: 20px; height: 100%; background: green; } .content_list .list_name { width: 50%; height: 100%; background: #ccc; } .content_list .list_singer { width: 20%; height: 100%; background: pink; } ","date":"2020-06-20","objectID":"/posts/notes/20200620/:4:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"完善播放列表 选择框 伪选择框，使用图片，当被点击时，切换图片 鼠标悬停的图标 使用a标签加背景图即可。使用jQuery监听鼠标的移入移出事件。 \u003cli class=\"list_music\"\u003e \u003cdiv class=\"list_check\"\u003e\u003ci\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=\"list_number\"\u003e1\u003c/div\u003e \u003cdiv class=\"list_name\"\u003e哈哈哈 \u003cdiv class=\"list_menu\"\u003e \u003ca href=\"javascript:;\" title=\"播放\"\u003e\u003c/a\u003e \u003ca href=\"javascript:;\" title=\"添加\"\u003e\u003c/a\u003e \u003ca href=\"javascript:;\" title=\"下载\"\u003e\u003c/a\u003e \u003ca href=\"javascript:;\" title=\"分享\"\u003e\u003c/a\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"list_singer\"\u003eTZK\u003c/div\u003e \u003cdiv class=\"list_time\"\u003e \u003cspan\u003e04:12\u003c/span\u003e \u003ca href=\"javascript:;\" title=\"删除\"\u003e\u003c/a\u003e \u003c/div\u003e \u003c/li\u003e .list_name .list_menu { margin-top: 5px; float: right; margin-right: 20px; display: none; } .list_name .list_menu a { display: inline-block; width: 36px; height: 36px; background: url(\"../images/icon_list_menu.png\") no-repeat 0 0; } .list_name .list_menu a:nth-child(1) { background-position: -120px 0; } .list_name .list_menu a:nth-child(2) { background-position: -120px -80px; } .list_name .list_menu a:nth-child(3) { background-position: -120px -120px; } .list_name .list_menu a:nth-child(4) { background-position: -120px -40px; } .content_list .list_time a { display: inline-block; width: 36px; height: 36px; background: url(\"../images/icon_list_menu.png\") no-repeat -120px -160px; float: left; margin-top: 5px; display: none; } $(function () { // 1. 监听歌曲的移入移出事件 $(\".list_music\").hover( function () { // 显示子菜单 $(this).find(\".list_menu\").stop().fadeIn(100); $(this).find(\".list_time a\").stop().fadeIn(100); // 隐藏时长 $(this).find(\".list_time span\").stop().fadeOut(100); }, function () { // 隐藏子菜单 $(this).find(\".list_menu\").stop().fadeOut(100); $(this).find(\".list_time a\").stop().fadeOut(100); // 显示时长 $(this).find(\".list_time span\").stop().fadeIn(100); } ); // 2. 监听复选框的点击事件 $(\".list_check\").click(function () { $(this).toggleClass(\"list_checked\"); }); }); ","date":"2020-06-20","objectID":"/posts/notes/20200620/:5:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"自定义滚动条 自定义滚动条使用了一个jQuery插件jQuery custom content scroller。利用这个插件可以轻松设置滚动条样式。 引入CSS文件 在jQuery下方引入JS文件 为需要添加的元素调用mCustomScrollbar()方法 $(\".content_list\").mCustomScrollbar(); 为该元素添加自定义属性data-mcs-theme=\"dark\" \u003cdiv class=\"content_list\" data-mcs-theme='minimal-dark'\u003e\u003c/div\u003e 小细节（修改其默认样式） 根据图中所示，可以将滚动条的宽度增加。 /* 滚动条 */ ._mCS_1 .mCSB_scrollTools .mCSB_dragger_bar { width: 8px; } ","date":"2020-06-20","objectID":"/posts/notes/20200620/:6:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"音乐歌曲信息 \u003cdiv class=\"content_right\"\u003e \u003cdiv class=\"song_info\"\u003e \u003ca href=\"javascript;;\" class=\"song_info_pic\"\u003e \u003cimg src=\"images/lnj.jpg\" alt=\"\"\u003e \u003c/a\u003e \u003cdiv class=\"song_info_name\"\u003e歌曲名称: \u003ca href=\"javascript:;\"\u003exiaokang\u003c/a\u003e \u003c/div\u003e \u003cdiv class=\"song_info_singer\"\u003e歌手名: \u003ca href=\"javascript:;\"\u003exiaokang\u003c/a\u003e \u003c/div\u003e \u003cdiv class=\"song_info_ablum\"\u003e专辑名: \u003ca href=\"javascript:;\"\u003exiaokang\u003c/a\u003e \u003c/div\u003e \u003c/div\u003e \u003cul class=\"song_lyric\"\u003e \u003cli class=\"cur\"\u003e第一条歌词\u003c/li\u003e \u003cli\u003e第二条歌词\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e .content_right .song_info { text-align: center; color: rgba(255, 255, 255, 0.5); line-height: 30px; } .song_info .song_info_pic { display: inline-block; background: url(\"../images/album_cover_player.png\") no-repeat 0 0; width: 201px; height: 180px; text-align: left; } .song_info_pic img { width: 180px; height: 180px; } .song_info div a { text-decoration: none; color: #fff; opacity: 0.5; } .song_info div a:hover { opacity: 1; } .content_right .song_lyric { background: gray; text-align: center; margin-top: 30px; } .content_right .song_lyric li { list-style: none; line-height: 30px; color: rgba(255, 255, 255, 0.5); font-weight: bold; } .content_right .song_lyric .cur { color: #31c27c; } ","date":"2020-06-20","objectID":"/posts/notes/20200620/:7:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"底部结构 ","date":"2020-06-20","objectID":"/posts/notes/20200620/:8:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"基本结构 进度条可大致分为四部分 图标 使用a标签加背景图即可 歌曲进度条（红色区域） 因为此区域需包含进度条及歌曲名称、时间等信息。因此使用div作为布局 音量部分（绿色区域） 此部分包含图标及一个拖动条，因此也使用div作为盒子进行布局。 \u003cdiv class=\"footer_in\"\u003e \u003ca href=\"javascript:;\" class=\"music_pre\"\u003e\u003c/a\u003e \u003ca href=\"javascript:;\" class=\"music_play\"\u003e\u003c/a\u003e \u003ca href=\"javascript:;\" class=\"music_next\"\u003e\u003c/a\u003e \u003cdiv class=\"music_progress_info\"\u003e\u003c/div\u003e \u003ca href=\"javascript:;\" class=\"music_mode\"\u003e\u003c/a\u003e \u003ca href=\"javascript:;\" class=\"music_fav\"\u003e\u003c/a\u003e \u003ca href=\"javascript:;\" class=\"music_down\"\u003e\u003c/a\u003e \u003ca href=\"javascript:;\" class=\"music_comment\"\u003e\u003c/a\u003e \u003ca href=\"javascript:;\" class=\"music_only\"\u003e\u003c/a\u003e \u003cdiv class=\"music_voice_info\"\u003e\u003c/div\u003e \u003c/div\u003e .footer_in a { display: inline-block; text-decoration: none; color: #fff; background: url(\"../images/player.png\") no-repeat 0 0; margin-right: 20px; } .footer_in .music_pre { width: 19px; height: 20px; background-position: 0 -30px; } .footer_in .music_play { width: 21px; height: 29px; background-position: 0 0; } .footer_in .music_next { width: 19px; height: 20px; background-position: 0 -52px; } .footer_in .music_progress_info { display: inline-block; width: 670px; height: 40px; background-color: red; } .footer_in .music_mode { width: 26px; height: 25px; background-position: 0px -205px; } .footer_in .music_fav { width: 24px; height: 21px; background-position: 0px -96px; } .footer_in .music_down { width: 22px; height: 21px; background-position: 0px -120px; } .footer_in .music_comment { width: 24px; height: 24px; background-position: 0px -400px; } .footer_in .music_only { width: 74px; height: 27px; background-position: 0px -281px; } .footer_in .music_voice_info { display: inline-block; width: 100px; background: green; height: 40px; } ","date":"2020-06-20","objectID":"/posts/notes/20200620/:8:1","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"进度条 歌曲部分的结构 信息部分 两个span元素即可 进度条 一种通用的结构。三层结构分别表示背景、前景、圆。 \u003cdiv class=\"music_progress_bar\"\u003e \u003cdiv class=\"music_progress_line\"\u003e \u003cdiv class=\"music_progress_dot\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e 音量部分 与歌曲信息的进度条同理，图标同样使用a标签与图片结合。 \u003cdiv class=\"music_progress_info\"\u003e \u003cdiv class=\"music_progress_top\"\u003e \u003cspan class=\"music_progress_name\"\u003e666/666\u003c/span\u003e \u003cspan class=\"music_progress_time\"\u003e00:00 / 05:23\u003c/span\u003e \u003c/div\u003e \u003cdiv class=\"music_progress_bar\"\u003e \u003cdiv class=\"music_progress_line\"\u003e \u003cdiv class=\"music_progress_dot\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"music_voice_info\"\u003e \u003ca href=\"javascript:;\" class=\"music_voice_icon\"\u003e\u003c/a\u003e \u003cdiv class=\"music_voice_bar\"\u003e \u003cdiv class=\"music_voice_line\"\u003e \u003cdiv class=\"music_voice_dot\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003c/div\u003e /* 歌曲进度条 */ .footer_in .music_progress_info { display: inline-block; width: 670px; height: 40px; background-color: red; } .music_progress_info .music_progress_top { width: 100%; height: 30px; line-height: 30px; background: #000000; color: #fff; } .music_progress_top .music_progress_name { float: left; opacity: 0.5; } .music_progress_top .music_progress_name:hover { opacity: 1; } .music_progress_top .music_progress_time { float: right; opacity: 0.5; } .music_progress_info .music_progress_bar { width: 100%; height: 4px; background: rgba(255, 255, 255, 0.5); margin-top: 5px; } .music_progress_bar .music_progress_line { width: 100%; height: 100%; background: #ffffff; } .music_progress_bar .music_progress_dot { width: 14px; height: 14px; border-radius: 50%; background: #fff; position: relative; top: -5px; left: 100px; cursor: pointer; } /* 音量控制 */ .footer_in .music_voice_info { display: inline-block; width: 100px; background: green; height: 40px; position: relative; } .music_voice_info .music_voice_icon { width: 26px; height: 21px; background-position: 0 -144px; position: absolute; left: 0; top: 10px; } .music_voice_info .music_voice_bar { width: 70px; height: 4px; background: rgba(255, 255, 255, 0.5); position: absolute; right: 0; top: 18px; } .music_voice_bar .music_voice_line { width: 50px; height: 100%; background: #ffffff; } .music_voice_bar .music_voice_dot { width: 14px; height: 14px; border-radius: 50%; background: #ffffff; position: absolute; top: -5px; left: 50px; } ","date":"2020-06-20","objectID":"/posts/notes/20200620/:8:2","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"底部微调完善 .footer { height: 80px; } .footer_in .music_play { vertical-align: -5px; } .footer_in .music_progress_info { top: 10px; } .footer_in .music_voice_info { top: 10px; } /* 播放按钮点击 */ .footer_in .music_play2 { background-position: -30px 0; } /* 循环模式样式切换 */ .footer_in .music_mode2 { width: 23px; height: 20px; background-position: 0px -260px; } .footer_in .music_mode3 { width: 25px; height: 19px; background-position: 0px -74px; } .footer_in .music_mode4 { width: 26px; height: 25px; background-position: 0px -232px; } /* 喜欢按钮 */ .footer_in .music_fav2 { background-position: -30px -96px; } /* 纯净模式 */ .footer_in .music_only2 { background-position: 0px -310px; } ","date":"2020-06-20","objectID":"/posts/notes/20200620/:8:3","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"高斯模糊背景 模糊背景通过使用一张图加一个淡灰色的蒙版即可。 \u003cdiv class=\"footer\"\u003e\u003c/div\u003e \u003cdiv class=\"mask_bg\"\u003e\u003c/div\u003e \u003cdiv class=\"mask\"\u003e\u003c/div\u003e /* 背景设置 */ .mask_bg { position: absolute; left: 0; top: 0; width: 100%; height: 100%; background: url(\"../images/lnj.jpg\") no-repeat 0 0; background-size: cover; z-index: -2; filter: blur(100px); } .mask { position: absolute; left: 0; top: 0; width: 100%; height: 100%; z-index: -1; background: rgba(0, 0, 0, 0.35); } ","date":"2020-06-20","objectID":"/posts/notes/20200620/:9:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"加载歌曲 加载歌曲使用了jQuery得Ajax方法。通过一个json文件获取歌曲的相关信息。 // 3. 加载歌曲列表 function getPlayerList() { $.ajax({ url: \"./source/musiclist.json\", dataType: \"json\", success: function (data) { // 3.1 遍历获取到的数据创建每一条音乐 var $musicList = $(\".content_list ul\"); $.each(data, function (index, ele) { var $item = createMusicItem(index, ele); $musicList.append($item); }); }, error: function (e) { console.log(e); }, }); } getPlayerList(); // 创建一条音乐的方法 function createMusicItem(index, music) { var $item = $( '\u003cli class=\"list_music\"\u003e\u003cdiv class=\"list_check \"\u003e\u003ci\u003e\u003c/i\u003e\u003c/div\u003e\u003cdiv class=\"list_number\"\u003e' + (index + 1) + '\u003c/div\u003e\u003cdiv class=\"list_name\"\u003e' + music.name + '\u003cdiv class=\"list_menu\"\u003e\u003ca href=\"javascript:;\" title=\"播放\"\u003e\u003c/a\u003e\u003ca href=\"javascript:;\" title=\"添加\"\u003e\u003c/a\u003e\u003ca href=\"javascript:;\" title=\"下载\"\u003e\u003c/a\u003e\u003ca href=\"javascript:;\" title=\"分享\"\u003e\u003c/a\u003e\u003c/div\u003e\u003c/div\u003e\u003cdiv class=\"list_singer\"\u003e' + music.singer + '\u003c/div\u003e\u003cdiv class=\"list_time\"\u003e\u003cspan\u003e' + music.time + '\u003c/span\u003e\u003ca href=\"javascript:;\" title=\"删除\"\u003e\u003c/a\u003e\u003c/div\u003e\u003c/li\u003e' ); return $item; } ","date":"2020-06-20","objectID":"/posts/notes/20200620/:10:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"完善事件 由于音乐列表改成了js动态创建，那么就会导致曾经绑定的事件失效，因此需要修改为事件委托方式。 // 1. 监听歌曲的移入移出事件 $(\".content_list\").delegate(\".list_music\", \"mouseenter\", function () { // 显示子菜单 $(this).find(\".list_menu\").stop().fadeIn(100); $(this).find(\".list_time a\").stop().fadeIn(100); // 隐藏时长 $(this).find(\".list_time span\").stop().fadeOut(100); }); $(\".content_list\").delegate(\".list_music\", \"mouseleave\", function () { // 隐藏子菜单 $(this).find(\".list_menu\").stop().fadeOut(100); $(this).find(\".list_time a\").stop().fadeOut(100); // 显示时长 $(this).find(\".list_time span\").stop().fadeIn(100); }); // 2. 监听复选框的点击事件 $(\".content_list\").delegate(\".list_check\", \"click\", function () { $(this).toggleClass(\"list_checked\"); }); ","date":"2020-06-20","objectID":"/posts/notes/20200620/:10:1","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"音乐播放图标切换 为此按钮添加事件同样需要以事件委托的方式。当点击后会发生两件事： 将其他播放按钮改为暂停状态 将底部播放按钮修改 // 3. 添加子菜单播放按钮的监听 var $musicPlay = $(\".music_play\"); $(\".content_list\").delegate(\".list_menu_play\", \"click\", function () { // 3.1 切换播放的图标 $(this).toggleClass(\"list_menu_play2\"); // 3.2 复原其他的播放图标 $(this) .parents(\".list_music\") .siblings() .find(\".list_menu_play\") .removeClass(\"list_menu_play2\"); // 3.3 同步底部播放按钮 if ($(this).attr(\"class\").indexOf(\"list_menu_play2\") != -1) { // 当前是播放状态 $musicPlay.addClass(\"music_play2\"); } else { $musicPlay.removeClass(\"music_play2\"); } }); ","date":"2020-06-20","objectID":"/posts/notes/20200620/:11:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"音乐播放状态切换 要想控制单个，必须设置时对单个设置，而不是全部，因此css部分需要微调。 .content_list li div { color: rgba(255, 255, 255, 0.5); } .content_list .list_check i { opacity: 0.5; } .content_list .list_checked i { opacity: 1; } .list_name .list_menu a { opacity: 0.5; } .list_name .list_menu a:hover { opacity: 1; } .content_list .list_time a { opacity: 0.5; } .content_list .list_time a:hover { opacity: 1; } 将css修改完成后，接下来就是在JavaScript绑定的事件中进行修改了。 // 3.3 同步底部播放按钮 if ($(this).attr(\"class\").indexOf(\"list_menu_play2\") != -1) { // 当前是播放状态 $musicPlay.addClass(\"music_play2\"); // 让文字高亮 $(this).parents(\".list_music\").find(\"div\").css(\"color\", \"#fff\"); } else { $musicPlay.removeClass(\"music_play2\"); // 让文字不高亮 $(this) .parents(\".list_music\") .find(\"div\") .css(\"color\", \"rgba(255,255,255,0.5)\"); } ","date":"2020-06-20","objectID":"/posts/notes/20200620/:12:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"序号动画 动画采用图片的方式实现。当点击时，因此文字，并且显示图片。并作一些排他设置。 $(\".content_list\").delegate(\".list_menu_play\", \"click\", function () { var $item = $(this).parents(\".list_music\"); // 3.1 切换播放的图标 $(this).toggleClass(\"list_menu_play2\"); // 3.2 复原其他的播放图标 $(this) .parents(\".list_music\") .siblings() .find(\".list_menu_play\") .removeClass(\"list_menu_play2\"); // 3.3 同步底部播放按钮 if ($(this).attr(\"class\").indexOf(\"list_menu_play2\") != -1) { // 当前是播放状态 $musicPlay.addClass(\"music_play2\"); // 让文字高亮 $item.find(\"div\").css(\"color\", \"#fff\"); $item.siblings().find(\"div\").css(\"color\", \"rgba(255,255,255,0.5)\"); } else { $musicPlay.removeClass(\"music_play2\"); // 让文字不高亮 $item.find(\"div\").css(\"color\", \"rgba(255,255,255,0.5)\"); } // 3.4 切换序号的状态 $item.find(\".list_number\").toggleClass(\"list_number2\"); $item.siblings().find(\".list_number\").removeClass(\"list_number2\"); }); .content_list .list_number2 { color: transparent !important; background: url(\"../images/wave.gif\") no-repeat 0 0; } ","date":"2020-06-20","objectID":"/posts/notes/20200620/:13:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"播放工具类封装 (function (window) { function Player() { return new Player.prototype.init(); } Player.prototype = { constructor: Player, init: function () {}, }; Player.prototype.init.prototype = Player.prototype; window.Player = Player; })(window); 封装一个类，返回原型上的init()方法 也就是通过init()创建类 定义这个类的原型 将构造函数指向Player，并定义init方法 将Player原型上的init方法的原型指向Player的原型 将这个对象开放给window ","date":"2020-06-20","objectID":"/posts/notes/20200620/:14:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"音乐的播放暂停 在HTML页面插入一个audio标签，用于播放音乐 引入player工具库 实例化一个Player对象，并且传入audio对象 当按钮被点击时，调用播放音乐的方法 实现播放/暂停音乐的方法 当创建音乐标签时，在标签中保存索引及音乐信息 // 定义一个方法创建一条音乐 function createMusicItem(index, music) { var $item = $(...); $item.get(0).index = index; $item.get(0).music = music; return $item; } 接收两个参数，分别为index和music信息 定义一个遍历，用于记录当前索引 判断是否为同一首音乐 Player.prototype = { currentIndex: -1, playMusic: function (index, music) { // 判断是否是同一首音乐 if (this.currentIndex == index) { // 同一首音乐 if (this.audio.paused) { this.audio.play(); } else { this.audio.pause(); } } else { // 不是同一首音乐 this.$audio.attr(\"src\", music.link_url); this.audio.play(); this.currentIndex = index; } }, }; ","date":"2020-06-20","objectID":"/posts/notes/20200620/:15:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"底部播放/暂停/上一首/下一首 底部播放暂停的逻辑： 播放暂停 从未播放过 播放第一首 播放过 继续播放 $musicPlay.click(function () { // 判断有没有播放过音乐 if (player.currentIndex == -1) { // 没有播放过 $(\".list_music\").eq(0).find(\".list_menu_play\").trigger(\"click\"); } else { // 已经播放过 $(\".list_music\") .eq(player.currentIndex) .find(\".list_menu_play\") .trigger(\"click\"); } }); 上一首/下一首 第一首 上一首为最后一首 最后一首 下一首为第一首 // 5 监听底部控制区域上一首按钮的点击 $(\".music_pre\").click(function () { $(\".list_music\") .eq(player.preIndex()) .find(\".list_menu_play\") .trigger(\"click\"); }); // 6 监听底部控制区域下一首按钮的点击 $(\".music_next\").click(function () { $(\".list_music\") .eq(player.nextIndex()) .find(\".list_menu_play\") .trigger(\"click\"); }); 对象的preIndex与nextIndex方法用于处理索引。 preIndex: function () { var index = this.currentIndex - 1; if (index \u003c 0) { index = this.musicList.length - 1; } return index; }, nextIndex: function () { var index = this.currentIndex + 1; if (index \u003e this.musicList.length - 1) { index = 0; } return index; }, ","date":"2020-06-20","objectID":"/posts/notes/20200620/:16:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"删除歌曲 删除数据时需要注意的就是前台删除数据后，后台也无需保存数据。并且需要对标签保存的数据进行重新排序 // 7. 监听删除按钮的点击 $(\".content_list\").delegate(\".list_menu_del\", \"click\", function () { // 找到被点击的音乐 var $item = $(this).parents(\".list_music\"); // 判断当前删除的是否是正在播放的 if ($item.get(0).index == player.currentIndex) { $(\".music_next\").trigger(\"click\"); } $item.remove(); player.changeMusic($item.get(0).index); // 重新排序 $(\".list_music\").each(function (index, ele) { ele.index = index; $(ele) .find(\".list_number\") .text(index + 1); }); }); 删除后需要注意删除的数据是否是正在播放的音乐的前边，如果是需要将索引-1。否则会出现下一曲跳歌的现象。 changeMusic: function (index) { // 删除对应的数据 this.musicList.splice(index, 1); //判断当前删除的是否是正在播放的前面的音乐 if (index \u003c this.currentIndex) { this.currentIndex = this.currentIndex - 1; } }, ","date":"2020-06-20","objectID":"/posts/notes/20200620/:17:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"切换歌曲信息 更换歌曲信息涉及到的基本信息包括： 右侧信息栏 图片 歌手 歌曲名 专辑名 底部控制条的名称、时间 实现这个这个功能也很简单，只是一些元素的替换。调用位置有两处 第一次获取歌曲时（成功）的回调 初始化列表的第一个音乐 当点击其他歌曲时 // 2. 初始化歌曲信息 function initMusicInfo(music) { // 获取对应的元素 var $musicImage = $(\".song_info_pic img\"); var $musicName = $(\".song_info_name a\"); var $musicSinger = $(\".song_info_singer a\"); var $musicAblum = $(\".song_info_ablum a\"); var $musicProgressName = $(\".music_progress_name\"); var $musicProgressTime = $(\".music_progress_time\"); var $musicBg = $(\".mask_bg\"); // 给获取的到的元素赋值 $musicImage.attr(\"src\", music.cover); $musicName.text(music.name); $musicSinger.text(music.singer); $musicAblum.text(music.album); $musicProgressName.text(music.name + \"/\" + music.singer); $musicProgressTime.text(\"00:00 / \" + music.time); $musicBg.css(\"background\", 'url(\"' + music.cover + '\")'); } $.ajax({ success: function (data) { initMusicInfo(data[0]); }, }); $(\".content_list\").delegate(\".list_menu_play\", \"click\", function () { // 3.6 切换歌曲信息 initMusicInfo($item.get(0).music); }); ","date":"2020-06-20","objectID":"/posts/notes/20200620/:18:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"进度条的实现 获取被点击位置距离窗口的位置 获取默认距离窗口的位置 被点击的位置减去默认距离窗口的位置 点击进度条时，调整小圆点以及前景色的位置 progressClick: function () { var $this = this; //this 是progress // 监听背景的点击 this.$progressBar.click(function (event) { // 获取背景距离窗口默认的位置 var normalLeft = $(this).offset().left; // 获取点击的位置距离窗口默认的位置 var eventLeft = event.pageX; // 设置前景的宽度 $this.$progressLine.css(\"width\", eventLeft - normalLeft); $this.$progressDot.css(\"left\", eventLeft - normalLeft); }); }, ","date":"2020-06-20","objectID":"/posts/notes/20200620/:19:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"进度条的拖动 鼠标拖拽使用mousemove方法监听，但必须在鼠标按下后监听 实现逻辑与点击一致 鼠标抬起则释放mousemove事件即可 progressMove: function () { var $this = this; // 1. 监听的鼠标的按下事件 this.$progressBar.mousedown(function () { // 获取背景距离窗口默认的位置 var normalLeft = $(this).offset().left; // 2. 监听鼠标的移动事件 $(document).mousemove(function () { // 获取点击的位置距离窗口默认的位置 var eventLeft = event.pageX; // 设置前景的宽度 $this.$progressLine.css(\"width\", eventLeft - normalLeft); $this.$progressDot.css(\"left\", eventLeft - normalLeft); }); }); // 3. 监听鼠标的抬起事件 $(document).mouseup(function () { $(document).off(\"mousemove\"); }); }, ","date":"2020-06-20","objectID":"/posts/notes/20200620/:19:1","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"音乐时间、进度条同步 音乐时间同步 通过timeupdate事件监听是否播放，正在播放时，会不断触发这个事件。在事件内部通过duration与currentTime获取当前时长和总时长。 于是可以在player类中新增加方法 musicTimeUpdate: function (callBack) { var $this = this; this.$audio.on(\"timeupdate\", function () { var duration = $this.audio.duration; var currentTime = $this.audio.currentTime; var timeStr = $this.formatDate(currentTime, duration); callBack(currentTime, duration, timeStr); }); }, // 格式化时间 formatDate: function (currentTime, duration) { // 结束时间 var endMin = parseInt(duration / 60); var endSec = parseInt(duration % 60); if (endMin \u003c 10) { endMin = \"0\" + endMin; } if (endSec \u003c 10) { endSec = \"0\" + endSec; } // 开始时间 var startMin = parseInt(currentTime / 60); var startSec = parseInt(currentTime % 60); if (startMin \u003c 10) { startMin = \"0\" + startMin; } if (startSec \u003c 10) { startSec = \"0\" + startSec; } return startMin + \":\" + startSec + \" / \" + endMin + \":\" + endSec; }, 在我们的index.js中只需要调用这个方法即可。 // 8. 监听播放的进度 player.musicTimeUpdate(function (currentTime, duration, timeStr) { // 同步时间 $(\".music_progress_time\").text(timeStr); }); 进度条同步 同样的为进度条新增方法setProgress setProgress: function (value) { if (value \u003c 0 || value \u003e 100) return; this.$progressLine.css({ width: value + \"%\", }); this.$progressDot.css({ left: value + \"%\", }); }, 这样完成后，在主函数中计算出当前时间所占比例即可调用此方法进行设置。 // 8. 监听播放的进度 player.musicTimeUpdate(function (currentTime, duration, timeStr) { // 同步进度条 // 计算播放比例 var value = (currentTime / duration) * 100; progress.setProgress(value); }); 因为使用了百分比进行修改元素，那么css的定位方式也需要修改一下： .music_progress_info .music_progress_bar { position: relative; } .music_progress_bar .music_progress_dot { position: absolute; } ","date":"2020-06-20","objectID":"/posts/notes/20200620/:20:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"点击进度条与歌曲同步 实现思路： 计算出总时长除以已播放时长的比例 将歌曲进度设置为歌曲时长乘以上一步的比例 progress.progressClick(function (value) { player.musicSeekTo(value); }); progress.progressMove(function (value) { player.musicSeekTo(value); }); musicSeekTo: function (value) { this.audio.currentTime = this.audio.duration * value; }, 为了实现拖拽时声音能够继续播放，因此将设置的方法改到mouseup事件中 progressMove: function (callBack) { var $this = this; var normalLeft, eventLeft; // 1. 监听的鼠标的按下事件 this.$progressBar.mousedown(function () { // 获取背景距离窗口默认的位置 normalLeft = $(this).offset().left; $this.isMove = true; // 2. 监听鼠标的移动事件 $(document).mousemove(function () { // 获取点击的位置距离窗口默认的位置 eventLeft = event.pageX; // 设置前景的宽度 $this.$progressLine.css(\"width\", eventLeft - normalLeft); $this.$progressDot.css(\"left\", eventLeft - normalLeft); }); }); // 3. 监听鼠标的抬起事件 $(document).mouseup(function () { $(document).off(\"mousemove\"); $this.isMove = false; // 计算进度条的比例 var value = (eventLeft - normalLeft) / $this.$progressBar.width(); callBack(value); }); }, ","date":"2020-06-20","objectID":"/posts/notes/20200620/:21:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"声音控制 声音控制与进度条控制几乎一致 var $voiceBar = $(\".music_voice_bar\"); var $voiceLine = $(\".music_voice_line\"); var $voiceDot = $(\".music_voice_dot\"); voicePregress = Progress($voiceBar, $voiceLine, $voiceDot); voicePregress.progressClick(function (value) { player.musicVoiceSeekTo(value); }); voicePregress.progressMove(function (value) { player.musicVoiceSeekTo(value); }); } 接下来为player类新增方法即可。 musicVoiceSeekTo: function (value) { // 取值0~1 this.audio.volume = value; }, ","date":"2020-06-20","objectID":"/posts/notes/20200620/:22:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"bug修复 音乐进度的跳转应为一个正常的数字 musicSeekTo: function (value) { if (isNaN(value)) return; this.audio.currentTime = this.audio.duration * value; }, 音量同理且音量范围为0~1 musicVoiceSeekTo: function (value) { if (isNaN(value)) return; if (value \u003c 0 || value \u003e 1) return; // 取值0~1 this.audio.volume = value; }, 拖拽超出范围 progressMove: function (callBack) { var barWidth = this.$progressBar.width(); // 1. 监听的鼠标的按下事件 this.$progressBar.mousedown(function () { $(document).mousemove(function () { var offset = eventLeft - normalLeft; if (offset \u003e= 0 \u0026\u0026 offset \u003c= barWidth) { // 设置前景的宽度 $this.$progressLine.css(\"width\", eventLeft - normalLeft); $this.$progressDot.css(\"left\", eventLeft - normalLeft); } }); }); ","date":"2020-06-20","objectID":"/posts/notes/20200620/:22:1","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"歌词设置 ","date":"2020-06-20","objectID":"/posts/notes/20200620/:23:0","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"歌词解析并且加载（创建） 解析创建一个新的类用于解析歌词。 (function (window) { function Lyric(path) { return new Lyric.prototype.init(path); } Lyric.prototype = { constructor: Lyric, init: function (path) { this.path = path; }, // 保存匹配的时间 times: [], // 保存匹配的歌词 lyrics: [], loadLyric: function (callBack) { var $this = this; $.ajax({ url: $this.path, dataType: \"text\", success: function (data) { $this.pareLyric(data); callBack(); }, error: function (e) {}, }); }, // 解析歌词的方法 pareLyric: function (data) { var $this = this; var array = data.split(\"\\n\"); // 正则表达式匹配内容 var timeReg = /\\[(\\d*:\\d*\\.\\d*)\\]/; // 遍历取出每一条歌词 $.each(array, function (index, ele) { // 处理歌词 var lrc = ele.split(\"]\")[1]; // 排除空字符串(没有歌词) if (lrc.length == 1) return true; $this.lyrics.push(lrc); var res = timeReg.exec(ele); if (res == null) return true; var timeStr = res[1]; var res2 = timeStr.split(\":\"); var min = parseInt(res2[0]) * 60; var sec = parseFloat(res2[1]); var time = parseFloat(Number(min + sec).toFixed(2)); $this.times.push(time); }); console.log($this.times); console.log($this.lyrics); }, }; Lyric.prototype.init.prototype = Lyric.prototype; window.Lyric = Lyric; })(window); 接下来只需要在自己的JavaScript中初始化这个类并且调用方法即可。 // 3. 初始化歌词信息 function initMusicLyric(music) { var lyric = new Lyric(music.link_lrc); var $lryicContainer = $(\".song_lyric\"); lyric.loadLyric(function () { // 创建歌词列表 $.each(lyric.lyrics, function (index, ele) { var $item = $(\"\u003cli\u003e\" + ele + \"\u003c/li\u003e\"); $lryicContainer.append($item); }); }); } 创建好了之后，还需要对样式进行一点点小的修改 .content_right .song_lyric { height: 150px; overflow: hidden; } ","date":"2020-06-20","objectID":"/posts/notes/20200620/:23:1","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"歌词同步 歌词同步需要在监听播放的进度中去设置 // 8. 监听播放的进度 player.musicTimeUpdate(function (currentTime, duration, timeStr) { // 实现歌词的同步 var index = lyric.currentIndex(currentTime); var $item = $(\".song_lyric li\").eq(index); $item.addClass(\"cur\"); $item.siblings().removeClass(\"cur\"); if (index \u003c= 2) return; $(\".song_lyric\").css({ marginTop: (-index + 2) * 30, }); }); 因为使用了margin-top滚动歌词，那么需要将html也该动。 \u003cdiv class=\"song_lyric_container\"\u003e \u003cul class=\"song_lyric\"\u003e\u003c/ul\u003e \u003c/div\u003e 为了实现切换歌曲时，歌词也可以切换，也需要在切换歌曲时将保存的歌曲信息也切换。 loadLyric: function (callBack) { $this.times = []; $this.lyrics = []; }, function initMusicLyric(music) { $lryicContainer.html(\"\"); } $(\".content_list\").delegate(\".list_menu_play\", \"click\", function () { // 3.7切换歌词信息 initMusicLyric($item.get(0).music); }); ","date":"2020-06-20","objectID":"/posts/notes/20200620/:23:2","tags":null,"title":"八、jQuery的QQ音乐播放器","uri":"/posts/notes/20200620/"},{"categories":["notes"],"content":"在线案例显示：狂拍灰太狼 ","date":"2020-06-18","objectID":"/posts/notes/20200618/:0:0","tags":null,"title":"七、jQuery狂拍大灰狼案例","uri":"/posts/notes/20200618/"},{"categories":["notes"],"content":"首页布局 ","date":"2020-06-18","objectID":"/posts/notes/20200618/:1:0","tags":null,"title":"七、jQuery狂拍大灰狼案例","uri":"/posts/notes/20200618/"},{"categories":["notes"],"content":"基本布局 完成首页的布局，背景使用了一张图片。其余元素，图中已经标出。 \u003cdiv class=\"container\"\u003e \u003ch1\u003e0\u003c/h1\u003e \u003cdiv class=\"progress\"\u003e\u003c/div\u003e \u003cbutton class=\"start\"\u003e开始游戏\u003c/button\u003e \u003cdiv class=\"rules\"\u003e游戏规则\u003c/div\u003e \u003c/div\u003e * { margin: 0; height: 0; } .container { width: 320px; height: 480px; background: url(\"https://tva1.sinaimg.cn/large/005B3XPgly1gfw7dh267lj308w0dc759.jpg\") no-repeat 0 0; margin: 50px auto; position: relative; } .container\u003eh1 { color: white; margin-left: 60px; } .container\u003e.progress { width: 180px; height: 16px; background: url('https://tva1.sinaimg.cn/large/005B3XPgly1gfw7dh7tu4j305000gt8j.jpg') no-repeat 0 0; position: absolute; top: 66px; left: 63px; } .container\u003e.start { width: 150px; height: 35px; /* line-height: 35px; */ text-align: center; color: white; background: linear-gradient(#e55c3D, #c50000); border-radius: 20px; border: none; font-size: 20px; position: absolute; top: 320px; left: 50%; margin-left: -75px; outline: none; cursor: pointer; } .container\u003e.rules { width: 100%; height: 20px; background-color: #ccc; position: absolute; left: 0; bottom: 0; text-align: center; } ","date":"2020-06-18","objectID":"/posts/notes/20200618/:1:1","tags":null,"title":"七、jQuery狂拍大灰狼案例","uri":"/posts/notes/20200618/"},{"categories":["notes"],"content":"其他布局 游戏规则页面 这个页面很简单，一个蒙版即可。 .container\u003e.rule { width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); position: absolute; left: 0; top: 0; padding-top: 100px; box-sizing: border-box; text-align: center; /* display: none; */ } .container\u003e.rule\u003ep { line-height: 50px; color: white;a } .container\u003e.rule\u003ea { color: red; } \u003cdiv class=\"rule\"\u003e \u003cp\u003e游戏规则：\u003c/p\u003e \u003cp\u003e1. 游戏时间60S\u003c/p\u003e \u003cp\u003e2. 拼手速：殴打灰太狼+10分\u003c/p\u003e \u003cp\u003e3. 殴打小灰灰-10分\u003c/p\u003e \u003ca href=\"#\"\u003e【关闭】\u003c/a\u003e \u003c/div\u003e 游戏结束页面 .container\u003e.mask { width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); position: absolute; left: 0; top: 0; padding-top: 200px; box-sizing: border-box; text-align: center; /* display: none; */ } .container\u003e.mask\u003eh1 { color: #ff4500; text-shadow: 3px 3px 0 #fff; } .container\u003e.mask\u003ebutton { width: 150px; height: 35px; /* line-height: 35px; */ text-align: center; color: white; background: linear-gradient(#74accf, #007ddc); border-radius: 20px; border: none; font-size: 20px; position: absolute; top: 320px; left: 50%; margin-left: -75px; outline: none; cursor: pointer; } \u003cdiv class=\"mask\"\u003e \u003ch1\u003eGAME OVER\u003c/h1\u003e \u003cbutton\u003e重新开始\u003c/button\u003e \u003c/div\u003e ","date":"2020-06-18","objectID":"/posts/notes/20200618/:1:2","tags":null,"title":"七、jQuery狂拍大灰狼案例","uri":"/posts/notes/20200618/"},{"categories":["notes"],"content":"完整代码 至此已经完成了静态页面的布局。 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } .container { width: 320px; height: 480px; background: url(\"https://tva1.sinaimg.cn/large/005B3XPgly1gfw7dh267lj308w0dc759.jpg\") no-repeat 0 0; margin: 50px auto; position: relative; } .container\u003eh1 { color: white; margin-left: 60px; } .container\u003e.progress { width: 180px; height: 16px; background: url('https://tva1.sinaimg.cn/large/005B3XPgly1gfw7dh7tu4j305000gt8j.jpg') no-repeat 0 0; position: absolute; top: 66px; left: 63px; } .container\u003e.start { width: 150px; height: 35px; /* line-height: 35px; */ text-align: center; color: white; background: linear-gradient(#e55c3D, #c50000); border-radius: 20px; border: none; font-size: 20px; position: absolute; top: 320px; left: 50%; margin-left: -75px; outline: none; cursor: pointer; } .container\u003e.rules { width: 100%; height: 20px; background-color: #ccc; position: absolute; left: 0; bottom: 0; text-align: center; } /* 游戏规则 */ .container\u003e.rule { width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); position: absolute; left: 0; top: 0; padding-top: 100px; box-sizing: border-box; text-align: center; display: none; } .container\u003e.rule\u003ep { line-height: 50px; color: white; } .container\u003e.rule\u003ea { color: red; } /* 游戏结束 */ .container\u003e.mask { width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); position: absolute; left: 0; top: 0; padding-top: 200px; box-sizing: border-box; text-align: center; /* display: none; */ } .container\u003e.mask\u003eh1 { color: #ff4500; text-shadow: 3px 3px 0 #fff; } .container\u003e.mask\u003ebutton { width: 150px; height: 35px; /* line-height: 35px; */ text-align: center; color: white; background: linear-gradient(#74accf, #007ddc); border-radius: 20px; border: none; font-size: 20px; position: absolute; top: 320px; left: 50%; margin-left: -75px; outline: none; cursor: pointer; } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"container\"\u003e \u003ch1\u003e0\u003c/h1\u003e \u003cdiv class=\"progress\"\u003e\u003c/div\u003e \u003cbutton class=\"start\"\u003e开始游戏\u003c/button\u003e \u003cdiv class=\"rules\"\u003e游戏规则\u003c/div\u003e \u003cdiv class=\"rule\"\u003e \u003cp\u003e游戏规则：\u003c/p\u003e \u003cp\u003e1. 游戏时间60S\u003c/p\u003e \u003cp\u003e2. 拼手速：殴打灰太狼+10分\u003c/p\u003e \u003cp\u003e3. 殴打小灰灰-10分\u003c/p\u003e \u003ca href=\"#\"\u003e【关闭】\u003c/a\u003e \u003c/div\u003e \u003cdiv class=\"mask\"\u003e \u003ch1\u003eGAME OVER\u003c/h1\u003e \u003cbutton\u003e重新开始\u003c/button\u003e \u003c/div\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-06-18","objectID":"/posts/notes/20200618/:1:3","tags":null,"title":"七、jQuery狂拍大灰狼案例","uri":"/posts/notes/20200618/"},{"categories":["notes"],"content":"基本页面的显示隐藏 ","date":"2020-06-18","objectID":"/posts/notes/20200618/:2:0","tags":null,"title":"七、jQuery狂拍大灰狼案例","uri":"/posts/notes/20200618/"},{"categories":["notes"],"content":"游戏规则的显示与隐藏 利用jQuery（fadeIn与fadeOut方法）很容易就能实现。 找到被点击的按钮，并绑定事件 将需要被显示/隐藏的元素进行fadeIn或fadeOut方法即可。 // 1. 游戏规则的点击 $('.rules').click(function () { $('.rule').stop().fadeIn(100) }) // 2. 关闭按钮的点击 $('.close').click(function () { $('.rule').stop().fadeOut(100) }) ","date":"2020-06-18","objectID":"/posts/notes/20200618/:2:1","tags":null,"title":"七、jQuery狂拍大灰狼案例","uri":"/posts/notes/20200618/"},{"categories":["notes"],"content":"开始与重新开始 游戏开始涉及到的内容分别是： 按钮消失 同样的调用fadeOut方法即可 进度条开始逐渐减少 使用计数器，将宽度逐渐减少即可。 // 3. 游戏开始按钮点击 $('.start').click(function () { $(this).stop().fadeOut(100) // 调用处理进度条的方法 progressHandle() }) 由于重新开始按钮的事件与开始事件几乎一致，因此同会调用处理进度条的事件。但重新开始时需要将进度条的进度重新赋值为100%。因此，在进入函数时，先将进度条置为100%即可实现复用。 \r // 定义处理进度条的方法 function progressHandle() { // 重新设置进度条的宽度 $('.progress').css({ width: 180 }) // 使用定时器处理进度条 var timer = setInterval(function () { // 拿到进度条当前的宽度 var progressWidth = $('.progress').width() // 减少当前宽度 progressWidth -= 10 // 重新赋值宽度 $('.progress').css({ width: progressWidth }) // 监听进度条是否走完 if (progressWidth \u003c= 0) { // 关闭定时器 clearInterval(timer) $('.mask').stop().fadeIn(100) } }, 100) } ","date":"2020-06-18","objectID":"/posts/notes/20200618/:2:2","tags":null,"title":"七、jQuery狂拍大灰狼案例","uri":"/posts/notes/20200618/"},{"categories":["notes"],"content":"重新开始 完成了处理进度条事件后，重新开始只需要调用此事件即可。 // 4. 重新开始按钮 $('.reStart').click(function () { $('.mask').stop().fadeOut(100) progressHandle() }) ","date":"2020-06-18","objectID":"/posts/notes/20200618/:2:3","tags":null,"title":"七、jQuery狂拍大灰狼案例","uri":"/posts/notes/20200618/"},{"categories":["notes"],"content":"随机位置和图片 前期准备 \r 一个函数，专门用户灰太狼动画的显示 function startWolfAnimation() {} 一个数组用于存储灰太狼的图片 var wolf_1 = [ \"https://ae04.alicdn.com/kf/U6d7418e287294bb88d0461d6c27bfcd82.jpg\", \"https://ae02.alicdn.com/kf/Ud511a9efcffa4fe6b2a100aa7513f3e8H.jpg\", \"https://ae01.alicdn.com/kf/U8de07ee534de40b092bb37895a58074bW.jpg\", \"https://ae01.alicdn.com/kf/U65e24e9eea4c4823884a994a4943f5f3H.jpg\", \"https://ae04.alicdn.com/kf/U059507c66fb6466eb8ca6381c794e213I.jpg\", \"https://ae03.alicdn.com/kf/U83f4455be089478b8beaec3153cc1073C.jpg\", \"https://ae02.alicdn.com/kf/U7104f8f282b54523bb782f09a371454bI.jpg\", \"https://ae02.alicdn.com/kf/U9a8f28c4af7846b99166155c31a9f5d6H.jpg\", \"https://ae02.alicdn.com/kf/U788c378b55a046d7a69e460ea7723f43l.jpg\", \"https://ae02.alicdn.com/kf/U707e83428bfd4fcca7f3e1ef732f642dF.jpg\", ] 一个数组用于存储小灰灰的图片 var wolf_2 = [ 'https://ae01.alicdn.com/kf/U00654478fdbc42bcb157dc88ca49d535v.jpg', 'https://ae03.alicdn.com/kf/Ufffbe0e563f2422f8468dfe07e6944cbj.jpg', 'https://ae01.alicdn.com/kf/Ua6fc5df7037c4bb4aa9c4140851fa6bfo.jpg', 'https://ae01.alicdn.com/kf/U52169e31a945465c946c00cd3a23f96dF.jpg', 'https://ae01.alicdn.com/kf/Ub2f779675ad04432a2bed6153f59a4c6B.jpg', 'https://ae02.alicdn.com/kf/U8a0ef3b264f946fbacfb905d96bbc60em.jpg', 'https://ae02.alicdn.com/kf/U2c445d659e324b9c97593f47f11a5785V.jpg', 'https://ae03.alicdn.com/kf/U60c99e7d8f3844b18f33f1b3bee649c8M.jpg', 'https://ae02.alicdn.com/kf/U184d2a419e824317aac79ee85762479f9.jpg', 'https://ae02.alicdn.com/kf/Ufce9406da7ed4515a8e71c9c4d161697r.jpg', ] 一个数组用于存储位置 由于位置包含左与右，因此我们在数组中存储的是对象。 var arrPos = [ { left: \"100px\", top: '115px' }, { left: \"20px\", top: '160px' }, { left: \"190px\", top: '142px' }, { left: \"105px\", top: '193px' }, { left: \"19px\", top: '221px' }, { left: \"202px\", top: '212px' }, { left: \"120px\", top: '275px' }, { left: \"30px\", top: '295px' }, { left: \"209px\", top: '297px' }, ] ","date":"2020-06-18","objectID":"/posts/notes/20200618/:3:0","tags":null,"title":"七、jQuery狂拍大灰狼案例","uri":"/posts/notes/20200618/"},{"categories":["notes"],"content":"设置随机位置与随机图片 随机位置 因为已经有了一个所有位置的数组，因此只要随机取其中一个即可。 Math.round(Math.random() * 8) 随机图片 与随机位置同理，Math.round(Math.random()) 能够获取到随机位置与图片后，那么接下来要做的就是： 创建一个图片元素 var $wolfImage = $('\u003cimg src=\"\"\u003e') 设置图片的位置 // 获取随机图片的位置 var posIndex = Math.round(Math.random() * 8) // 4. 设置图片显示的位置 $wolfImage.css({ position: 'absolute', left: arrPos[posIndex].left, top: arrPos[posIndex].top }) 设置图片的内容 // 随机获取数组类型 var wolf_type = Math.round(Math.random()) == 0 ? wolf_1 : wolf_2 // 5. 设置图片内容 $wolfImage.attr('src', wolf_type[5]) 将图片添加到页面 // 6. 将图片添加到页面上 $('.container').append($wolfImage) ","date":"2020-06-18","objectID":"/posts/notes/20200618/:3:1","tags":null,"title":"七、jQuery狂拍大灰狼案例","uri":"/posts/notes/20200618/"},{"categories":["notes"],"content":"实现动画 点击开始按钮后 执行动画，并且需要判断图片显示（不能显示被打的图片）。当图片显示完成后，删除图片。因此，在设置图片内容时可以为其开启定时器。 // 5. 设置图片内容 var wolfIndex = 0 wolfTimer = setInterval(function () { if (wolfIndex \u003e 5) { $wolfImage.remove() clearInterval(wolfTimer) startWolfAnimation() } $wolfImage.attr('src', wolf_type[wolfIndex]) wolfIndex++; }, 300) function startWolfAnimation() { // 灰太狼图片 var wolf_1 = [ \"https://ae04.alicdn.com/kf/U6d7418e287294bb88d0461d6c27bfcd82.jpg\", \"https://ae02.alicdn.com/kf/Ud511a9efcffa4fe6b2a100aa7513f3e8H.jpg\", \"https://ae01.alicdn.com/kf/U8de07ee534de40b092bb37895a58074bW.jpg\", \"https://ae01.alicdn.com/kf/U65e24e9eea4c4823884a994a4943f5f3H.jpg\", \"https://ae04.alicdn.com/kf/U059507c66fb6466eb8ca6381c794e213I.jpg\", \"https://ae03.alicdn.com/kf/U83f4455be089478b8beaec3153cc1073C.jpg\", \"https://ae02.alicdn.com/kf/U7104f8f282b54523bb782f09a371454bI.jpg\", \"https://ae02.alicdn.com/kf/U9a8f28c4af7846b99166155c31a9f5d6H.jpg\", \"https://ae02.alicdn.com/kf/U788c378b55a046d7a69e460ea7723f43l.jpg\", \"https://ae02.alicdn.com/kf/U707e83428bfd4fcca7f3e1ef732f642dF.jpg\", ] // 小灰灰图片 var wolf_2 = [ 'https://ae01.alicdn.com/kf/U00654478fdbc42bcb157dc88ca49d535v.jpg', 'https://ae03.alicdn.com/kf/Ufffbe0e563f2422f8468dfe07e6944cbj.jpg', 'https://ae01.alicdn.com/kf/Ua6fc5df7037c4bb4aa9c4140851fa6bfo.jpg', 'https://ae01.alicdn.com/kf/U52169e31a945465c946c00cd3a23f96dF.jpg', 'https://ae01.alicdn.com/kf/Ub2f779675ad04432a2bed6153f59a4c6B.jpg', 'https://ae02.alicdn.com/kf/U8a0ef3b264f946fbacfb905d96bbc60em.jpg', 'https://ae02.alicdn.com/kf/U2c445d659e324b9c97593f47f11a5785V.jpg', 'https://ae03.alicdn.com/kf/U60c99e7d8f3844b18f33f1b3bee649c8M.jpg', 'https://ae02.alicdn.com/kf/U184d2a419e824317aac79ee85762479f9.jpg', 'https://ae02.alicdn.com/kf/Ufce9406da7ed4515a8e71c9c4d161697r.jpg', ] // 随机位置 var arrPos = [ { left: \"100px\", top: '115px' }, { left: \"20px\", top: '160px' }, { left: \"190px\", top: '142px' }, { left: \"105px\", top: '193px' }, { left: \"19px\", top: '221px' }, { left: \"202px\", top: '212px' }, { left: \"120px\", top: '275px' }, { left: \"30px\", top: '295px' }, { left: \"209px\", top: '297px' }, ] // 3. 创建一个图片 var $wolfImage = $('\u003cimg src=\"\" class=\"wolfImage\"\u003e') // 获取随机图片的位置 var posIndex = Math.round(Math.random() * 8) // 4. 设置图片显示的位置 $wolfImage.css({ position: 'absolute', left: arrPos[posIndex].left, top: arrPos[posIndex].top }) // 随机获取数组类型 var wolf_type = Math.round(Math.random()) == 0 ? wolf_1 : wolf_2 // 5. 设置图片内容 var wolfIndex = 0 wolfTimer = setInterval(function () { if (wolfIndex \u003e 5) { $wolfImage.remove() clearInterval(wolfTimer) startWolfAnimation() } $wolfImage.attr('src', wolf_type[wolfIndex]) wolfIndex++; }, 300) // 6. 将图片添加到页面上 $('.container').append($wolfImage) } 定时器需要在全局声明，因为游戏结束后需要清楚这个定时器，否则当游戏结束时，还是会出现动画。 游戏结束 游戏结束后，应当停止动画，并且清除已存在的灰太狼图片。 // 监听进度条是否走完 if (progressWidth \u003c= 0) { // 关闭开始动画的定时器 clearInterval(timer) $('.mask').stop().fadeIn(100) // 停止灰太狼动画 stopWolfAnimation() } }, 100) // 停止灰太狼动画函数 function stopWolfAnimation() { $('.wolfImage').remove() clearInterval(wolfTimer) } 重新开始 重新开始按钮执行逻辑其实就是在执行一遍开始动画。 // 4. 重新开始按钮 $('.reStart').click(function () { $('.mask').stop().fadeOut(100) progressHandle() // 处理灰太狼动画的方法 startWolfAnimation() }) ","date":"2020-06-18","objectID":"/posts/notes/20200618/:4:0","tags":null,"title":"七、jQuery狂拍大灰狼案例","uri":"/posts/notes/20200618/"},{"categories":["notes"],"content":"游戏规则的实现 游戏规则的触发应该是图片被点击时，因此在开始动画的函数中新增一个游戏规则的方法。并传入图片作为参数。 // 7. 调用处理游戏规则的方法 gameRules($wolfImage); 为了判断被点击的图片是加分数还是减分数，将图片地址添加一个参数。 // 灰太狼图片 var wolf_1 = [ \"https://ae04.alicdn.com/kf/U6d7418e287294bb88d0461d6c27bfcd82.jpg?add\", \"https://ae02.alicdn.com/kf/Ud511a9efcffa4fe6b2a100aa7513f3e8H.jpg?add\", \"https://ae01.alicdn.com/kf/U8de07ee534de40b092bb37895a58074bW.jpg?add\", \"https://ae01.alicdn.com/kf/U65e24e9eea4c4823884a994a4943f5f3H.jpg?add\", \"https://ae04.alicdn.com/kf/U059507c66fb6466eb8ca6381c794e213I.jpg?add\", \"https://ae03.alicdn.com/kf/U83f4455be089478b8beaec3153cc1073C.jpg?add\", \"https://ae02.alicdn.com/kf/U7104f8f282b54523bb782f09a371454bI.jpg?add\", \"https://ae02.alicdn.com/kf/U9a8f28c4af7846b99166155c31a9f5d6H.jpg?add\", \"https://ae02.alicdn.com/kf/U788c378b55a046d7a69e460ea7723f43l.jpg?add\", \"https://ae02.alicdn.com/kf/U707e83428bfd4fcca7f3e1ef732f642dF.jpg?add\", ] // 小灰灰图片 var wolf_2 = [ 'https://ae01.alicdn.com/kf/U00654478fdbc42bcb157dc88ca49d535v.jpg?min', 'https://ae03.alicdn.com/kf/Ufffbe0e563f2422f8468dfe07e6944cbj.jpg?min', 'https://ae01.alicdn.com/kf/Ua6fc5df7037c4bb4aa9c4140851fa6bfo.jpg?min', 'https://ae01.alicdn.com/kf/U52169e31a945465c946c00cd3a23f96dF.jpg?min', 'https://ae01.alicdn.com/kf/Ub2f779675ad04432a2bed6153f59a4c6B.jpg?min', 'https://ae02.alicdn.com/kf/U8a0ef3b264f946fbacfb905d96bbc60em.jpg?min', 'https://ae02.alicdn.com/kf/U2c445d659e324b9c97593f47f11a5785V.jpg?min', 'https://ae03.alicdn.com/kf/U60c99e7d8f3844b18f33f1b3bee649c8M.jpg?min', 'https://ae02.alicdn.com/kf/U184d2a419e824317aac79ee85762479f9.jpg?min', 'https://ae02.alicdn.com/kf/Ufce9406da7ed4515a8e71c9c4d161697r.jpg?min', ] 使用本地链接无需添加，修改图片名即可。 替换当前动画 当被点击后，应该显示后五张图片。因此将第五步的设置图片内容所需要判断的索引修改为变量，并添加到全局变量。这样方便修改当前图片显示的索引。 // 5. 设置图片内容 window.wolfIndex = 0 window.wolfIndexEnd = 5 wolfTimer = setInterval(function () { if (wolfIndex \u003e wolfIndexEnd) { // ... } 判断加/减分数 拿到当前被点击图片，然后判断src属性是否包含add即可。如果包含说明是加分，否则就是减分。 // 拿到当前点击图片的地址 var $src = $(this).attr('src') var flag = $src.indexOf('add') \u003e= 0 // 根据图片类型增减分数 if (flag) { $('.score').text(parseInt($('.score').text()) + 10) } else { $('.score').text(parseInt($('.score').text()) - 10) } ","date":"2020-06-18","objectID":"/posts/notes/20200618/:5:0","tags":null,"title":"七、jQuery狂拍大灰狼案例","uri":"/posts/notes/20200618/"},{"categories":["notes"],"content":"完整代码 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } .container { width: 320px; height: 480px; background: url(\"https://tva1.sinaimg.cn/large/005B3XPgly1gfw7dh267lj308w0dc759.jpg\") no-repeat 0 0; margin: 50px auto; position: relative; } .container \u003e h1 { color: white; margin-left: 60px; } .container \u003e .progress { width: 180px; height: 16px; background: url(\"https://tva1.sinaimg.cn/large/005B3XPgly1gfw7dh7tu4j305000gt8j.jpg\") no-repeat 0 0; position: absolute; top: 66px; left: 63px; } .container \u003e .start { width: 150px; height: 35px; /* line-height: 35px; */ text-align: center; color: white; background: linear-gradient(#e55c3d, #c50000); border-radius: 20px; border: none; font-size: 20px; position: absolute; top: 320px; left: 50%; margin-left: -75px; outline: none; cursor: pointer; } .container \u003e .rules { width: 100%; height: 20px; background-color: #ccc; position: absolute; left: 0; bottom: 0; text-align: center; } /* 游戏规则 */ .container \u003e .rule { width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); position: absolute; left: 0; top: 0; padding-top: 100px; box-sizing: border-box; text-align: center; display: none; } .container \u003e .rule \u003e p { line-height: 50px; color: white; } .container \u003e .rule \u003e a { color: red; } /* 游戏结束 */ .container \u003e .mask { width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); position: absolute; left: 0; top: 0; padding-top: 200px; box-sizing: border-box; text-align: center; display: none; } .container \u003e .mask \u003e h1 { color: #ff4500; text-shadow: 3px 3px 0 #fff; } .container \u003e .mask \u003e button { width: 150px; height: 35px; /* line-height: 35px; */ text-align: center; color: white; background: linear-gradient(#74accf, #007ddc); border-radius: 20px; border: none; font-size: 20px; position: absolute; top: 320px; left: 50%; margin-left: -75px; outline: none; cursor: pointer; } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { var wolfTimer; // 1. 游戏规则的点击 $(\".rules\").click(function () { $(\".rule\").stop().fadeIn(100); }); // 2. 关闭按钮的点击 $(\".close\").click(function () { $(\".rule\").stop().fadeOut(100); }); // 3. 游戏开始按钮点击 $(\".start\").click(function () { $(this).stop().fadeOut(100); // 调用处理进度条的方法 progressHandle(); // 调用处理灰太狼动画的方法 startWolfAnimation(); }); // 4. 重新开始按钮 $(\".reStart\").click(function () { $(\".mask\").stop().fadeOut(100); progressHandle(); // 处理灰太狼动画的方法 startWolfAnimation(); }); // 定义处理进度条的方法 function progressHandle() { // 重新设置进度条的宽度 $(\".progress\").css({ width: 180, }); // 使用定时器处理进度条 var timer = setInterval(function () { // 拿到进度条当前的宽度 var progressWidth = $(\".progress\").width(); // 减少当前宽度 progressWidth -= 1; // 重新赋值宽度 $(\".progress\").css({ width: progressWidth, }); // 监听进度条是否走完 if (progressWidth \u003c= 0) { // 关闭定时器 clearInterval(timer); $(\".mask\").stop().fadeIn(100); // 停止灰太狼动画 stopWolfAnimation(); } }, 100); } // 定义处理灰太狼的动画的方法 function startWolfAnimation() { // 灰太狼图片 var wolf_1 = [ \"https://ae04.alicdn.com/kf/U6d7418e287294bb88d0461d6c27bfcd82.jpg?add\", \"https://ae02.alicdn.com/kf/Ud511a9efcffa4fe6b2a100aa7513f3e8H.jpg?add\", \"https://ae01.alicdn.com/kf/U8de07ee534de40b092bb37895a58074bW.jpg?add\", \"https://ae01.alicdn.com/kf/U65e24e9eea4c4823884a994a4943f5f3H.jpg?add\", \"https://ae04.alicdn.com/kf/U059507c66fb6466eb8ca6381c794e213I.jpg?add\", \"https://ae03.alicdn.com/kf/U83f4455be089478b8beaec3153cc1073C.jpg?add\", \"https://ae02.alicdn.com/kf/U7104f8f282b54523bb782f09a371454bI.jpg?add\", \"https://ae02.alicdn.com/kf/U9a8f28c4af7846b99166155c31a9f5d6H.jpg?add\", \"https://ae02.alicdn.com/kf/U788c378b55a046d7a69e460ea7723f43l.jpg?add\", \"https://ae02.alicdn.com/kf/U707e83428bfd4fcca7f3e1ef732f642dF.jpg?add\", ]; // 小灰灰图片 var wolf_2 = [ \"https://ae01.alicdn.com/kf/U00654478fdbc42bcb157dc88ca49d535v.jpg?min\", \"https://ae03.alicdn.com/kf/Ufffbe0e563f2422f8468dfe07e6944cbj.jpg?min\", \"https://ae01.alicdn.com","date":"2020-06-18","objectID":"/posts/notes/20200618/:6:0","tags":null,"title":"七、jQuery狂拍大灰狼案例","uri":"/posts/notes/20200618/"},{"categories":["notes"],"content":"添加节点相关方法 ","date":"2020-06-17","objectID":"/posts/notes/20200617/:1:0","tags":null,"title":"六、jQuery节点操作","uri":"/posts/notes/20200617/"},{"categories":["notes"],"content":"内部插入 插入到节点最前面 // 方法1 $li.prependTo('ul') // 方法2（常用） $('ul').prepend($li) 添加到节点最后边 // 方法1 $li.appendTo('ul') // 方法2（常用） $('ul').append($li) ","date":"2020-06-17","objectID":"/posts/notes/20200617/:1:1","tags":null,"title":"六、jQuery节点操作","uri":"/posts/notes/20200617/"},{"categories":["notes"],"content":"外部插入 将元素添加到指定元素外部的后面 // 方法1 $li.insertAfter('ul') // 方法2（常用） $('ul').after($li) 会将元素添加到指定元素外部的前面 // 方法1 $li.insertBefore('ul') // 方法2（常用） $('ul').before($li) ","date":"2020-06-17","objectID":"/posts/notes/20200617/:1:2","tags":null,"title":"六、jQuery节点操作","uri":"/posts/notes/20200617/"},{"categories":["notes"],"content":"删除节点相关方法 remove()或detach() 删除指定元素，可传入参数。例如$('li').detach('.item')表示删除li下的.item元素 $('div').remove() $('li').detach('.item') 两个方法一样，都可以接收参数。 empty() 删除指定元素的内容和子元素,指定元素自身不会被删除 $('div').empty() ","date":"2020-06-17","objectID":"/posts/notes/20200617/:2:0","tags":null,"title":"六、jQuery节点操作","uri":"/posts/notes/20200617/"},{"categories":["notes"],"content":"替换节点相关方法 replaceWith()与replaceAll()都会替换所有匹配的元素为指定元素。 // 1. 新建元素 var $h6 = $('\u003ch6\u003e我是标题6\u003c/h6\u003e') // 2. 替换所有匹配的元素为指定元素 $('h1').replaceWith($h6) // 或者如下写法 // $h6.replaceAll('h1') ","date":"2020-06-17","objectID":"/posts/notes/20200617/:3:0","tags":null,"title":"六、jQuery节点操作","uri":"/posts/notes/20200617/"},{"categories":["notes"],"content":"复制节点相关方法 复制节点使用clone()方法，传入一个布尔值。true表示深复制，false表示浅复制。 浅复制 $('button').eq(0).click(function () { // 1. 浅复制一个元素 var $li = $('li:first').clone(false) // 将复制的元素加入的ul中 $('ul').append($li) }) 深复制 $('button').eq(1).click(function () { // 1. 深复制一个元素 var $li = $('li:first').clone(true) // 将复制的元素加入的ul中 $('ul').append($li) }) 深复制、浅复制的区别 \r浅复制只会复制元素本身，无法复制原元素绑定的事件。而深复制则会连同绑定事件一同复制。 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { $('button').eq(0).click(function () { // 1. 浅复制一个元素 var $li = $('li:first').clone(false) // 将复制的元素假如的ul中 $('ul').append($li) }) $('button').eq(1).click(function () { // 1. 深复制一个元素 var $li = $('li:first').clone(true) // 将复制的元素假如的ul中 $('ul').append($li) }) $('li').click(function () { alert(1) }) }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton\u003e浅复制节点\u003c/button\u003e \u003cbutton\u003e深复制节点\u003c/button\u003e \u003cul\u003e \u003cli\u003e我是第1个li\u003c/li\u003e \u003cli\u003e我是第2个li\u003c/li\u003e \u003cli\u003e我是第3个li\u003c/li\u003e \u003cli\u003e我是第4个li\u003c/li\u003e \u003cli\u003e我是第5个li\u003c/li\u003e \u003c/ul\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-06-17","objectID":"/posts/notes/20200617/:4:0","tags":null,"title":"六、jQuery节点操作","uri":"/posts/notes/20200617/"},{"categories":["notes"],"content":"新浪微博案例 jQuery部分逻辑思路 监听发送按钮 有内容 生成DIV，并添加 无内容 按钮禁止点击 生成div 获取用户输入内容，将内容作为DIV的内容进行生成 插入DIV 获取插入容器，在其顶部插入 顶/踩/删除 顶/踩 获取标签内容并转化为整型然后加1 删除 利用parents()方法，在其传入需要获取的父元素选择器（parents('.info')），即可获取相应的父元素。 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } html { width: 100%; height: 100%; } body { background: url('https://ae04.alicdn.com/kf/Ud1fa6cf847c446e5a65e91f43081d503V.jpg') no-repeat center 0; } .nav { width: 100%; height: 48px; } .mav\u003eimg { width: 100%; } .content { width: 1000px; overflow: hidden; background: #ebdbd4; margin: 200px auto 0 auto; } .content\u003e.left { float: left; width: 150px; } .content\u003e.right { float: right; width: 240px; } .content\u003e.center { float: left; width: 600px; height: 168px; background: url(https://ae03.alicdn.com/kf/U7ed12369ffd74c2a9ca1d46907ce3eb9G.jpg)no-repeat 0 0; background-size: 600px 168px; } .center\u003e.comment { width: 570px; height: 73px; margin-left: 15px; margin-top: 45px; resize: none; outline: none; border: none; } .center\u003e.send { width: 82px; height: 30px; margin-top: 4px; margin-left: 506px; border: none; background: #fd8040; cursor: pointer; outline: none; color: white; } .content\u003e.messageList { width: 600px; /* height: 600px; */ background: white; float: left; } .messageList\u003e.info { padding: 10px 20px; border-bottom: 2px solid #ccc; } .info\u003e.infoText { line-height: 25px; margin-bottom: 10px; } .info\u003e.infoOperation { width: 100%; overflow: hidden; } .infoOperation\u003e.infoTime { float: left; font-size: 13px; color: #ccc; } .infoOperation\u003e.infoHandle { float: right; font-size: 13px; } .infoHandle\u003ea { text-decoration: none; color: #ccc; background: url(https://ae04.alicdn.com/kf/Uf79214b661074c6ca3416eccddeb4e61D.jpg)no-repeat 0 0; padding-left: 25px; margin-left: 10px; } .infoHandle\u003ea:nth-child(2) { background-position: 0 -17px; } .infoHandle\u003ea:nth-child(3) { background-position: 0 -33px; } .page { width: 1000px; height: 40px; margin: 0 auto; text-align: right; background-color: #9f5024; padding: 10px; box-sizing: border-box; } .page\u003ea { text-decoration: none; display: inline-block; width: 20px; height: 20px; border: 1px solid #ccc; line-height: 20px; color: #2b2b2b; } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { // 0。 监听内容的实时输入 $('body').delegate('.comment', 'propertychange input', function () { // 判断是否输入了内容 if ($(this).val().length \u003e 0) { $('.send').prop('disabled', false) } else { $('.send').prop('disabled', true) } }) // 1. 监听发布按钮的点击 $('.send').click(function () { // 拿到用户输入的内容 var $text = $('.comment').val() // 根据内容创建节点 var $weibo = createEle($text) // 插入微博 $('.messageList').prepend($weibo) }) // 2. 监听顶点击 $('body').delegate('.infoUp', 'click', function () { $(this).text(parseInt($(this).text()) + 1) }) // 3. 监听踩点击 $('body').delegate('.infoDown', 'click', function () { $(this).text(parseInt($(this).text()) + 1) }) // 4. 监听删除点击 $('body').delegate('.infoDel', 'click', function () { $(this).parents('.info').remove() }) function createEle(text) { var $weibo = $('\u003cdiv class=\"info\"\u003e\u003cp class= \"infoText\" \u003e ' + text + '\u003c/p \u003e\u003cp class=\"infoOperation\"\u003e\u003cspan class=\"infoTime\"\u003e' + formatDate() + '\u003c/span\u003e\u003cspan class=\"infoHandle\"\u003e\u003ca href=\"javasript:;\" class=\"infoUp\"\u003e0\u003c/a\u003e\u003ca href=\"javasript: ;\" class=\"infoDown\"\u003e0\u003c/a\u003e\u003ca href=\"javasript: ;\" class=\"infoDel\"\u003e删除\u003c/a\u003e\u003c/span\u003e\u003c/p\u003e\u003c/div \u003e ') return $weibo } // 生成时间 function formatDate() { var date = new Date() var arr = [ date.getUTCFullYear() + '-', date.getMonth() + 1 + '-', date.getDate() + ' ', date.getHours() + ':', date.getMinutes() + ':', date.getSeconds() ] return arr.join(\"\") } }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"nav\"\u003e \u003cimg src=\"https://ae02.alicdn.com/kf/U8c9c77c71a30441aa2e439c2552c6fe6q.jpg\" alt=\"\"\u003e \u003c/div\u003e \u003cdiv class=\"content\"\u003e \u003cimg src=\"https://ae02.alicdn.com/kf/Ua155fa993f7641a89d83d88af96a6df2Z.jpg\" alt=\"\" class=\"left\"\u003e \u003cdiv class=\"cente","date":"2020-06-17","objectID":"/posts/notes/20200617/:5:0","tags":null,"title":"六、jQuery节点操作","uri":"/posts/notes/20200617/"},{"categories":["notes"],"content":"显示隐藏动画 显示show()动画，隐藏动画hide()，切换动画toggle() 这三个方法都可以传入参数： 一个参数 代表动画完成的时间 两个参数 第一个表示动画完成的时间，第二个参数表示动画完成后执行的回调函数 $(function () { $('button').eq(0).click(function () { $('div').show(1000, function () { alert('显示动画执行完毕') }) }) $('button').eq(1).click(function () { $('div').hide(1000, function () { alert('隐藏动画执行完毕') }) }) $('button').eq(2).click(function () { $('div').toggle(1000, function () { alert('切换动画执行完毕') }) }) }) 对联广告案例\r 监听网页滚动 当滚动到一定量时，展示图片否则隐藏图片 $(function () { // 1. 监听网页的滚动 $(window).scroll(function () { // 1.1 获取网页滚动的偏移位 var offset = $('html,body').scrollTop() // 1.2 判断网页是否滚动到了指定的位置 if (offset \u003e= 500) { // 1.3 显示广告 $('img').show(1000) } else { $('img').hide(1000) } }) }) \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } .left { float: left; position: fixed; left: 0; top: 200px; } .right { float: right; position: fixed; right: 0; top: 200px; } img { display: none; } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { // 1. 监听网页的滚动 $(window).scroll(function () { // 1.1 获取网页滚动的偏移位 var offset = $('html,body').scrollTop() // 1.2 判断网页是否滚动到了指定的位置 if (offset \u003e= 500) { // 1.3 显示广告 $('img').show(1000) } else { $('img').hide(1000) } }) }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cimg src=\"https://ae03.alicdn.com/kf/Ub8d7c62873d74ebda173addf2b82d741T.jpg\" class=\"left\"\u003e \u003cimg src=\"https://ae03.alicdn.com/kf/Ub8d7c62873d74ebda173addf2b82d741T.jpg\" class=\"right\"\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-2/:1:0","tags":["jQuery"],"title":"五、jQuery动效","uri":"/posts/notes/20200616/20200615-2/"},{"categories":["notes"],"content":"展开收起动画 显示slideDown()动画，隐藏动画slideUp()，切换动画slideToggle() 这三个方法都可以传入参数： 一个参数 代表动画完成的时间 两个参数 第一个表示动画完成的时间，第二个参数表示动画完成后执行的回调函数 $('button').eq(0).click(function () { $('div').slideDown(1000, function () { alert('展开完毕') }) }) $('button').eq(1).click(function () { $('div').slideUp(1000, function () { alert('收起完毕') }) }) $('button').eq(1).click(function () { $('div').slideToggle(1000, function () { alert('切换完毕') }) }) 折叠菜单案例\r \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } .nav { list-style: none; width: 300px; margin: 100px auto; } .nav\u003eli { border: 1px solid #000; line-height: 35px; border-bottom: none; text-indent: 2em; position: relative; } .nav\u003eli:last-child { border-bottom: 1px solid #000; border-bottom-left-radius: 5px; border-bottom-right-radius: 5px; } .nav\u003eli:first-child { border-top-left-radius: 5px; border-top-right-radius: 5px; } .nav\u003eli\u003espan { background: url(\"https://ae02.alicdn.com/kf/U7eebc02d0d5e4be287d88baf368f0019S.jpg\") no-repeat center; display: inline-block; width: 32px; height: 32px; position: absolute; right: 10px; top: 5px; } .sub { display: none; } .sub\u003eli { list-style: none; background-color: mediumorchid; border: 1px solid white; } .sub\u003eli:hover { background-color: red; } .nav\u003e.current\u003espan { transform: rotate(90deg) } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { // 1. 监听一级菜单的点击事件 $('.nav\u003eli').click(function () { // 1.1 拿到二级菜单 var $sub = $(this).children('.sub') // 1.2 让二级菜单显示 $sub.slideDown(1000) // 1.3 拿到所有非当前二级菜单 var otherSub = $(this).siblings().children('.sub') console.log(otherSub) // 1.4 让所有非当前二级菜单收起 otherSub.slideUp(1000) // 1.5让被点击的一级菜单箭头旋转 $(this).addClass('current') // 1.6 让所有非一级菜单箭头还原 $(this).siblings().removeClass('current') }) }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cul class=\"nav\"\u003e \u003cli\u003e一级菜单\u003cspan\u003e\u003c/span\u003e \u003cul class=\"sub\"\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e一级菜单\u003cspan\u003e\u003c/span\u003e \u003cul class=\"sub\"\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e一级菜单\u003cspan\u003e\u003c/span\u003e \u003cul class=\"sub\"\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e一级菜单\u003cspan\u003e\u003c/span\u003e \u003cul class=\"sub\"\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e一级菜单\u003cspan\u003e\u003c/span\u003e \u003cul class=\"sub\"\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e一级菜单\u003cspan\u003e\u003c/span\u003e \u003cul class=\"sub\"\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e一级菜单\u003cspan\u003e\u003c/span\u003e \u003cul class=\"sub\"\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003e一级菜单\u003cspan\u003e\u003c/span\u003e \u003cul class=\"sub\"\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003cli\u003e二级菜单\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/body\u003e \u003c/html\u003e 下拉菜单案例\r在jQuery中，如果需要执行动画，建议在执行动画之前先调用stop方法，然后在执行动画。 当使用stop时： 不适用stop时： \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } .nav { list-style: none; width: 300px; height: 50px; background: red; margin: 100px auto; } .nav\u003eli { width: 100px; height: 50px; line-height: 50px; text-align: center; float: left; } .sub { list-style: none; background-color: royalblue; display: none } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { // 1. 监听一级菜单的移入事件 $('.nav\u003eli').mouseenter(function () { // 1.1 拿到二级菜单 var $sub = $(this).children('.sub') // 1.2 停止当前正在运动的动画 $sub.stop() // 1.3 让二级菜单展开 $sub.slideDown(1000) }) // 2. 监听一级菜单的移出事件 $('.nav\u003eli').mouseleave(function () { // 1.1 拿到二级菜单 var $sub = $(this).children('.sub') // 1.2 停止当前正在运动的动画 $sub.stop() // 1.3 让二级菜单收起 $sub.slideUp(1000) }) }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cul class=\"nav\"\u003e \u003cli\u003e一级菜单 \u003cul class=\"sub\"\u003e","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-2/:2:0","tags":["jQuery"],"title":"五、jQuery动效","uri":"/posts/notes/20200616/20200615-2/"},{"categories":["notes"],"content":"淡入淡出动画 fadeIn淡入 fadeOut淡出 fadeToggle切换 以上三个方法均可传入两个参数： 时间 回调函数 与上述几种方法相似 fadeTo淡入到··· 三个参数分别为：时间，淡入到（程度），回调函数 $('buton').eq(3).click(function () { $('div').fadeTo(1000, 0.5, function () { alert('淡入到完毕') }) }) 弹窗广告案例\r \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } .ad { position: fixed; right: 0; bottom: 0; display: none; } .ad\u003espan { display: inline-block; width: 30px; height: 30px; position: absolute; top: 0; right: 0; } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { // 1. 监听span的点击事件 $('span').click(function () { $('.ad').remove() }) // 2. 执行广告动画 $('.ad').stop().slideDown(1000).fadeOut(1000).fadeIn(1000) }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"ad\"\u003e \u003cimg src=\"https://ae03.alicdn.com/kf/U2f875afd3ec347f38fc58fc5a091f97dd.jpg\" alt=\"\"\u003e \u003cspan\u003e\u003c/span\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-2/:3:0","tags":["jQuery"],"title":"五、jQuery动效","uri":"/posts/notes/20200616/20200615-2/"},{"categories":["notes"],"content":"自定义动画 自定义动画的方法为animate，可接收三个或四个参数： 三个参数 三个参数分别为动画代码，时长，回调函数 $('button').eq(0).click(function () { $('.one').animate({ width: 500 }, 1000, function () { alert('自定义动画执行完毕') }) }) 四个参数 四个参数分别表示： 第一个参数 接收一个对象，可在对象中修改属性 第二个参数 指定动画时长 第三个参数 指定动画节奏，默认是swing 第四个参数 动画执行完毕之后的回调函数 $('button').eq(0).click(function () { $('.one').animate({ marginLeft: 500 }, 5000, function () { // alert('自定义动画执行完毕') }) }) $('button').eq(0).click(function () { $('.two').animate({ marginLeft: 500 }, 5000, 'linear', function () { // alert('自定义动画执行完毕') }) }) 累加属性 累加属性就是在原来基础上再次增加。在第一个参数值得位置填写字符传表达式即可。 $('button').eq(1).click(function () { $('.two').animate({ width: \"+=100\" }, 1000, function () { alert('自定义动画执行完毕') }) }) 关键字 关键字属性即传值时传入关键字，例如 hide,toggle $('button').eq(2).click(function () { $('.two').animate({ // width: 'hide' width: 'toggle' }, 1000, function () { alert('自定义动画执行完毕') }) }) ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-2/:4:0","tags":["jQuery"],"title":"五、jQuery动效","uri":"/posts/notes/20200616/20200615-2/"},{"categories":["notes"],"content":"stop方法和delay方法 delay(time)用于延迟动画。例如： $('.one').animate({ width: 500, }, 1000).delay(2000).animate({ height: 500 }, 1000) stop(bool)方法表示停止动画，但其可以传入参数： $('.one').animate({ width: 500, }, 2000).animate({ height: 500 }, 2000).animate({ height: 100 }, 2000).animate({ width: 100 }, 2000) 例如如上代码，完整的效果为： stop(true)与stop(true,false) 立即停止当前所有动画，包括后续动画 stop()、stop(false)、stop(false,false) 立即停止当前所有动画，继续执行后续的动画 stop(false,true) 立即完成当前动画，继续执行后续动画 stop(true true) 立即完成当前的，并且停止后续所有 ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-2/:5:0","tags":["jQuery"],"title":"五、jQuery动效","uri":"/posts/notes/20200616/20200615-2/"},{"categories":["notes"],"content":"图标特效 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } ul { list-style: none; width: 400px; height: 250px; border: 1px solid #000; margin: 100px auto; } ul\u003eli { width: 100px; height: 50px; margin-top: 50px; text-align: center; float: left; overflow: hidden; } ul\u003eli\u003espan { display: inline-block; width: 24px; height: 24px; background: url('https://ae02.alicdn.com/kf/U8f6d143a1f9d4323976a7df7486f7e2cT.jpg') no-repeat 0 0; position: relative; } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { // 1. 遍历所有li $('li').each(function (index, ele) { var $url = \"url('https://ae02.alicdn.com/kf/U8f6d143a1f9d4323976a7df7486f7e2cT.jpg') no-repeat 0 \" + index * -24 + \"px\" // 1.2 设置新的图片位置 $(this).children('span').css('background', $url) }) // 2 监听li移入事件 $('li').mouseenter(function () { // 2.1 将图片上移 $(this).children('span').animate({ top: -50 }, 1000, function () { // 2.2 将图标定位到下方 $(this).css('top', '50px') // 2.3 将图标复位 $(this).animate({ top: 0 }, 1000) }) }) }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cul\u003e \u003cli\u003e\u003cspan\u003e\u003c/span\u003e \u003cp\u003e百度\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cspan\u003e\u003c/span\u003e \u003cp\u003e百度\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cspan\u003e\u003c/span\u003e \u003cp\u003e百度\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cspan\u003e\u003c/span\u003e \u003cp\u003e百度\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cspan\u003e\u003c/span\u003e \u003cp\u003e百度\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cspan\u003e\u003c/span\u003e \u003cp\u003e百度\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cspan\u003e\u003c/span\u003e \u003cp\u003e百度\u003c/p\u003e \u003c/li\u003e \u003cli\u003e\u003cspan\u003e\u003c/span\u003e \u003cp\u003e百度\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-2/:6:0","tags":["jQuery"],"title":"五、jQuery动效","uri":"/posts/notes/20200616/20200615-2/"},{"categories":["notes"],"content":"无限循环滚动 为了让图片无缝衔接，需要在末尾添加与开头两个一模一样的元素。即html元素就变成了 \u003cdiv\u003e \u003cul\u003e \u003cli\u003e\u003cimg src=\"https://ae01.alicdn.com/kf/U1a8fa2929bca4fddb8b38411e9751104b.jpg\"\u003e\u003c/li\u003e \u003cli\u003e\u003cimg src=\"https://ae04.alicdn.com/kf/Ue87bb1c5ad4c4c8c9c3a664f3619b126h.jpg\"\u003e\u003c/li\u003e \u003cli\u003e\u003cimg src=\"https://ae01.alicdn.com/kf/U3f740877f20040bd8f37c94440f26b569.jpg\"\u003e\u003c/li\u003e \u003cli\u003e\u003cimg src=\"https://ae03.alicdn.com/kf/Ua2b193cb94224ed796104020743af8aes.jpg\"\u003e\u003c/li\u003e \u003cli\u003e\u003cimg src=\"https://ae01.alicdn.com/kf/U1a8fa2929bca4fddb8b38411e9751104b.jpg\"\u003e\u003c/li\u003e \u003cli\u003e\u003cimg src=\"https://ae04.alicdn.com/kf/Ue87bb1c5ad4c4c8c9c3a664f3619b126h.jpg\"\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e 鼠标移入事件 鼠标移入时，应停止当前动画并且为所有非当前选中的元素添加模板。 // 停止动画 clearInterval(timer) // 给非当前选中添加模板 $(this).siblings().fadeTo(100, 0.5) 鼠标移出时 让图片继续滚动，并且去除所有蒙版 // 继续滚动 autoPlay() // 去除所有的蒙版 $('li').fadeTo(100, 1) \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } div { width: 600px; height: 161px; border: 1px solid #000; margin: 100px auto; overflow: hidden; } ul { width: 1800px; list-style: none; height: 161px; background: #000; } ul\u003eli { float: left; } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { // 0 定义遍历保存偏移位 var offset = 0 // 1. 让图片滚动起来 var timer; function autoPlay() { timer = setInterval(function () { offset += -10 if (offset \u003c= -1200) { offset = 0 } $('ul').css('marginLeft', offset) }, 50) } autoPlay() // 2. 监听li的移入和移出事件 $('li').hover(function () { // 停止动画 clearInterval(timer) // 给非当前选中添加模板 $(this).siblings().fadeTo(100, 0.5) }, function () { // 继续滚动 autoPlay() // 去除所有的蒙版 $('li').fadeTo(100, 1) }) }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv\u003e \u003cul\u003e \u003cli\u003e\u003cimg src=\"https://ae01.alicdn.com/kf/U1a8fa2929bca4fddb8b38411e9751104b.jpg\"\u003e\u003c/li\u003e \u003cli\u003e\u003cimg src=\"https://ae04.alicdn.com/kf/Ue87bb1c5ad4c4c8c9c3a664f3619b126h.jpg\"\u003e\u003c/li\u003e \u003cli\u003e\u003cimg src=\"https://ae01.alicdn.com/kf/U3f740877f20040bd8f37c94440f26b569.jpg\"\u003e\u003c/li\u003e \u003cli\u003e\u003cimg src=\"https://ae03.alicdn.com/kf/Ua2b193cb94224ed796104020743af8aes.jpg\"\u003e\u003c/li\u003e \u003cli\u003e\u003cimg src=\"https://ae01.alicdn.com/kf/U1a8fa2929bca4fddb8b38411e9751104b.jpg\"\u003e\u003c/li\u003e \u003cli\u003e\u003cimg src=\"https://ae04.alicdn.com/kf/Ue87bb1c5ad4c4c8c9c3a664f3619b126h.jpg\"\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-2/:7:0","tags":["jQuery"],"title":"五、jQuery动效","uri":"/posts/notes/20200616/20200615-2/"},{"categories":["notes"],"content":"事件绑定 绑定方式有两种： 直接通过.eventName(fn)方式绑定。 $('button').click(function () { alert('hello tzk') }) 编码效率高 部分事件jQuery没有实现 通过on(eventName,function)方式绑定 $('button').on('click', function () { alert('hello tzk') }) 编码效率略低 所有JavaScript事件都可以添加 注意：以上两种绑定方式均不会被覆盖，并且可以添加多个事件。 \r $('button').click(function () { alert('hello tzk') }) $('button').click(function () { alert(123) }) $('button').mouseleave(function () { alert(mouseleave) }) ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-1/:1:0","tags":["jQuery"],"title":"四、jQuery事件相关","uri":"/posts/notes/20200616/20200615-1/"},{"categories":["notes"],"content":"事件解绑 事件解绑只有一个方法off()，只需要用需要解绑的元素调用此方法即可。 function test1() { alert('hello tzk') } function test2() { alert('hello 123') } $('button').click(test1) $('button').click(test2) $('button').mouseleave(function () { alert('mouseleave') }) $('button').mouseenter(function () { alert('mouseenter') }) 对于以上事件绑定： 不传入参数 会移除button元素的所有绑定事件。 $('button').off() 传入一个参数 会移除所有指定类型的事件。 $('button').off('click') 传入两个参数 会移除指定类型的指定事件 $('button').off('click', test1) ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-1/:2:0","tags":["jQuery"],"title":"四、jQuery事件相关","uri":"/posts/notes/20200616/20200615-1/"},{"categories":["notes"],"content":"jQuery事件冒泡和默认行为 什么是事件冒泡 当父子级关系时，如果为父级与子级同时绑定事件。当触发子级事件时，也会触发父级事件。 例如： \u003cdiv class=\"father\"\u003e \u003cdiv class=\"son\"\u003e\u003c/div\u003e \u003c/div\u003e \u003cscript\u003e $(function () { $('.son').click(function () { alert('son') }) $('.father').click(function () { alert('father') }) }) \u003c/script\u003e 如何阻止事件冒泡 在子级事件中添加return false或者event.stopPropagation() $('.son').click(function (event) { alert('son') // return false event.stopPropagation() }) 阻止事件冒泡一定要在子级添加。 什么是默认行为 默认行为指一些标签默认的行为，例如a标签默认跳转网页。 如何阻止默认行为 两种方式。 $('a').click(function (event) { alert('弹出注册框') // return false event.preventDefault() }) ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-1/:3:0","tags":["jQuery"],"title":"四、jQuery事件相关","uri":"/posts/notes/20200616/20200615-1/"},{"categories":["notes"],"content":"事件自动触发 事件自动触发有两个方法，参数传入为字符串形式的事件名称。 trigger 会触发事件冒泡 $('.son').click(function (event) { alert('son') }) $('.father').click(function () { alert('father') }) $('.son').trigger('click') 不会阻止默认行为 $('input[type=\"submit\"]').click(function () { alert('被点击了！') }) $('input[type=\"submit\"]').trigger('click') triggerHandler 不会触发事件冒泡 $('.son').click(function (event) { alert('son') }) $('.father').click(function () { alert('father') }) $('.son').triggerHandler(\"click\") 会阻止默认行为 $('input[type=\"submit\"]').click(function () { alert('被点击了！') }) $('input[type=\"submit\"]').triggerHandler('click') a标签的默认行为 \r对a标签设置自动事件时，无法触发其默认行为。 $('a').click(function () { alert('a') }) $('a').trigger('click') 如果想要触发其默认行为则需要如下更改： \u003ca href=\"http://baidu.com\" target=\"_blank\"\u003e\u003cspan\u003e注册\u003c/span\u003e\u003c/a\u003e $('span').click(function () { alert('a') }) $('span').trigger('click') ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-1/:4:0","tags":["jQuery"],"title":"四、jQuery事件相关","uri":"/posts/notes/20200616/20200615-1/"},{"categories":["notes"],"content":"自定义事件 自定义事件需要满足的条件： 只能通过on绑定事件 $('.son').on('myClick', function () { alert('son') }) 事件必须通过trigger触发 $('.son').trigger('myclick') ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-1/:5:0","tags":["jQuery"],"title":"四、jQuery事件相关","uri":"/posts/notes/20200616/20200615-1/"},{"categories":["notes"],"content":"事件命名空间 想要使事件的命名空间有效，必须满足两个条件 事件是通过on来绑定的 用.Name的方式区分是谁添加的。 $('.son').on('myClick.zs', function () { alert('son') }) $('.son').on('myClick.ls', function () { alert('son') }) 通过trigger()触发事件 触发两个事件 $('.son').trigger('myClick') 只触发某一个 // 将事件名称填写完整即可 $('.son').trigger('myClick.ls') 面试题（细节） \r 利用trigger触发子元素带命名空间的事件，那么父元素带相同命名空间的事件也会被触发，而父元素没有命名空间的事件不会被触发 $('.father').on('myClick.ls', function () { alert('father click1') }) $('.father').on('myClick', function () { alert('father click2') }) $('.son').on('myClick.ls', function () { alert('son click1') }) $('.son').trigger('myClick.ls') 利用trigger触发子元素不带命名空间的事件，那么子元素所有相同类型的事件和父元素所有相同类型的事件都会被触发 $('.father').on('myClick.ls', function () { alert('father click1') }) $('.father').on('myClick', function () { alert('father click2') }) $('.son').on('myClick.ls', function () { alert('son click1') }) $('.son').trigger('myClick') ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-1/:6:0","tags":["jQuery"],"title":"四、jQuery事件相关","uri":"/posts/notes/20200616/20200615-1/"},{"categories":["notes"],"content":"事件委托 什么是事件委托 请别人帮忙做事情，然后将昨晚的结果反馈给我们 将li的点击事件委托给ul元素监听。 $('ul').delegate('li', 'click', function () { console.log($(this).html()) }) 利用事件委托完成弹出框 \r \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } html, body { width: 100%; height: 100%; } .mask { width: 100%; height: 100%; background: rgba(0, 0, 0, .5); position: fixed; left: 0; top: 0; } .login { width: 570px; /* height: 290px; */ margin: 100px auto; position: relative; } .login\u003espan { width: 50px; height: 50px; position: absolute; top: 0; right: 0; } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { $('a').click(function () { var $mask = $('\u003cdiv class=\"mask\"\u003e\u003cdiv class= \"login\" \u003e\u003cimg src=\"https://ae01.alicdn.com/kf/U0acca6abe69449398ddbe1f56f032ecaw.jpg\" alt=\"\"\u003e\u003cspan\u003e\u003c/span\u003e\u003c/div\u003e') $('body').append($mask) $('body').delegate('.login\u003espan', 'click', function () { $mask.remove() }) return false }) }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003c!-- \u003cdiv class=\"mask\"\u003e \u003cdiv class=\"login\"\u003e \u003cimg src=\"https://ae01.alicdn.com/kf/U0acca6abe69449398ddbe1f56f032ecaw.jpg\" alt=\"\"\u003e \u003cspan\u003e\u003c/span\u003e \u003c/div\u003e \u003c/div\u003e --\u003e \u003ca href=\"https://www.baidu.com\"\u003e注册\u003c/a\u003e \u003cdiv\u003e 我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落 我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落 我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落 我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落 我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落 我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段落我是段","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-1/:7:0","tags":["jQuery"],"title":"四、jQuery事件相关","uri":"/posts/notes/20200616/20200615-1/"},{"categories":["notes"],"content":"移入移出事件 移入事件mouseover移出事件mouseout。这种方法 子元素被移入移出也会触发父元素的事件。 $(function () { $('.father').mouseover(function () { console.log('鼠标移入了') }) $('.father').mouseout(function () { console.log('鼠标移出了') }) }) 为了解决以上问题，jQuery提供了另外两个方法：鼠标移入mouseenter和鼠标移出mouseleave。 同时监听移入与移出 \r使用的方法为hover，这个方法可以接收一个或两个参数，并且不会子元素被移入移出也会触发父元素的事件。 一个参数 $('.father').hover(function () { console.log('移入/移除 执行的函数') }) 一个参数代表移入移出都执行此函数。 两个参数 $('.father').hover(function () { console.log('移入执行的函数') }, function () { console.log('移出执行的函数') }) 第一个参数代表移入时执行的函数，第二个参数代表移出时执行的函数。 ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-1/:8:0","tags":["jQuery"],"title":"四、jQuery事件相关","uri":"/posts/notes/20200616/20200615-1/"},{"categories":["notes"],"content":"电影排行榜案例 实现思路\r 将内容DIV设置为隐藏 当鼠标移入后将隐藏的div显示出来 当鼠标移出后将显示的div隐藏起来 直译方式 $('li').mouseenter(function () { $(this).addClass('current') }) $('li').mouseleave(function () { $(this).removeClass('current') }) 简化方式1 $('li').hover(function () { $(this).addClass('current') }, function () { $(this).removeClass('current') }) 简化方式2 $('li').hover(function () { $(this).toggleClass('current') }) 完整代码 \r \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } .box { width: 300px; height: 450px; margin: 50px auto; border: 1px solid #000; } .box\u003eh1 { font-size: 20px; line-height: 35px; color: deeppink; padding-left: 10px; border-bottom: 1px dashed #ccc; } ul\u003eli { list-style: none; padding: 5px 10px; border: 1px dashed #ccc; } ul\u003eli:nth-child(-n+3) span { background-color: deeppink; } ul\u003eli\u003espan { display: inline-block; height: 20px; width: 20px; background: #ccc; text-align: center; line-height: 20px; margin-right: 10px; } .content { overflow: hidden; margin-top: 5px; display: none; } .content\u003eimg { width: 80px; height: 120px; float: left; } .content\u003ep { width: 180px; height: 120px; float: right; font-size: 12px; line-height: 20px; } .current .content { display: block; } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { $('li').hover(function () { $(this).toggleClass('current') }) // $('li').mouseenter(function () { // $(this).addClass('current') // }) // $('li').mouseleave(function () { // $(this).removeClass('current') // }) // $('li').hover(function () { // $(this).addClass('current') // }, function () { // $(this).removeClass('current') // }) }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"box\"\u003e \u003ch1\u003e电影排行榜\u003c/h1\u003e \u003cul\u003e \u003cli\u003e\u003cspan\u003e1\u003c/span\u003e电影名称 \u003cdiv class=\"content\"\u003e \u003cimg src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/06/16/d0efe1580ab93f0e6b1a04bb07a8259f.png\"\u003e \u003cp\u003e测试文字哈哈哈\u003c/p\u003e \u003c/div\u003e \u003c/li\u003e \u003cli\u003e\u003cspan\u003e2\u003c/span\u003e电影名称\u003cdiv class=\"content\"\u003e \u003cimg src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/06/16/d0efe1580ab93f0e6b1a04bb07a8259f.png\"\u003e \u003cp\u003e测试文字哈哈哈\u003c/p\u003e \u003c/div\u003e \u003c/li\u003e \u003cli\u003e\u003cspan\u003e3\u003c/span\u003e电影名称\u003cdiv class=\"content\"\u003e \u003cimg src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/06/16/d0efe1580ab93f0e6b1a04bb07a8259f.png\"\u003e \u003cp\u003e测试文字哈哈哈\u003c/p\u003e \u003c/div\u003e \u003c/li\u003e \u003cli\u003e\u003cspan\u003e4\u003c/span\u003e电影名称\u003cdiv class=\"content\"\u003e \u003cimg src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/06/16/d0efe1580ab93f0e6b1a04bb07a8259f.png\"\u003e \u003cp\u003e测试文字哈哈哈\u003c/p\u003e \u003c/div\u003e \u003c/li\u003e \u003cli\u003e\u003cspan\u003e5\u003c/span\u003e电影名称\u003cdiv class=\"content\"\u003e \u003cimg src=\"https://cdn.jsdelivr.net/gh/blogimg/HexoStaticFile2@latest/2020/06/16/d0efe1580ab93f0e6b1a04bb07a8259f.png\"\u003e \u003cp\u003e测试文字哈哈哈\u003c/p\u003e \u003c/div\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-1/:9:0","tags":["jQuery"],"title":"四、jQuery事件相关","uri":"/posts/notes/20200616/20200615-1/"},{"categories":["notes"],"content":"Tab选项卡 实现思路 HTML结构 \u003cdiv class=\"box\"\u003e \u003cul class=\"nav\"\u003e \u003cli class=\"current\"\u003e123\u003c/li\u003e \u003cli\u003e123\u003c/li\u003e \u003cli\u003e123\u003c/li\u003e \u003cli\u003e123\u003c/li\u003e \u003c/ul\u003e \u003cul class=\"content\"\u003e \u003cli class=\"show\"\u003e \u003cimg src=\"https://ae02.alicdn.com/kf/U5303870feaa24803b2a9debcfb260c79T.jpg\"\u003e \u003c/li\u003e \u003cli\u003e \u003cimg src=\"https://ae02.alicdn.com/kf/U3e7e3e14488d431b9b1178ddddc1fdd4T.jpg\"\u003e \u003c/li\u003e \u003cli\u003e \u003cimg src=\"https://ae01.alicdn.com/kf/U0b5025b6d75b45c1a2590c1fdc6d5bcbq.jpg\"\u003e \u003c/li\u003e \u003cli\u003e \u003cimg src=\"https://ae01.alicdn.com/kf/U7015657127cf4f8dbd19d9f03fd38636F.jpg\"\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e 基本思路 监听鼠标移入事件 修改被移入选项卡的背景颜色 获取当前移入选项卡的索引 根据索引找到对应的图片 显示找到的图片 $('.nav\u003eli').mouseenter(function () { // 1.1 修改被移入选项卡的背景颜色 $(this).addClass('current') // 1.2 获取当前移入选项卡的索引 var index = $(this).index() console.log(index) // 1.3 根据索引找到对应的图片 var $li = $('.content\u003eli').eq(index) // 1.4 显示找到的图片 $li.addClass('show') }) 监听鼠标移出事件 还原被移入选项卡的背景颜色 获取当前移出选项卡的索引 根据索引找到对应图片 隐藏图片 $('.nav\u003eli').mouseleave(function () { // 1.1 还原被移入选项卡的背景颜色 $(this).removeClass('current') // 1.2 获取当前移出选项卡的索引 var index = $(this).index() // 1.3 根据索引找到对应图片 var $li = $('.content\u003eli').eq(index) // 1.4 隐藏图片 $li.removeClass('show') }) 对于实现tab选项卡的简单思路 主要用到siblings()方法，该方法取得一个包含匹配的元素集合中每一个元素的所有唯一同辈元素的元素集合。 $('.nav\u003eli').mouseenter(function () { // 1.1 修改被移入选项卡的背景颜色 $(this).addClass('current') // 1.2 还原其他兄弟选项卡的颜色 $(this).siblings().removeClass('current') // 1.3 获取当前移入选项卡的索引 var index = $(this).index() // 1.4 根据索引找到对应的图片 var $li = $('.content\u003eli').eq(index) // 1.5 隐藏兄弟图片 $li.siblings().removeClass('show') // 1.6 显示找到的图片 $li.addClass('show') }) 完整代码 \r \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } .box { width: 440px; height: 298px; margin: 50px auto; border: 1px solid #000; } .nav\u003eli { list-style: none; width: 110px; height: 50px; background: orange; text-align: center; float: left; line-height: 50px; } .nav\u003e.current { background: #ccc; } .content\u003eli { list-style: none; display: none; text-align: center; } .content\u003e.show { display: block; } .content\u003eli\u003eimg { width: 240px; } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { /* // 1. 监听选项卡的移入事件 $('.nav\u003eli').mouseenter(function () { // 1.1 修改被移入选项卡的背景颜色 $(this).addClass('current') // 1.2 获取当前移入选项卡的索引 var index = $(this).index() console.log(index) // 1.3 根据索引找到对应的图片 var $li = $('.content\u003eli').eq(index) // 1.4 显示找到的图片 $li.addClass('show') }) // 1. 监听选项卡的移出事件 $('.nav\u003eli').mouseleave(function () { // 1.1 还原被移入选项卡的背景颜色 $(this).removeClass('current') // 1.2 获取当前移出选项卡的索引 var index = $(this).index() // 1.3 根据索引找到对应图片 var $li = $('.content\u003eli').eq(index) // 1.4 隐藏图片 $li.removeClass('show') }) */ // 1. 监听选项卡的移入事件 $('.nav\u003eli').mouseenter(function () { // 1.1 修改被移入选项卡的背景颜色 $(this).addClass('current') // 1.2 还原其他兄弟选项卡的颜色 $(this).siblings().removeClass('current') // 1.3 获取当前移入选项卡的索引 var index = $(this).index() // 1.4 根据索引找到对应的图片 var $li = $('.content\u003eli').eq(index) // 1.5 隐藏兄弟图片 $li.siblings().removeClass('show') // 1.6 显示找到的图片 $li.addClass('show') }) }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"box\"\u003e \u003cul class=\"nav\"\u003e \u003cli class=\"current\"\u003e123\u003c/li\u003e \u003cli\u003e123\u003c/li\u003e \u003cli\u003e123\u003c/li\u003e \u003cli\u003e123\u003c/li\u003e \u003c/ul\u003e \u003cul class=\"content\"\u003e \u003cli class=\"show\"\u003e \u003cimg src=\"https://ae02.alicdn.com/kf/U5303870feaa24803b2a9debcfb260c79T.jpg\"\u003e \u003c/li\u003e \u003cli\u003e \u003cimg src=\"https://ae02.alicdn.com/kf/U3e7e3e14488d431b9b1178ddddc1fdd4T.jpg\"\u003e \u003c/li\u003e \u003cli\u003e \u003cimg src=\"https://ae01.alicdn.com/kf/U0b5025b6d75b45c1a2590c1fdc6d5bcbq.jpg\"\u003e \u003c/li\u003e \u003cli\u003e \u003cimg src=\"https://ae01.alicdn.com/kf/U7015657127cf4f8dbd19d9f03fd38636F.jpg\"\u003e \u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-06-16","objectID":"/posts/notes/20200616/20200615-1/:10:0","tags":["jQuery"],"title":"四、jQuery事件相关","uri":"/posts/notes/20200616/20200615-1/"},{"categories":["notes"],"content":"jQuery内容选择器 为了方便测试，先将DOM元素写为以下格式： \u003cdiv\u003e\u003c/div\u003e \u003cdiv\u003e我是div\u003c/div\u003e \u003cdiv\u003e我是div123\u003c/div\u003e \u003cdiv\u003e\u003cspan\u003e\u003c/span\u003e\u003c/div\u003e \u003cdiv\u003e\u003cp\u003e\u003c/p\u003e\u003c/div\u003e :empty找到既没有文本内容也没有子元素的指定元素。 这个选择器对于以上内容只能找到第一个div。 var $div = $('div:empty') console.log($div) :parent 找到有文本内容或有子元素的指定元素 可以找到除第一个意外的四个元素 var $div = $('div:parent') console.log($div) :contains(text)找到包含指定文本内容的指定元素 视内容找到包含内容的div var $div = $('div:contains(\"我是div123\")') console.log($div) :has(selector)找到包含指定子元素的指定元素 视搜索内容找到包含此子元素的元素 var $div = $('div:has(\"span\")') console.log($div) ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-3/:1:0","tags":["jQuery"],"title":"三、jQuery属性操作","uri":"/posts/notes/20200615/20200615-3/"},{"categories":["notes"],"content":"属性和属性节点 什么是属性 对象身上保存的变量就是属性 function Person() {} var p = new Person() p.name = 'tzk' 如何操作属性 对象.属性名称 = 值 对象.属性名称 对象[‘属性名称’] = 值 对象[‘属性名称’] // 赋值属性 p['name'] = 'tzk' // 获取属性 console.log(p.name) 什么是属性节点 \u003cspan name='xiaokang'\u003e\u003c/span\u003e 在编写HTML代码时，在HTML标签中添加的属性就是属性节点。 在浏览器中找到span这个DOM元素之后，展开看到的都是属性。 在attributes属性中保持的所有内容都是属性节点。 操作属性节点 var span = document.getElementsByTagName('span')[0] // 设置属性 span.setAttribute('name', 'tzk') // 获取属性 console.log(span.getAttribute('name')) 属性和属性节点的区别 任何对象都有属性，但只有DOM对象才有属性节点 ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-3/:2:0","tags":["jQuery"],"title":"三、jQuery属性操作","uri":"/posts/notes/20200615/20200615-3/"},{"categories":["notes"],"content":"attr方法 attr(name|pro|key,val|fn)方法 获取或者设置属性节点的值 参数 可以传递一个参数，代表获取节点的值 无论找到多少个元素，只会返回第一个元素指定的属性节点的值。 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { console.log($(\"span\").attr('class')) // span1 }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cspan class=\"span1\" name='name1'\u003e\u003c/span\u003e \u003cspan class=\"span2\" name='name2'\u003e\u003c/span\u003e \u003c/body\u003e \u003c/html\u003e 也可以传递两个参数，设置属性节点的值 如果设置值，找到多少个元素就会设置多少个元素。 如果设置的节点不存在，那么会新增该属性。 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { $('span').attr('class', 'box') }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cspan class=\"span1\" name='name1'\u003e\u003c/span\u003e \u003cspan class=\"span2\" name='name2'\u003e\u003c/span\u003e \u003c/body\u003e \u003c/html\u003e removeAttr(name)节点 删除属性节点 参数 会删除所有找到元素指定的属性节点 删除一个节点 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { $('span').removeAttr('class') }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cspan class=\"span1\" name='name1'\u003e\u003c/span\u003e \u003cspan class=\"span2\" name='name2'\u003e\u003c/span\u003e \u003c/body\u003e \u003c/html\u003e 删除多个属性 只需要在传递参数时用空格隔开即可。 $('span').removeAttr('class name') ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-3/:3:0","tags":["jQuery"],"title":"三、jQuery属性操作","uri":"/posts/notes/20200615/20200615-3/"},{"categories":["notes"],"content":"prop方法 prop方法与attr方法一致。 设置或新增属性 $(\"span\").eq(0).prop('demo', 'name1') $(\"span\").eq(1).prop('demo', 'tzk') 获取属性 console.log($('span').prop('demo')) //name1 删除属性 $(\"span\").removeProp('demo') 操作属性节点 官方推荐在操作属性节点时，具有true和false两个属性的属性节点，如checked, selected或者disabled使用prop(),其他的使用attr() console.log($('.input1').prop('checked')) //true console.log($('.input1').attr('checked')) //checked console.log($('.input2').prop('checked')) //false console.log($('.input2').attr('checked')) //undefined ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-3/:4:0","tags":["jQuery"],"title":"三、jQuery属性操作","uri":"/posts/notes/20200615/20200615-3/"},{"categories":["notes"],"content":"图片切换的小案例 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { // 编写jQuery相关代码 // 1. 给按钮添加点击事件 var btn = document.getElementsByTagName('button')[0] btn.onclick = function () { // 2. 获取输入框输入的内容 var input = document.getElementsByTagName('input')[0] var text = input.value // 3. 修改img的src属性节点的值 $('img').attr('src', text) // $('img').prop('src', text) } }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cinput type=\"text\"\u003e \u003cbutton\u003e切换图片\u003c/button\u003e\u003cbr /\u003e \u003cimg src=\"https://www.baidu.com/img/dongsc_eb45d000832f8e889ff64951eaf7f381.gif\" alt=\"\"\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-3/:4:1","tags":["jQuery"],"title":"三、jQuery属性操作","uri":"/posts/notes/20200615/20200615-3/"},{"categories":["notes"],"content":"jQuery类操作相关方法 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } .class1 { width: 100px; height: 100px; background: red; } .class2 { border: 5px solid black } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { var btns = document.getElementsByTagName('button') }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton\u003e添加类\u003c/button\u003e \u003cbutton\u003e删除类\u003c/button\u003e \u003cbutton\u003e切换类\u003c/button\u003e \u003cdiv\u003e\u003c/div\u003e \u003c/body\u003e \u003c/html\u003e 添加与删除类 btns[0].onclick = function () { // 添加多个类用空格隔开 $('div').addClass('class1 class2') } btns[1].onclick = function () { // 删除多个类用空格隔开 $('div').removeClass('class1 class2') } 切换类 btns[2].onclick = function () { // 多个用空格隔开 $('div').toggleClass('class1 class2') } ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-3/:5:0","tags":["jQuery"],"title":"三、jQuery属性操作","uri":"/posts/notes/20200615/20200615-3/"},{"categories":["notes"],"content":"文本值相关操作 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } div { width: 100px; height: 100px; border: 1px solid #000; } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { var btns = document.getElementsByTagName('button') }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton\u003e设置HTML\u003c/button\u003e \u003cbutton\u003e获取HTML\u003c/button\u003e \u003cbutton\u003e设置text\u003c/button\u003e \u003cbutton\u003e获取text\u003c/button\u003e \u003cbutton\u003e设置value\u003c/button\u003e \u003cbutton\u003e获取text\u003c/button\u003e \u003cdiv\u003e\u003c/div\u003e \u003cinput type=\"text\"\u003e \u003c/body\u003e \u003c/html\u003e html([val|fn])，用于设置元素的html元素。 类似原生js中的innerHTML方法 如果传入参数，则代表将当前元素的html修改为参数输入内容 btns[0].onclick = function () { $('div').html('\u003cp\u003e我是一个段落\u003cspan\u003e我是一个span\u003c/span\u003e\u003c/p\u003e') } 如果不传入参数，则代表获取当前元素的HTML代码。 btns[1].onclick = function () { console.log($('div').html()) } text([val|fn]) 类似原生js中的innerText方法。参数传入与html()方法一模一样 btns[2].onclick = function () { $('div').text('\u003cp\u003e我是一个段落\u003cspan\u003e我是一个span\u003c/span\u003e\u003c/p\u003e') } btns[3].onclick = function () { console.log($('div').text()) } val([val|fn|arr]) 与value属性类似。参数传入与前两种一模一样。 btns[4].onclick = function () { $('input').val('请输入内容：') } btns[5].onclick = function () { $('input').val() } ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-3/:6:0","tags":["jQuery"],"title":"三、jQuery属性操作","uri":"/posts/notes/20200615/20200615-3/"},{"categories":["notes"],"content":"操作样式方法 设置属性值 逐个设置 $('div').css('width', '100px') $('div').css('height', '100px') $('div').css('background', 'red') 链式设置 如果大于3步，建议分开 $('div').css('width', '100px').css('height', '100px').css('background', 'blue') 批量设置 参数可以传入一个对象，对象内传入css样式。 $('div').css({ width: '100px', height: '100px', background: 'red' }) 获取css样式。 传入参数即需要获取的样式名称。 console.log($('div').css('width')) ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-3/:7:0","tags":["jQuery"],"title":"三、jQuery属性操作","uri":"/posts/notes/20200615/20200615-3/"},{"categories":["notes"],"content":"尺寸和位置相关 ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-3/:8:0","tags":["jQuery"],"title":"三、jQuery属性操作","uri":"/posts/notes/20200615/20200615-3/"},{"categories":["notes"],"content":"尺寸 以width()方法为例。 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } .father { width: 200px; height: 200px; border: 50px solid #000; background: red; margin-left: 50px; position: relative; } .son { width: 100px; height: 100px; background: blue; position: absolute; left: 50px; top: 50px; } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { var btns = document.getElementsByTagName('button') btns[0].onclick = function () { // 获取元素的宽度 console.log($('.father').width()) //200 } btns[1].onclick = function () { console.log($('.father').width('500px')) } }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"father\"\u003e \u003cdiv class=\"son\"\u003e\u003c/div\u003e \u003c/div\u003e \u003cbutton\u003e获取\u003c/button\u003e \u003cbutton\u003e设置\u003c/button\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-3/:8:1","tags":["jQuery"],"title":"三、jQuery属性操作","uri":"/posts/notes/20200615/20200615-3/"},{"categories":["notes"],"content":"位置 offset()获取距离窗口的偏移位。 获取 例如获取距离左边的偏移位$('div').offset().left 设置 参数内传入一个对象，对象内写需要设置的属性 btns[1].onclick = function () { $('.son').offset({ left: 10 }) } \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } .father { width: 200px; height: 200px; border: 50px solid #000; background: red; margin-left: 50px; position: relative; } .son { width: 100px; height: 100px; background: blue; position: absolute; left: 50px; top: 50px; } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { var btns = document.getElementsByTagName('button') btns[0].onclick = function () { console.log($('.son').offset().left) //150 } btns[1].onclick = function () { $('.son').offset({ left: 10 }) } }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"father\"\u003e \u003cdiv class=\"son\"\u003e\u003c/div\u003e \u003c/div\u003e \u003cbutton\u003e获取\u003c/button\u003e \u003cbutton\u003e设置\u003c/button\u003e \u003c/body\u003e \u003c/html\u003e position获取元素距离定位元素的偏移位 该方法只有获取不能设置，但可以通过css方式进行设置 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e * { margin: 0; padding: 0; } .father { width: 200px; height: 200px; border: 50px solid #000; background: red; margin-left: 50px; position: relative; } .son { width: 100px; height: 100px; background: blue; position: absolute; left: 50px; top: 50px; } \u003c/style\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(function () { var btns = document.getElementsByTagName('button') btns[0].onclick = function () { console.log($('.son').position().left) //50 } btns[1].onclick = function () { // 无法设置，即使设置也不生效 $('.son').position({ left: 10 }) } }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"father\"\u003e \u003cdiv class=\"son\"\u003e\u003c/div\u003e \u003c/div\u003e \u003cbutton\u003e获取\u003c/button\u003e \u003cbutton\u003e设置\u003c/button\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-3/:8:2","tags":["jQuery"],"title":"三、jQuery属性操作","uri":"/posts/notes/20200615/20200615-3/"},{"categories":["notes"],"content":"scrollTop方法 获取滚动偏移量 元素 btns[0].onclick = function () { console.log($('.scroll').scrollTop()) } 网页 console.log($('html').scrollTop()) IE浏览器下可能无法获取，需要将html换成body。常用写法如下： console.log($('html').scrollTop()+$('body').scrollTop()) 设置滚动偏移量 参数传入为整型，而不是字符串类型。 元素 btns[1].onclick = function () { $('.scroll').scrollTop(300) } 网页 $('html').scrollTop(300) 同样的IE浏览器不可使用，需要对body进行设置。通常写法如下： $('html,body').scrollTop(300) ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-3/:9:0","tags":["jQuery"],"title":"三、jQuery属性操作","uri":"/posts/notes/20200615/20200615-3/"},{"categories":["notes"],"content":"jQuery核心函数 jQuery的核心函数就是$();，圆括号内可以传递函数、字符串选择器、字符串代码片段、DOM元素等。 传递函数 $(function () { alert(1) }) 字符串选择器 返回一个jQuery对象，对象中保存了找到的DOM元素 $(function () { var $box1 = $(\".box1\") var $box2 = $(\"#box2\") console.log($box1) console.log($box2) }) 字符串代码片段 返回一个jQuery对象，对象中保存了创建的DOM元素 $(function () { var $p = $('\u003cp\u003e我是段落\u003c/p\u003e') console.log($p) }) 接收一个DOM元素 DOM元素会被包装成一个jQuery对象返回。 $(function () { var span = document.getElementsByTagName('span')[0] console.log(span) var $span = $(span) console.log($span) }) ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-2/:1:0","tags":["jQuery"],"title":"二、jQuery核心函数和工具方法","uri":"/posts/notes/20200615/20200615-2/"},{"categories":["notes"],"content":"jQuery对象 jQuery对象是一个伪数组对象（有0到length-1的属性，并且有length属性） $(function () { var $div = $('div') console.log($div) }) ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-2/:2:0","tags":["jQuery"],"title":"二、jQuery核心函数和工具方法","uri":"/posts/notes/20200615/20200615-2/"},{"categories":["notes"],"content":"静态方法与实例方法 静态方法通过类名调用 // 1. 定义一个类 function AClass() { } // 2. 给这个类添加一个静态方法 // 直接添加给类的就是静态方法 AClass.staticMethod = function () { alert('staticMethod') } // 静态方法通过类名调用 AClass.staticMethod(); 实例方法通过对象调用 // 定义一个类 function AClass() { } // 给这个类添加一个实例方法 AClass.prototype.instanceMethod = function () { alert('instanceMethod') } // 创建一个实例（创建一个对象） var a = new AClass() // 实例方法通过类的实例调用 a.instanceMethod() ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-2/:3:0","tags":["jQuery"],"title":"二、jQuery核心函数和工具方法","uri":"/posts/notes/20200615/20200615-2/"},{"categories":["notes"],"content":"each方法 原生forEach方法可以遍历数组，但不可以遍历伪数组。 var arr = [1, 3, 5, 7, 9] /* 原生遍历： 第一个参数：遍历到的元素 第二个参数，遍历到的索引 注意：原生forEach只能遍历数组，不能遍历伪数组 */ arr.forEach(function (value, index) { console.log(index, value) }) // 伪数组测试 var obj = { 0: 1, 1: 3, 2: 5, 3: 7, 4: 7, length: 5 } obj.forEach(function (value, index) { console.log(index, value) }) jQuery的each方法既可以遍历数组，又可以遍历伪数组 var arr = [1, 3, 5, 7, 9] var obj = { 0: 1, 1: 3, 2: 5, 3: 7, 4: 7, length: 5 } $.each(arr, function (index, value) { console.log(index, value) }) $.each(obj, function (index, value) { console.log(index, value) }) ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-2/:3:1","tags":["jQuery"],"title":"二、jQuery核心函数和工具方法","uri":"/posts/notes/20200615/20200615-2/"},{"categories":["notes"],"content":"map方法 原生map方法可以遍历数组，但不可以遍历伪数组。 var arr = [1, 3, 5, 7, 9] var obj = { 0: 1, 1: 3, 2: 5, 3: 7, 4: 7, length: 5 } // 1. 利用原生的JS的map方法遍历 /* 第一个参数：当前遍历到的元素 第二个参数：当前遍历到的索引 第三个参数：当前被遍历的数组 注意点： 不能遍历伪数组 */ arr.map(function (value, index, arr) { console.log(value, index, arr) }) obj.map(function (value, index, arr) { console.log(value, index, arr) }) jQuery的map方法既可以遍历数组，又可以遍历伪数组 var arr = [1, 3, 5, 7, 9] var obj = { 0: 1, 1: 3, 2: 5, 3: 7, 4: 7, length: 5 } $.map(arr, function (value, index) { console.log(value, index) }) $.map(obj, function (value, index) { console.log(value, index) }) jQuery中的each静态方法和map静态方法的区别\r each静态方法默认的返回值就是遍历谁就返回谁，而map静态方法默认的返回值就是一个空数组 each静态方法不支持在回调函数中对遍历的数组进行处理，map静态方法可以在回调函数中通过return对遍历的数组进行处理 ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-2/:3:2","tags":["jQuery"],"title":"二、jQuery核心函数和工具方法","uri":"/posts/notes/20200615/20200615-2/"},{"categories":["notes"],"content":"去掉字符串首尾空格 $.trim(str)，该方法返回一个新的字符串。 var str = ' tzk ' var $res = $.trim(str) console.log('---' + str + '---') // --- tzk --- console.log('---' + $res + '---') // ---tzk--- ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-2/:3:3","tags":["jQuery"],"title":"二、jQuery核心函数和工具方法","uri":"/posts/notes/20200615/20200615-2/"},{"categories":["notes"],"content":"判断传入的对象是否是window对象 $.isWindow(obj)，该方法返回一个布尔值。如果传入对象是window则返回true，否则返回false。 var w = window var res = $.isWindow(w); console.log(res) //true ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-2/:3:4","tags":["jQuery"],"title":"二、jQuery核心函数和工具方法","uri":"/posts/notes/20200615/20200615-2/"},{"categories":["notes"],"content":"判断是否为数组 $.isArray(arr)，该方法返回一个布尔值，只有数组才会返回true，其他类型均返回false（包括伪数组）。 ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-2/:3:5","tags":["jQuery"],"title":"二、jQuery核心函数和工具方法","uri":"/posts/notes/20200615/20200615-2/"},{"categories":["notes"],"content":"判断是否为函数 $.isFunction(fn)，该方法返回一个布尔值。只有是一个函数时，才会返回true。 var res = $.isFunction(fn) jQuery的本质上就是一个函数。 \r","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-2/:3:6","tags":["jQuery"],"title":"二、jQuery核心函数和工具方法","uri":"/posts/notes/20200615/20200615-2/"},{"categories":["notes"],"content":"暂停ready的执行 默认情况下当页面加载完毕，JQuery的ready入口函数将会自动执行。$.holdReady(true)可以暂停入口函数的执行，而$.holdReady(false)可以恢复执行。 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e // $.holdReady(true) 暂停ready执行 $.holdReady(true) $(document).ready(function () { alert('ready') }); \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton\u003e回复ready事件\u003c/button\u003e \u003cscript\u003e var btn = document.getElementsByTagName('button')[0] btn.onclick = function () { $.holdReady(false) } \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-2/:3:7","tags":["jQuery"],"title":"二、jQuery核心函数和工具方法","uri":"/posts/notes/20200615/20200615-2/"},{"categories":["notes"],"content":"版本选择 1.x：兼容ie678，但相对其它版本文件较大，官方只做BUG维护，功能不再新增，最终版本：1.12.4 (2016年5月20日). 2.x：不兼容ie678，相对1.x文件较小，官方只做BUG维护，功能不再新增，最终版本：2.2.4 (2016年5月20日) 3.x：不兼容ie678，只支持最新的浏览器，很多老的jQuery插件不支持这个版本，相对1.x文件较小，提供不包含Ajax/动画API版本。 ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-1/:1:0","tags":["jQuery"],"title":"一、初识jQuery","uri":"/posts/notes/20200615/20200615-1/"},{"categories":["notes"],"content":"jQuery的使用 下载jQuery或者使用cdn 引入jQuery的文件 编写代码 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/1.12.4/jquery.js\"\u003e\u003c/script\u003e \u003cscript\u003e $(document).ready(function () { alert('hello tzk') }) \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-1/:2:0","tags":["jQuery"],"title":"一、初识jQuery","uri":"/posts/notes/20200615/20200615-1/"},{"categories":["notes"],"content":"jQuery和JS的加载模式 通过原生JS和jQuery都可以拿到DOM元素，及图片的宽高 window.onload = function () { // 1. 通过原生的js入口函数可以拿到DOM元素 var img = document.getElementsByTagName('img')[0] console.log(img) // 2. 通过原生的JS入口函数可以拿到DOM元素的宽高 var width = window.getComputedStyle(img).width console.log('onload: ', width) } $(document).ready(function () { // 1. 通过JQuery入口函数可以拿到DOM元素 var $img = $('img') console.log($img) // 2. 通过JQuery入口函数可以拿到DOM元素的宽高 var $width = $img.width() console.log('ready: ', $width) }) 原生的JS如果编写了多个入口函数，后面编写的会覆盖原来的。而jQuery不会覆盖 window.onload = function () { alert('hello tzk1') } window.onload = function () { alert('hello tzk2') } 只会弹出hello tzk2 $(document).ready(function () { alert('hello tzk1') }); $(document).ready(function () { alert('hello tzk2') }); hello tzk1与hello tzk2都会弹出。 ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-1/:3:0","tags":["jQuery"],"title":"一、初识jQuery","uri":"/posts/notes/20200615/20200615-1/"},{"categories":["notes"],"content":"jQuery入口函数的其他写法 // 1. 第一种写法 $(document).ready(function () { alert('hello tzk') }); // 第二种写法 jQuery(document).ready(function () { alert('hello tzk') }); // 第三种写法(推荐) $(function () { alert('hello tzk') }) // 第四种写法 jQuery(function () { alert('hello tzk') }) jQuery的四种写法中，推荐使用第三种写法。 ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-1/:4:0","tags":["jQuery"],"title":"一、初识jQuery","uri":"/posts/notes/20200615/20200615-1/"},{"categories":["notes"],"content":"jQuery的冲突问题 释放$符号 jQuery.noConflict() jQuery(function () { alert('hello tzk') }) 释放操作必须在编写其他JQuery代码之前编写 释放之后就不能在使用$,改为使用jQuery 自定义访问符号 var nj = jQuery.noConflict() nj(function () { alert('hello tzk') }) ","date":"2020-06-15","objectID":"/posts/notes/20200615/20200615-1/:5:0","tags":["jQuery"],"title":"一、初识jQuery","uri":"/posts/notes/20200615/20200615-1/"},{"categories":["notes"],"content":"函数 ","date":"2020-06-14","objectID":"/posts/notes/20200614/:1:0","tags":null,"title":"严格模式（二）","uri":"/posts/notes/20200614/"},{"categories":["notes"],"content":"参数名必须唯一 在严格模式下，要求命名函数的参数必须唯一。 function fn(a, a, b) { console.log(a + a + b); } fn(1, 2, 3); //7 例如以上代码，非严格模式下会输出7，两个参数a都会被当作2；但在严格模式下，会抛出错误。 ","date":"2020-06-14","objectID":"/posts/notes/20200614/:1:1","tags":null,"title":"严格模式（二）","uri":"/posts/notes/20200614/"},{"categories":["notes"],"content":"arguments的不同 在严格模式下， arguments对象的行为也有所不同。 非严格模式下，修改命名参数的值也会反应到arguments对象中。 严格模式下，命名参数与arguments对象是完全独立的。 \"use strict\"; function fn(value) { var value = \"张无忌\"; console.log(value); // 张无忌 console.log(arguments[0]); //严格模式下为周芷若 非严格模式下为周芷若 } fn(\"周芷若\"); 非严格模式下arguments对象获取参数的值与形参有关。（如果局部变量与形参名相同，则根据就近原则获取）；严格模式下arguments对象获取参数的值与形参无关。 \r","date":"2020-06-14","objectID":"/posts/notes/20200614/:1:2","tags":null,"title":"严格模式（二）","uri":"/posts/notes/20200614/"},{"categories":["notes"],"content":"arguments.callee() 在严格模式下，不能使用armaments对象的callee()方法。 \"use strict\"; function fn() { return arguments.callee; } fn(); 以上代码在严格模式下会直接报错。 ","date":"2020-06-14","objectID":"/posts/notes/20200614/:1:3","tags":null,"title":"严格模式（二）","uri":"/posts/notes/20200614/"},{"categories":["notes"],"content":"函数声明的限制 在严格模式下，只能在全局域和函数域中声明函数。 \"use strict\"; // 在全局作用域 function fn() { function n() {} } for (var i = 0; i \u003c 10; i++) { // ECMAscript 6 新增 - 存在块级作用域 var v = 100; // 开启严格模式后在块级不能定义函数 function f() { console.log(\"this is function\"); } } console.log(v); // 100 f(); // ReferenceError: f is not defined 在严格模式下，函数的定义只能在全局作用域与函数作用域，不能在块级作用域 \r","date":"2020-06-14","objectID":"/posts/notes/20200614/:1:4","tags":null,"title":"严格模式（二）","uri":"/posts/notes/20200614/"},{"categories":["notes"],"content":"增加eval()作用域 在严格模式下，使用eval()函数创建的变量只能在eval()函数内部使用。 eval(\"var v = 100\"); console.log(v); 以上代码在非严格模式下会输出100，而在严格模式下会抛出错误。 在严格模式下，会增加eval作用域。也就是说在eval函数定义的变量只能在当前eval函数使用。 ","date":"2020-06-14","objectID":"/posts/notes/20200614/:2:0","tags":null,"title":"严格模式（二）","uri":"/posts/notes/20200614/"},{"categories":["notes"],"content":"arguments对象–禁止读写 在严格模式下，禁止使用eval()和arguments作为标示符，也不允许读写它们的值。 使用var声明。 赋予另一个值 尝试修改包含的值。 用作函数名。 用作命名的函数的参数。 在 try-catch语句中用作例外名。 以下语句在严格模式下均会报错： eval = 17; arguments++; ++eval; var obj = { set p(arguments) {}, }; var eval; try { } catch (arguments) {} function x(eval) {} function (eval) { } function arguments() { } var y = function eval() { } var f = new Function('arguments', \"'use strict';return 17;\") ","date":"2020-06-14","objectID":"/posts/notes/20200614/:3:0","tags":null,"title":"严格模式（二）","uri":"/posts/notes/20200614/"},{"categories":["notes"],"content":"抑制this 在非严格模式下使用数的apyly()或call()方法时，null或undefined值会被转换为全局对象。 在严格模式下，函数的this值始终是指定的值（无论什么值）。 \"use strict\"; var v = 100; function fn() { console.log(this.v); } var obj = { v: 200, }; fn.call(null); 在严格模式下会抛出错误，必须明确指定this，例如fn.call(obj);。 ","date":"2020-06-14","objectID":"/posts/notes/20200614/:4:0","tags":null,"title":"严格模式（二）","uri":"/posts/notes/20200614/"},{"categories":["notes"],"content":"概述 ","date":"2020-06-13","objectID":"/posts/notes/20200613/:1:0","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"严格模式是什么 严格模式是Javascript中的一种限制性更强的変种方式。严格模式不是一个子集：它在语义上与正常代码有着明显的差异。 不支持严格模式的刘览器与支持严格模式的浏览器行为上也不一样，所以不要在未经严格模式特性测试情况下使用严格模式。 严格模式可以与非严格模式共存，所以脚本可以逐渐的选择性加入严格模式。 ","date":"2020-06-13","objectID":"/posts/notes/20200613/:1:1","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"严格模式的目的 首先，严格模式会将Javascript陷阱直接变成明显的错误。 其次，严格模式修正了一些引擎难以优化的错误：同样的代码有些时候严格模式会比非严格模式下更快 第三，严格模式禁用了一些有可能在未来版本中定义的语法。 ","date":"2020-06-13","objectID":"/posts/notes/20200613/:1:2","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"开启严格模式 ","date":"2020-06-13","objectID":"/posts/notes/20200613/:2:0","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"全局开启严格模式 只需要在全局写以下字符串即可。作用于全局作用域 \"use strict\"; a = 100; console.log(a); ","date":"2020-06-13","objectID":"/posts/notes/20200613/:2:1","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"函数开启严格模式 在函数内写以下字符串即可。只作用于函数作用域。例如： function fn() { \"use strict\"; v = 200; console.log(v); } ","date":"2020-06-13","objectID":"/posts/notes/20200613/:2:2","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"变量 ","date":"2020-06-13","objectID":"/posts/notes/20200613/:3:0","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"禁止意外创建变量 非严格模式 在函数作用域中定义变量，不适用var关键字那么自动将其提升为全局变量。例如： function fn() { w = 200; console.log(w); //200 } fn(); console.log(w); //200 严格模式下 在严格模式下则会抛出异常 \"use strict\"; function fn() { // 在函数作用域中定义变量 - 不适用var关键字-\u003e 自动将其提升为全局变量 w = 200; console.log(w); } fn(); console.log(w); // v = 100; // ^ ","date":"2020-06-13","objectID":"/posts/notes/20200613/:3:1","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"静默失败转为异常 所谓静默失败就是既不报错也没有任何效果，例如改变常量的值。在严格模式下，静默失败会转换成抛出异常。 例如： // 定义一个常量 const v = 3.14; // 重新赋值 v = 1.14; console.log(v); 以上代码在稍微老一点的浏览器可能并不会报错（新版报错），但开启严格模式后，一定会报错。 ","date":"2020-06-13","objectID":"/posts/notes/20200613/:3:2","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"禁止delete关键字 在严格模式下不能对变量使用delete运算符。 例如： var v = 100; console.log(v); //100 delete v; console.log(v); //100 严格模式下会抛出一个错误 非严格模式下会输出两个100 严格模式下禁用delete只针对删除变量，而不是数组元素和对象属性。 \r \"use strict\"; var arr = [0, 1, 2, 3, 4]; delete arr[0]; console.log(arr); //[ \u003c1 empty item\u003e, 1, 2, 3, 4 ] var obj = { name: \"张无忌\", }; delete obj.name; console.log(obj.name); // undefined ","date":"2020-06-13","objectID":"/posts/notes/20200613/:3:3","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"对变量名的限制 在严格模式下，JavaScript对变量名也有限制。特别不能使用如下内容作为变量名： implements interface let package private protected public static yield 上述关键词表示在ECMAScript的下一个版本中可能会用到他们，在严格模式下使用以上字符作为变量名会导致语法错误。 ","date":"2020-06-13","objectID":"/posts/notes/20200613/:3:4","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"对象 ","date":"2020-06-13","objectID":"/posts/notes/20200613/:4:0","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"不可删除的属性 \"use strict\"; delete Object.prototype; console.log(Object.prototype); // 报错 非严格模式下不会报错，但也不会删除成功。但在严格模式下会直接抛出错误。 但严格模式并不会限制所有对象，例如： \"use strict\"; delete Math.random; console.log(Math.random); //undefined Math.random(); 即使在严格模式下，还是可以删除Math.random方法。 ","date":"2020-06-13","objectID":"/posts/notes/20200613/:4:1","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"属性名必须唯一 在严格模式下，一个对象内的所有属性名在对象内必须唯一。 \"use strict\"; var obj = { name: \"张无忌\", name: \"周芷若\", }; console.log(obj.name); // 周芷若 开启严格模式后，如果对象具有相同属性，那么并不会报错，而是覆盖。 ","date":"2020-06-13","objectID":"/posts/notes/20200613/:4:2","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"只读属性的赋值 \"use strict\"; var obj = {}; Object.defineProperty(obj, \"age\", { value: 18, }); // 针对只读属性进行修改操作 obj.age = 80; console.log(obj.age); delete obj.age; console.log(obj.age); 对于不可修改的属性，无论是修改还是删除都会发生报错。 ","date":"2020-06-13","objectID":"/posts/notes/20200613/:4:3","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"不可扩展的对象 在严格模式下，不能为不可扩展的对象添加新属性。 \"use strict\"; var obj = {}; // 设置对象obj是一个不可扩展的对象 Object.preventExtensions(obj); // 为对象obj新增属性或方法 obj.name = \"张无忌\"; console.log(obj); 以上代码在严格模式下会报错，非严格模式下不会报错。 ","date":"2020-06-13","objectID":"/posts/notes/20200613/:4:4","tags":null,"title":"严格模式（一）","uri":"/posts/notes/20200613/"},{"categories":["notes"],"content":"new绑定 在Javascript中，构造函数只是一些使用new操作符时被调用的函数。包括内置对象函数在内的所有函数都可以用new来调用，这种函数调用被称为构造函数调用。 使用new来调用函数，会自动执行下面的操作： 创建（或者说构造）一个全新的对象。 这个新对象会绑定到函数调用的this. 如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象。 function Hero(name) { this.name = name; } // this 取决于函数调用的位置 var hero1 = new Hero(\"张无忌\"); var hero2 = new Hero(\"周芷若\"); ","date":"2020-06-10","objectID":"/posts/notes/20200610/:0:1","tags":null,"title":"this关键字（二）","uri":"/posts/notes/20200610/"},{"categories":["notes"],"content":"示例 function Hero() { this.name = \"张无忌\"; this.sayMe = function () { console.log(this.name); }; } function samllHero() { Hero.call(this); this.age = 19; this.sayMe = function () { console.log(this.name + this.age); }; } var hero = new samllHero(); hero.sayMe(); //张无忌19 var obj = { name: \"周芷若\", age: 80, sayMe: hero.sayMe, }; obj.sayMe(); //周芷若80 ","date":"2020-06-10","objectID":"/posts/notes/20200610/:0:2","tags":null,"title":"this关键字（二）","uri":"/posts/notes/20200610/"},{"categories":["notes"],"content":"绑定例外 ","date":"2020-06-10","objectID":"/posts/notes/20200610/:1:0","tags":null,"title":"this关键字（二）","uri":"/posts/notes/20200610/"},{"categories":["notes"],"content":"被忽略的this 如果把null或者undefined作为this的绑定对象传入call, applya或者bind，这些值在调用时会被忽略，实际应用的是默认绑定规则。 情况1 function fn() { console.log(this.v); } var v = 100; fn.call(null); // node环境下为undefined 浏览器环境下为100 情况2 var result = Math.max.apply(null, [1, 2, 3, 4, 5, 6]); console.log(result); // 6 ","date":"2020-06-10","objectID":"/posts/notes/20200610/:1:1","tags":null,"title":"this关键字（二）","uri":"/posts/notes/20200610/"},{"categories":["notes"],"content":"间接引用 有可能（有意或者无意地）创建一个函数的“间接引用”，在这种情况下，调用这个函数会应用默认绑定规则 function foo() { console.log(this.a); } var a = 2; var o = { a: 3, foo: foo, }; o.foo(); //3 var p = { a: 4 }; p.foo = o.foo; p.foo(); //4 (p.foo = o.foo)(); //node环境下undefined 浏览器环境下为2 ","date":"2020-06-10","objectID":"/posts/notes/20200610/:1:2","tags":null,"title":"this关键字（二）","uri":"/posts/notes/20200610/"},{"categories":["notes"],"content":"注意事项 ","date":"2020-06-10","objectID":"/posts/notes/20200610/:2:0","tags":null,"title":"this关键字（二）","uri":"/posts/notes/20200610/"},{"categories":["notes"],"content":"避免多层this 情况1 function fn() { console.log(this.a); function n() { // this指向全局，因为独立调用 console.log(this.a); } n(); } fn(); // undefined // undefined 情况2 var obj = { v: 100, fn: function () { console.log(this.v); function n() { // this指向全局 console.log(this.v); } n(); }, }; obj.fn(); ","date":"2020-06-10","objectID":"/posts/notes/20200610/:2:1","tags":null,"title":"this关键字（二）","uri":"/posts/notes/20200610/"},{"categories":["notes"],"content":"避免数组方法中的this 情况1 var arr = [1, 2, 3, 4, 5, 6]; arr.forEach(function (value, index) { // this指向全局 console.log(this.v); }); 情况2 var obj = { v: 100, arr: [1, 2, 3, 4, 5], f: function () { this.arr.forEach(function (value) { // this指向全局 console.log(this.v); }); }, }; obj.f(); ","date":"2020-06-10","objectID":"/posts/notes/20200610/:2:2","tags":null,"title":"this关键字（二）","uri":"/posts/notes/20200610/"},{"categories":["notes"],"content":"避免回调函数中的this var obj = { v: 100, f: function () { console.log(this.v); }, }; obj.f(); function fn(a) { // 此时的this指向全局 a(); } fn(obj.f); ","date":"2020-06-10","objectID":"/posts/notes/20200610/:2:3","tags":null,"title":"this关键字（二）","uri":"/posts/notes/20200610/"},{"categories":["notes"],"content":"概述 ","date":"2020-06-09","objectID":"/posts/notes/20200609/:1:0","tags":null,"title":"this关键字（一）","uri":"/posts/notes/20200609/"},{"categories":["notes"],"content":"this是什么 this文键字是Javascript中最复杂的机制之ー。它是一个很特别的关键字，被自动定义在所有函数的作用域中。但是即使是非常有经验的 Javascript开发者也很难说清它到底指向什么。 实际上， Javascript中this的机制井没有那么先进，但是开发者往往会把理解过程复杂化。亳不夸张地说，不理解它的含义，大部分开发任务都无法完成。 this都有一个共同点，它总是返回一个对象。简单说，this就是属性或方法“当前”所在的对象。 ","date":"2020-06-09","objectID":"/posts/notes/20200609/:1:1","tags":null,"title":"this关键字（一）","uri":"/posts/notes/20200609/"},{"categories":["notes"],"content":"为什么使用this this提供了一种更优雅的方式来隐式“传递”一个对象引用，因此可以将API设计得更加简洁井且易于复用。 随着使用模式越来越复杂，显式传递上下文对象会让代码变得越来越混乱，使用this则不会这样。 ","date":"2020-06-09","objectID":"/posts/notes/20200609/:1:2","tags":null,"title":"this关键字（一）","uri":"/posts/notes/20200609/"},{"categories":["notes"],"content":"调用位置 想要了解this的绑定过程，首先要理解调用位置：调用位置就是函数在代码中被调用的位置（而不是声明的位置） 通常来说，寻找调用位置就是寻找“函数被调用的位置”。最重要的是要分析调用栈（就是为了到达当前执行位置所调用的所有函数 函数调用 var v = 100; // this 经常被定义在函数的作用域中 function fn() { // this总是要返回一个对象 console.log(this.v); //this指向哪个对象，不取决于定义的位置 } // this 指向哪个对象，取决于调用的位置 fn(); // 函数的调用 结果为：100（浏览器环境） 对象调用 var v = 100; // this 经常被定义在函数的作用域中 function fn() { // this总是要返回一个对象 console.log(this.v); //this指向哪个对象，不取决于定义的位置 } // 定义一个对象，将fn函数作为obj对象的方法 var obj = { v: 200, f: fn, }; obj.f(); //200 直接调用 var v = 100; // this 指向哪个对象，取决于调用的位置 console.log(this.v); // 100 （浏览器环境） ","date":"2020-06-09","objectID":"/posts/notes/20200609/:1:3","tags":null,"title":"this关键字（一）","uri":"/posts/notes/20200609/"},{"categories":["notes"],"content":"绑定规则 ","date":"2020-06-09","objectID":"/posts/notes/20200609/:2:0","tags":null,"title":"this关键字（一）","uri":"/posts/notes/20200609/"},{"categories":["notes"],"content":"默认绑定 在一个函数体中使用this，当该函数被独立调用。可以把这条规则看作是无法应用其他规则时的默认规则。 function fn() { console.log(this.v); } var v = 100; fn(); //100 声明在全局作用域中的变量（比如var v=100)就是全局对象的一个同名属性。当调用fn()函数时，this.v被解析成了全局变量v。 函数调用时应用了this的默认绑定，因此this指向全局对象。 ","date":"2020-06-09","objectID":"/posts/notes/20200609/:2:1","tags":null,"title":"this关键字（一）","uri":"/posts/notes/20200609/"},{"categories":["notes"],"content":"隐式绑定 隐式绑定的规则需要考虑的是调用位置是否有上下文对象，或者说是否被某个对象拥有或者包含。当然，这种说法井不准确。 function fn() { console.log(this.v); } var obj = { v: 200, f: fn, }; obj.f(); //200 调用位置会使用obj上下文来引用函数，因此你可以说函数被调用时obj对象“拥有”或者“包含”它。 隐式丢失\r隐式丢失是最常见的this绑定问题，指的就是被隐式绑定的函数会丢失绑定对象，也就是说它会应用默认绑定，从而把this绑定到全局对象。 // 定义一个全局变量 var v = 100; // 定义一个函数 function fn() { console.log(this.v); } // 定义一个对象 var obj = { v: 200, f: fn, //对象的f()方法指向fn()函数 }; // 定义一个全局变量,并被赋值为对象obj的f()方法 var fun = obj.f; // 将fun作为一个函数进行调用 fun(); //nodejs环境下为undefined；浏览器环境下是100 ","date":"2020-06-09","objectID":"/posts/notes/20200609/:2:2","tags":null,"title":"this关键字（一）","uri":"/posts/notes/20200609/"},{"categories":["notes"],"content":"显式绑定 显式绑定就是明确在调用时，this所绑定的对象。 Javascript中提供了apply()方法和call()方法实现，这两个方法的第一个参数接收是一个对象，会把这个对象绑定到this，接着在调用函数时指定这个this。 // 定义一个全局变量 var v = 100; // 定义一个函数 function fn() { console.log(this.v); } // 定义一个对象 var obj = { v: 200, f: fn, //对象的f()方法指向fn()函数 }; // 定义一个全局变量,并被赋值为对象obj的f()方法 var fun = obj.f; // 将fun作为一个函数进行调用 fun.apply(obj); ","date":"2020-06-09","objectID":"/posts/notes/20200609/:2:3","tags":null,"title":"this关键字（一）","uri":"/posts/notes/20200609/"},{"categories":["notes"],"content":"继承链 类别 备注 constructor prototype __poroto__ （构造）函数 函数即对象 指向Function 指向一个constructor为自身的空对象 对象 指向创建该对象的构造函数 源于创建该对象的构造函数的显式原型 Function 是所有构造器的源头 指向自身 对象的constructor指向自身 Object Object.prototype是所有原型的源头 指向Function 是一个constructor指向自身的空对象 参考于： ","date":"2020-06-09","objectID":"/posts/notes/20200609/:3:0","tags":null,"title":"this关键字（一）","uri":"/posts/notes/20200609/"},{"categories":["notes"],"content":"面向对象的继承 基于对象的原型实现 object.__proto__ = obj 指向一个对象 基于构造函数的原型实现 Object.prototype 指向一个空对象 ","date":"2020-06-09","objectID":"/posts/notes/20200609/:4:0","tags":null,"title":"this关键字（一）","uri":"/posts/notes/20200609/"},{"categories":["notes"],"content":"继承常见的几种方式 原型链继承: 原型与对象继承; 只继承于原型 问题: 实际上并不是真正的继承, 其实是多个构造函数之间共享一个对象(属性和方法) 创建子类的对象时, 不能向父级的构造函数传递任何参数。 原型式继承 借助构造函数: apply() 或 call() 方法 问题: this 的传递 组合方式继承: 原型链 + 构造函数 ","date":"2020-06-09","objectID":"/posts/notes/20200609/:4:1","tags":null,"title":"this关键字（一）","uri":"/posts/notes/20200609/"},{"categories":["notes"],"content":"面向对象 ","date":"2020-06-09","objectID":"/posts/notes/20200609/:5:0","tags":null,"title":"this关键字（一）","uri":"/posts/notes/20200609/"},{"categories":["notes"],"content":"对象 创建对象的方式\r 构造函数方式 var obj = new Object() 直接量方式 var obj = { name: \"lilei\", sayMe: function () { console.log(\"this is lilei\"); } } 构造器(constructor)\r对象的构造器都是指向创建该对象的构造函数。例如以下示例代码: function Foo() {} var foo = new Foo() 上述示例代码中的 foo 对象的构造器就是 Foo。 隐式原型(__proto__)\r对象的隐式原型与创建该对象的构造函数的显式原型是指向同一个对象。 function Foo() {} var foo = new Foo() console.log(foo.__proto__ === Foo.prototype) ","date":"2020-06-09","objectID":"/posts/notes/20200609/:5:1","tags":null,"title":"this关键字（一）","uri":"/posts/notes/20200609/"},{"categories":["notes"],"content":"函数 函数创建方式\r 直接量方式 var fun = function(){} 与 JavaScript 中的变量是存在关系，例如以下示例代码: var fun = function(){} var fun = 'this is text' console.log(fun) // 'this is text' 上述示例代码存在覆盖问题。 初始化器方式 function fun(){} 构造函数方式 var fun = new Function() 上述示例代码说明函数是一个 Function 类型的对象。 函数的特性\r 函数可能与变量之间存在关系(直接量方式定义函数时) 函数与构造函数允许同时存在的 函数是一个 Function 类型的对象 显式原型(prototype)\r构造函数的显式原型与利用该构造函数所创建对象的隐式原型是指向同一个对象。 构造器(constructor)\r函数的构造器就是 Function。 function fun(){} console.log(fun.constructor === Function) 隐式原型(__proto__)\r函数的隐式原型与 Function 的显式原型是指向同一个对象。 ","date":"2020-06-09","objectID":"/posts/notes/20200609/:5:2","tags":null,"title":"this关键字（一）","uri":"/posts/notes/20200609/"},{"categories":["notes"],"content":"错误与异常是什么 错误，指程序中的非正常运行状态，在其它编程语言中称为“异常”或“错误”。解释器会为每个错误情形创建并抛出一个Error对象，其中包含错误的描述信息。 通过使用Javascript提供的异常处理语句，可以用结构化的方式来捕捉发生的错误，让异常处理代码与核心业务代码实现分离。 错误与异常处理在应用中的重要性是毋庸置疑的。任何有影响力的Web应用都需要一套完善的错误处理机制。 ","date":"2020-06-08","objectID":"/posts/notes/20200608/:1:0","tags":null,"title":"错误与异常","uri":"/posts/notes/20200608/"},{"categories":["notes"],"content":"try…catch语句 try表示标记一块待尝试的语句，如果语句出现错误，则通过catch语句进行捕捉。 // 用于捕获指定语句块中的错误或异常 try { console.log(v); //调用未定义的变量 -\u003e 报错 } catch (error) { // 用于处理try语句中的错误 // error 表示try语句中出现错误的信息 console.log(\"改变量未定义\"); } finally { // catch语句无法处理try语句中的错误或异常时，执行finally语句中的内容 console.log(\"\"); } finally表示最后执行，无论是走try还是catch都会执行finally语句。 ","date":"2020-06-08","objectID":"/posts/notes/20200608/:2:0","tags":null,"title":"错误与异常","uri":"/posts/notes/20200608/"},{"categories":["notes"],"content":"throw语句 人为抛出错误或异常，语法结构throw 异常或错误的表达式 。其表达式允许是任意类型的内容。作用为预判断当前使用的变量、函数或对象是否存在。 function fn(v) { if (v) { return v; } else { /** * throw 语句 - 人为抛出错误或异常 * 语法结构 * - throw 异常或错误的表达式 * 表达式允许是任意类型的内容 * 作用 - 预判断当前使用的变量、函数或对象是否存在 */ // 真是情况下应抛出一个错误对象 throw \"undefined\"; } } // console.log(fn(10)); // console.log(fn()); var result; try { result = fn(); } catch (e) { result = \"unkown\"; console.log(e); // undefined } console.log(result); // unkown ","date":"2020-06-08","objectID":"/posts/notes/20200608/:3:0","tags":null,"title":"错误与异常","uri":"/posts/notes/20200608/"},{"categories":["notes"],"content":"嵌套try…catch语句 可以嵌套一个或多个try…catch语句。如果一个内部的try…catch语句没有捕捉块，将会启动匹配外部的try…catch语句的捕捉块。 注意：嵌套在catch语句块内。 try { console.log(0); } catch (e) { try { console.log(1); } catch (e) { console.log(2); } } ","date":"2020-06-08","objectID":"/posts/notes/20200608/:4:0","tags":null,"title":"错误与异常","uri":"/posts/notes/20200608/"},{"categories":["notes"],"content":"错误类型 ","date":"2020-06-08","objectID":"/posts/notes/20200608/:5:0","tags":null,"title":"错误与异常","uri":"/posts/notes/20200608/"},{"categories":["notes"],"content":"基本错误类型 执行代码期间可能会发生的错误有多种类型，每种错误都有对应的错误类型。当错误发生时，就会抛出对应类型的错误对象。 Error是基本错误类型，其他错误类型都继承自该类型。Error类型的错误很少见，如果有也是浏览器抛出的。这个基本错误类型的主要目的是提供给开发人员抛出自定义错误的。 ","date":"2020-06-08","objectID":"/posts/notes/20200608/:5:1","tags":null,"title":"错误与异常","uri":"/posts/notes/20200608/"},{"categories":["notes"],"content":"预定义错误类型 错误类型 说明 EvaError 表示错误的原因：与eval()有关。 internalError 表示JavaScript引擎内部错误的异常。 RangeError 表示错误的原因：数值变量或参数超出其有效范围。 ReferenceError 表示错误的原因：无效引用。 SyntaxError 表示错误的原因：eval()在解析代码的过程中发生的语法错误。 TypeError 表示错误的原因：变量或参数不属于有效类型。 URIError 表示错误的原因：给encodeURI()或decodeURI()传递的参数无效。 JavaScript 错误参考 ","date":"2020-06-08","objectID":"/posts/notes/20200608/:5:2","tags":null,"title":"错误与异常","uri":"/posts/notes/20200608/"},{"categories":["notes"],"content":"继承 ","date":"2020-06-07","objectID":"/posts/notes/20200607/:1:0","tags":null,"title":"继承（二）","uri":"/posts/notes/20200607/"},{"categories":["notes"],"content":"原型式继承 所谓原型式继承，就是定义一个函数，该函数中创建一个临时性的构造函数，将作为参数传入的对象作为这个构造函数的原型，最后返回这个构造函数的实例对象。 // 定义一个函数 function fn(obj) { // 定义一个临时的构造函数 function Fun() {} // 将函数的参数作为构造函数的原型 Fun.prototype = obj; // 将构造函数创建的对象进行返回 return new Fun(); } var obj = { name: \"张无忌\", }; // 调用函数 var result = fn(obj); console.log(result); 但是以上方式并不能很自由的为对象添加自有属性，因此可以对其函数内的构造函数进行修改（调整）。 /** * 定义一个函数 - 用于实现对象之间的继承 * 参数 * obj - 表示继承关系中的父级对象 * prop - 对象格式，表示继承关系中的子集对象的属性 * */ function fn(obj, prop) { // 定义一个临时的构造函数 function Fun() { // 遍历对象的属性和方法 for (var attrName in prop) { var attrValue = prop[attrName]; this[attrName] = attrValue; } } // 将函数的参数作为构造函数的原型 Fun.prototype = obj; // 将构造函数创建的对象进行返回 return new Fun(); } var obj = { name: \"张无忌\", }; // 调用函数 var result = fn(obj, { age: 18, sayMe: function () { return \"this is sayMe\"; }, }); console.log(result.sayMe()); 其主要区别为为函数多添加一个参数，用于接收自有变量。当进行创建对象时，传入自有变量即可。 \rJavaScript中实现以上函数的功能可以使用Object.create()方法实现。但其传入自有属性时需注意。具体可参照如下代码： \r var obj = { name: \"张无忌\", }; var newObj = Object.create(obj, { age: { value: 18, enumerable: true, }, sayMe: { value: function () { return \"this is function\"; }, }, }); console.log(newObj.name); // 张无忌 console.log(newObj); // { age: 18 } console.log(newObj.sayMe()); // this is function ","date":"2020-06-07","objectID":"/posts/notes/20200607/:1:1","tags":null,"title":"继承（二）","uri":"/posts/notes/20200607/"},{"categories":["notes"],"content":"借助构造函数 无论是原型链还是原型式继承，都具有相同的问题。想要解決这样的问题的话，可以借助构造函数（也可以叫做伪造对象或经典继承）。 这种方式实现非常简单，就是在子对象的构造函数中调用父对象的构造函数。具体可以通过调用apply()和 call()方法实现。 apply()和call()方法都允许传递指定某个对象的this。对于继承来讲，可以实现在子对象的构造函数中调用父对象的构造函数时，将子对象的this和父对象的this绑定在一起。 // 定义父级对象的构造函数 function Parent() { this.parent = \"parent\"; } // 定义子级对象的构造函数 function Child() { // 调用父级对象的构造函数 -\u003e 使用apply()或call()方法 Parent.apply(this); this.child = \"child\"; } // 创建子级对象 var child = new Child(); console.log(child); ","date":"2020-06-07","objectID":"/posts/notes/20200607/:1:2","tags":null,"title":"继承（二）","uri":"/posts/notes/20200607/"},{"categories":["notes"],"content":"组合方式继承 组合继承，也叫做伪经典继承，指的是将原型链或原型式继承和借助构造函数的技术组合在一起，发挥二者长处的一种继承方式。 具体实现的思路就是： 使用原型链或原型式继承实现对原型的属性和方法的继承。 通过借助构造函数实现对实例对象的属性的继承。 这样，既通过在原型上定义方法实现了函数的重用，又可以保证每个对象都有自己的专有属性。 function Parent() { // 构造函数的自有属性 this.name = \"张无忌\"; } // 构造函数的原型属性 Parent.prototype.age = 18; function Child() { // 继承父级构造函数中的自有属性 Parent.call(this); this.job = \"教主\"; } // 继承父级构造函数中的原型属性 Child.prototype = Parent.prototype; var child = new Child(); console.log(child.job); console.log(child.age); console.log(child.name); ","date":"2020-06-07","objectID":"/posts/notes/20200607/:1:3","tags":null,"title":"继承（二）","uri":"/posts/notes/20200607/"},{"categories":["notes"],"content":"原型链 ","date":"2020-06-06","objectID":"/posts/notes/20200606/:1:0","tags":null,"title":"继承（一）","uri":"/posts/notes/20200606/"},{"categories":["notes"],"content":"原型链是什么 如果构造函数或对象A，A的原型指向构造函数或对象B，B的原型再指向构造函数或对象C，以此类推，最终的构造函数或对象的原型指向Objecte的原型。由此形成一条链状结构，被称之为原型链。 按照上述的描述，在B中定义的属性或方法，可以直接在A中使用井不需要定义。这就是继承，它允许每个对象来访问其原型链上的任何属性或方法。 原型链是ECMAScript标准中指定的默认实现继承的方式。 // 此方法实现继承并不好，不建议使用 function A() { this.a = \"a\"; } // 通过构造函数创建对象 var a = new A(); function B() { this.b = \"b\"; } // 将B的原型指向对象a B.prototype = a; var b = new B(); console.log(b.a); //a console.log(b.b); //b console.log(b.c); //undefined function C() { this.c = \"c\"; } // 将C的原型指向对象b C.prototype = b; var c = new C(); console.log(c.a); //a console.log(c.b); //b console.log(c.c); //c ","date":"2020-06-06","objectID":"/posts/notes/20200606/:1:1","tags":null,"title":"继承（一）","uri":"/posts/notes/20200606/"},{"categories":["notes"],"content":"只继承于原型 出于对效率的考虑，尽可能地将属性和方法添加到原型上。 不要为继承关系单独创建新对象 尽量减少运行时的方法搜索。 function A() { // this.a = \"a\"; } A.prototype.a = \"a\"; function B() { // this.b = \"b\"; } // 将B的原型指向对象a B.prototype = A.prototype; // 注意顺序 B.prototype.b = \"b\"; function C() { this.c = \"c\"; } // 将C的原型指向 C.prototype = B.prototype; var c = new C(); console.log(c.a); console.log(c.b); console.log(c.c); 在此方法中，中间的继承有格式写法的限制要求。但在性能上比原型链好。 \r","date":"2020-06-06","objectID":"/posts/notes/20200606/:1:2","tags":null,"title":"继承（一）","uri":"/posts/notes/20200606/"},{"categories":["notes"],"content":"原型链的问题 原型链虽然很强大，用它可以实现Javascript中的继承，但同时也存在着一些问题。 原型链实际上是在多个构造函数或对象之间共享属性和方法。 function A() { // this.a = \"a\"; } A.prototype.a = \"a\"; function B() { // this.b = \"b\"; } // 将B的原型指向对象a B.prototype = A.prototype; // 注意顺序 B.prototype.b = \"b\"; function C() { // this.c = \"c\"; } // 将C的原型指向 C.prototype = B.prototype; C.prototype.c = \"c\"; var c = new C(); console.log(c.a); // a console.log(c.b); // b console.log(c.c); // c var b = new B(); console.log(b.a); // a console.log(b.b); // b console.log(b.c); // c var a = new A(); console.log(a.a); // a console.log(a.b); // b console.log(a.c); // c 创建子类的对象时，不能向父级的构造函数传递任何参数。 综上所述，在实际开发中很少会单独使用原型链。 ","date":"2020-06-06","objectID":"/posts/notes/20200606/:1:3","tags":null,"title":"继承（一）","uri":"/posts/notes/20200606/"},{"categories":["project"],"content":"前期准备 全局作用域问题 \r解决这个问题是通过匿名函数，然后在匿名函数内创建对象，将window作为参数传入匿名函数，并将此对象赋值与window (function (global) { // 判断global对象是否真的存在 if (!global) { console.error(\"当前环境不是浏览器环境！\"); return false; } // 定义一个统一对外开放的对象 var mytool = new Object(); global.mytool = mytool; })(window); 此时在全局作用域中便存在了一个对象mytool。 ","date":"2020-06-03","objectID":"/posts/project/20200603/:1:0","tags":null,"title":"基于面向对象的工具库练习","uri":"/posts/project/20200603/"},{"categories":["project"],"content":"选择器 实现一个选择器，用于替代getElementById、getElementsByClassName、getElementsByTagName三种获取方式。 实现方式，将需要搜索的标签名（id，class，tagname）传入方法参数，通过内部处理返回一个数组。 对于id选择器或class选择器来说，传入形参为#id或.class。那么只需要去匹配第一个字符即可。 如果不匹配以上两种情况，那么可以视为TagName。 mytool.getElement = function (selector) { // 判断selector是否为空 if (selector !== \"\" \u0026\u0026 selector !== undefined \u0026\u0026 selector !== null) { // 判断当前选择器 var firstSelector = selector.slice(0, 1); var lastSelector = selector.slice(1); var result, arr = []; if (firstSelector === \"#\") { // ID查找 result = document.getElementById(lastSelector); } else if (firstSelector === \".\") { // class查找 result = document.getElementsByClassName(lastSelector); } else { // tagname查找 result = document.getElementsByTagName(selector); } if (result.length) { for (var i = 0; i \u003c result.length; i++) { arr.push(result[i]); } } else { arr.push(result); } return arr; } }; ","date":"2020-06-03","objectID":"/posts/project/20200603/:2:0","tags":null,"title":"基于面向对象的工具库练习","uri":"/posts/project/20200603/"},{"categories":["project"],"content":"选择器的改造 定义开放给全局作用域的变量，其具有两重身份 本身应该是一个对象：通过构造函数方式来创建(自身方法和原型方法都存在) 将之前定义页面元素返回的结果(数组)和当前这个对象进行整合，因此需要使用类数组对象 应该是一个函数, 该函数封装定位页面元素功能 类数组对象 \r实现一个类数组对象只需要将某个构造函数的原型指向一个数组即可。例如： function createObject() { this.name = \"李雷\"; this.sayMe = function () {}; } // 构造函数的原型属性 -\u003e 其实是一个空对象 -\u003e 利用最简形式实现继承 createObject.prototype = new Array(); // 结构上是一个, 自定义的一个对象 -\u003e 类数组对象 var newObj = new createObject(); newObj.push(\"xxx\"); console.log(newObj); 函数 \r在函数内部创建核心对象，操作在核心对象上，最后返回这个对象。 var _mytool = function (selector) { // 创建核心对象 var _tool = new createMyTool(); // 判断selector是否为空 if (selector !== \"\" \u0026\u0026 selector !== undefined \u0026\u0026 selector !== null) { // 如何判断当前使用的是哪一种选择器? 判断第一个字符是什么 var firstSelector = selector.slice(0, 1); var result; if (firstSelector === \"#\") { // 当前就是ID查找 result = document.getElementById(selector.slice(1)); } else if (firstSelector === \".\") { // 当前就是className查找 result = document.getElementsByClassName(selector.slice(1)); } else { // 当前就是TagName查找 result = document.getElementsByTagName(selector); } if (result.length) { // 当前得到结果是集合 for (var i = 0; i \u003c result.length; i++) { _tool.push(result[i]); } } else { // 当前得到结果是元素 _tool.push(result); } } // 在当前函数中返回一个对象 return _tool; }; NOTE 在函数内部定义局部变量、内部函数或对象时, 命名格式经常使用”_“作为前缀 目的主要为了与真正在全局作用域中定义变量、对象或函数进行区分 在实际开发, 经常会使用一个符号替代对象名. 比如后面要学习的jQuery库, 使用\"$\"替代对象 \r","date":"2020-06-03","objectID":"/posts/project/20200603/:3:0","tags":null,"title":"基于面向对象的工具库练习","uri":"/posts/project/20200603/"},{"categories":["project"],"content":"选择器的再次改造 首先是需要判断当前的运行环境 改造的思路为，判断当前环境是否存在document，如果存在则为浏览器环境，如果不存在为其他环境。当浏览器环境时，去运行一个回调函数。 (function (global, factory) { if (global.document) { // 浏览器环境 factory(global); } else { // 非浏览器环境 } })(window !== undefined ? window : this, function (window) {}) 于是匿名函数的结构就变成了如上结构。 传入的windows形参是为了增加功能时直接使用的全局对象。 开放给全局的对象 回调函数需要明确的是：还是需要返回一个类数组对象，并且需要开放给全局一个对象来使用。 (function (global, factory) { if (global.document) { // 浏览器环境 factory(global); } else { // 非浏览器环境 } })(window !== undefined ? window : this, function (window) { //用作核心对象的构造函数 MyTool.init = function () {}; MyTool.init.prototype = new Array(); // 将核心对象开放给全局作用域 window.MyTool = window.$ = MyTool; }) 定义MyTool基本模型 var MyTool = function (selector) { // 实例核心对象 var _mytool = new MyTool.init(); // 如果没有传入参数，那么直接返回核心对象 if (selector === undefined || selector === null || selector === \"\") { return _mytool; } // 返回核心对象 return _mytool; }; 完成选择器的功能 字符串可以使用索引值的方式去取到第一个字符，因此可以替换掉slice var MyTool = function (selector) { // 实例核心对象 var _mytool = new MyTool.init(); // 如果没有传入参数，那么直接返回核心对象 if (selector === undefined || selector === null || selector === \"\") { return _mytool; } // 选择器功能 else if (selector[0] === \"#\") { // 元素的ID属性定位页面元素 result = _document.getElementById(selector.slice(1)); } else if (selector[0] === \".\") { // 元素的class属性定位页面元素 result = _document.getElementsByClassName(selector.slice(1)); } else { // 元素的名称定位页面元素 result = _document.getElementsByTagName(selector); } // 将定位页面元素的结果封装到核心对象中 if (result.length) { // 当前得到结果是集合 for (var i = 0; i \u003c result.length; i++) { _mytool.push(result[i]); } } else { // 当前得到结果是元素 _mytool.push(result); } // 返回核心对象 return _mytool; }; ","date":"2020-06-03","objectID":"/posts/project/20200603/:4:0","tags":null,"title":"基于面向对象的工具库练习","uri":"/posts/project/20200603/"},{"categories":["project"],"content":"扩展创建标签的功能 扩展标签所需要判断的是开头为\u003c，并且最后一个字符为\u003e，且长度大于等于3。那么即可视为创建标签元素。 else if ( selector[0] === \"\u003c\" \u0026\u0026 selector[selector.length - 1] === \"\u003e\" \u0026\u0026 selector.length \u003e= 3 ) { /* 创建元素: 参数中截取到标签名 1. 开始标签中存在属性: 标签名就是从\"\u003c\"到第一个空格之间 2. 开始标签中不存在属性: 标签名就是从\"\u003c\"到第一个\"\u003e\"之间 实现的思路: 1. 截取到第一个\"\u003e\"的索引值 2. 判断从\"\u003c\"到第一个\"\u003e\"之间是否存在空格 * 如果存在: 具有属性 * 如果不存在: 没有属性 */ var firstRightArrowIndex = selector.indexOf(\"\u003e\"); var startTag = selector.slice(0, firstRightArrowIndex + 1); var firstSpaceIndex = startTag.indexOf(\" \"); var tagName, textValue; if (firstSpaceIndex !== -1) { // 开始标签中存在属性 tagName = selector.slice(1, firstSpaceIndex); } else { // 开始标签中不存在属性 tagName = selector.slice(1, firstRightArrowIndex); } var newElement = _document.createElement(tagName); // 是否存在文本内容 if (selector.match(/[\u003c]/g).length === 2) { var lastLeftArrowIndex = selector.lastIndexOf(\"\u003c\"); textValue = selector.slice( firstRightArrowIndex + 1, lastLeftArrowIndex ); newElement.textContext = textValue; } // 是否存在属性 if (firstSpaceIndex !== -1) { var attrArr = startTag.slice(0, firstRightArrowIndex).split(\" \"); for (var i = 1; i \u003c attrArr.length; i++) { var attrText = attrArr[i]; var attrName = attrText.split(\"=\")[0]; var attrValue = attrText.split(\"=\")[1]; attrValue = attrValue.slice(1, attrValue.length - 1); newElement.setAttribute(attrName, attrValue); } } result = newElement; } ","date":"2020-06-03","objectID":"/posts/project/20200603/:5:0","tags":null,"title":"基于面向对象的工具库练习","uri":"/posts/project/20200603/"},{"categories":["project"],"content":"开发历程及代码 时间 开发内容 2020-06-07 选择器的再次改造、扩展创建标签的功能 2020-06-06 选择器的改造 2020-06-03 前期准备、选择器 代码仓库：mytools (function (global, factory) { /** * 目标：判断当前使用工具库的环境是否为浏览器环境 * 如果是浏览器环境，执行对应的逻辑 * 如果非浏览器环境，执行其他的逻辑 */ if (global.document) { // 浏览器环境 factory(global); } else { // 非浏览器环境 } /** * 传递实参时：允许直接传递表达式 -\u003e 将表达式的计算结果作为实参传递 */ })(window !== undefined ? window : this, function (window) { var _document = window.document; var MyTool = function (selector) { // 返回核心对象 var _mytool = new MyTool.init(), result; if (selector === undefined || selector === null || selector === \"\") { return _mytool; } // 创建标签 else if ( selector[0] === \"\u003c\" \u0026\u0026 selector[selector.length - 1] === \"\u003e\" \u0026\u0026 selector.length \u003e= 3 ) { /* 创建元素: 参数中截取到标签名 1. 开始标签中存在属性: 标签名就是从\"\u003c\"到第一个空格之间 2. 开始标签中不存在属性: 标签名就是从\"\u003c\"到第一个\"\u003e\"之间 实现的思路: 1. 截取到第一个\"\u003e\"的索引值 2. 判断从\"\u003c\"到第一个\"\u003e\"之间是否存在空格 * 如果存在: 具有属性 * 如果不存在: 没有属性 */ var firstRightArrowIndex = selector.indexOf(\"\u003e\"); var startTag = selector.slice(0, firstRightArrowIndex + 1); var firstSpaceIndex = startTag.indexOf(\" \"); var tagName, textValue; if (firstSpaceIndex !== -1) { // 开始标签中存在属性 tagName = selector.slice(1, firstSpaceIndex); } else { // 开始标签中不存在属性 tagName = selector.slice(1, firstRightArrowIndex); } var newElement = _document.createElement(tagName); // 是否存在文本内容 if (selector.match(/[\u003c]/g).length === 2) { var lastLeftArrowIndex = selector.lastIndexOf(\"\u003c\"); textValue = selector.slice( firstRightArrowIndex + 1, lastLeftArrowIndex ); newElement.textContext = textValue; } // 是否存在属性 if (firstSpaceIndex !== -1) { var attrArr = startTag.slice(0, firstRightArrowIndex).split(\" \"); for (var i = 1; i \u003c attrArr.length; i++) { var attrText = attrArr[i]; var attrName = attrText.split(\"=\")[0]; var attrValue = attrText.split(\"=\")[1]; attrValue = attrValue.slice(1, attrValue.length - 1); newElement.setAttribute(attrName, attrValue); } } result = newElement; } // 定位页面元素 else if (selector[0] === \"#\") { // 元素的ID属性定位页面元素 result = _document.getElementById(selector.slice(1)); } else if (selector[0] === \".\") { // 元素的class属性定位页面元素 result = _document.getElementsByClassName(selector.slice(1)); } else { // 元素的名称定位页面元素 result = _document.getElementsByTagName(selector); } // 将定位页面元素的结果封装到核心对象中 if (result.length) { // 当前得到结果是集合 for (var i = 0; i \u003c result.length; i++) { _mytool.push(result[i]); } } else { // 当前得到结果是元素 _mytool.push(result); } // 返回核心对象 return _mytool; }; MyTool.init = function () {}; MyTool.init.prototype = new Array(); // 将核心对象开放给全局作用域 window.MyTool = window.$ = MyTool; }); ","date":"2020-06-03","objectID":"/posts/project/20200603/:6:0","tags":null,"title":"基于面向对象的工具库练习","uri":"/posts/project/20200603/"},{"categories":["notes"],"content":"自有属性与原型属性的优先级 自有属性的优先级高于原型属性，也就是说当原型属性与自有属性同时存在时，那么优先打印出的是自有属性。但自有属性不会覆盖原型属性，当删除自有属性时，再次访问该属性，那么会输出原型属性。 // 定义构造函数 function Hero() { this.name = \"张无忌\"; } // 构造函数的原型 Hero.prototype.name = \"周芷若\"; // 构造函数创建对象 var hero = new Hero(); // 自有属性与原型同名时，默认访问的是自有属性 // 自有属性的优先级别高于原型属性 console.log(hero.name); //张无忌 // 删除对象的属性 delete hero.name; console.log(hero.name); //周芷若 ","date":"2020-06-03","objectID":"/posts/notes/20200603/:0:1","tags":null,"title":"原型（二）","uri":"/posts/notes/20200603/"},{"categories":["notes"],"content":"检测自有属性与原型属性 检测自有属性有两种方式，分别为object.hasOwnProperty(prop)与in关键字。但这两种方式是有区别的。 object.hasOwnProperty(prop)方式 参数 示指定属性的名称，字符串类型 返回值 true 表示存在指定属性是自有属性 false 表示不存在指定的自有属性 示例 function Hero() { this.name = \"张无忌\"; // 自有属性 } Hero.prototype.age = 18; var hero = new Hero(); /** * object.hasOwnProperty() * 作用 - 判断当前属性是否为自有属性 * 参数 * prop - 表示指定属性的名称 * 返回值 * true - 表示存在指定属性是自有属性 * false - 表示不存在指定的自有属性 */ console.log(hero.hasOwnProperty(\"name\")); //true console.log(hero.hasOwnProperty(\"age\")); // false console.log(hero.hasOwnProperty(\"sex\")); // false in关键字 返回值 true 表示存在指定属性 false 表示不存在指定属性 示例 function Hero() { this.name = \"张无忌\"; // 自有属性 } Hero.prototype.age = 18; var hero = new Hero(); /** * 使用in关键字检测对象的属性 * 作用 - 判断对象中是否存在指定属性（自有属性或原型属性） * * 返回值 * true - 表示存在指定属性 * false - 表示不存在指定属性 */ console.log(\"name\" in hero); //true console.log(\"age\" in hero); //true console.log(\"sex\" in hero); // false ","date":"2020-06-03","objectID":"/posts/notes/20200603/:0:2","tags":null,"title":"原型（二）","uri":"/posts/notes/20200603/"},{"categories":["notes"],"content":"扩展属性和方法 利用对象.属性或方法的方式新增属性或方法 function Hero() {} // 1. 利用对象.属性或方法的方式新增属性或方法 Hero.prototype.name = \"张无忌\"; Hero.prototype.sayMe = function () { console.log(\"this is function\"); }; var hero = new Hero(); console.log(hero.name); // 张无忌 hero.sayMe(); // this is function 直接将原型重新赋值为一个新对象 function Hero() {} // 2. 直接将原型重新赋值为一个新对象 Hero.prototype = { name: \"张无忌\", sayMe: function () { console.log(\"this is function\"); }, }; var hero = new Hero(); console.log(hero.name); // 张无忌 hero.sayMe(); // this is function 二者区别 第一种是相当于在原有的基础上扩充，而第二种会直接将内存指向改为一个新对象，如果原来新增过属性或方法，则全会丢失。 ","date":"2020-06-03","objectID":"/posts/notes/20200603/:0:3","tags":null,"title":"原型（二）","uri":"/posts/notes/20200603/"},{"categories":["notes"],"content":"隐式原型与显式原型 将函数的原型称为显式原型 将对象的原型成为隐式原型 所有对象都具有原型，但对象的原型(__proto__)并非是函数的原型(prototype)。对象的原型不能用于真实开发工作，仅用于逻辑测试 \r // 定义构造函数 function Hero() { this.name = \"张无忌\"; } // 通过构造函数的原型新增属性或方法 Hero.prototype.age = 18; // 通过构造函数创建对象 var hero = new Hero(); console.log(hero.name); console.log(hero.age); /** * 所有的对象其实也具有原型 * * 注意 - 对象的原型(__proto__)并非是函数的原型(prototype) * 区分 将函数的原型称为 显式原型 将对象的原型成为 隐式原型 * 对象的原型：不能用于真实开发工作，仅用于逻辑测试 */ console.log(hero.prototype); // undefined 表示对象中不存在该属性 console.log(hero.__proto__); // Hero { age: 18 } ","date":"2020-06-03","objectID":"/posts/notes/20200603/:0:4","tags":null,"title":"原型（二）","uri":"/posts/notes/20200603/"},{"categories":["notes"],"content":"isPrototypeOf()方法 isPrototypeOf() 判断指定对象是否是另一个对象的原型。 // 通过初始化器定义对象 obj = { name: \"张无忌\", }; // 定义构造函数 function Hero() {} // 将对象obj赋值给构造函数Hero的原型 Hero.prototype = obj; // 通过构造函数创建对象 var hero = new Hero(); // isPrototypeOf() 判断指定对象是否是另一个对象的原型 console.log(obj.isPrototypeOf(hero)); // true console.log(hero.isPrototypeOf(obj)); // fasle ","date":"2020-06-03","objectID":"/posts/notes/20200603/:0:5","tags":null,"title":"原型（二）","uri":"/posts/notes/20200603/"},{"categories":["notes"],"content":"扩展内建对象 直接通过Object原型新增 Object.prototype.sayMe = function () { console.log(\"this is function\"); }; // 通过Object构造函数创建对象 var obj = new Object(); obj.sayMe(); 通过defineProperty方法新增 Object.defineProperty(Object.prototype, \"sayMe\", { value: function () { console.log(\"this is sayMe\"); }, }); var obj = new Object(); obj.sayMe(); ","date":"2020-06-03","objectID":"/posts/notes/20200603/:1:0","tags":null,"title":"原型（二）","uri":"/posts/notes/20200603/"},{"categories":["notes"],"content":"原型 ","date":"2020-06-02","objectID":"/posts/notes/20200602/:1:0","tags":null,"title":"原型（一）","uri":"/posts/notes/20200602/"},{"categories":["notes"],"content":"原型是什么 在 Javascript中，函数是一个包含属性和方法的Function类型的对象。而原型（ Prototype）就是Function类型对象的一个属性。 在函数定义时就包含了 prototype属性，它的初始值是一个空对象。在 Javascript中井没有定义函数的原型类型，所以原型可以是任何类型。 原型是用于保存对象的共享属性和方法的，原型的属性和方法并不会影响函数本身的属性和方法。 原型的默认值是空对象，所有引用类型都是构造函数，所有函数都具有prototype属性。 // Function 类型的属性 -\u003e 所有函数都具有的属性 console.log(Function.prototype); function fn() { console.log(\"this is function\"); } // 原型的默认值是空对象 console.log(fn.prototype); // 函数包含构造函数 -\u003e 所有引用类型都是构造函数 console.log(Number.prototype); console.log(Object.prototype); var result = Object.getOwnPropertyDescriptor(Object.prototype, \"constructor\"); console.log(result); ","date":"2020-06-02","objectID":"/posts/notes/20200602/:1:1","tags":null,"title":"原型（一）","uri":"/posts/notes/20200602/"},{"categories":["notes"],"content":"获取原型 获取原型的方式有两种 使用访问对象的属性语法结构 function fn() { console.log(\"this is function \"); } // 使用访问对象的属性语法结构 console.log(fn.prototype); // fn {} console.log(fn[\"prototype\"]); // fn {} Object类提供的getPrototype()方法 function fn() { console.log(\"this is function \"); } console.log(Object.getPrototypeOf(fn)); //[Function]或者ƒ () { [native code] } 第二种方式中，在nodejs环境中会打印[Function]而在浏览器会打印ƒ () { [native code] } ","date":"2020-06-02","objectID":"/posts/notes/20200602/:1:2","tags":null,"title":"原型（一）","uri":"/posts/notes/20200602/"},{"categories":["notes"],"content":"新增属性和方法 使用对象新增方式。 function fn() { console.log(\"this is function \"); } // 新增属性或方法 fn.prototype.name = \"张无忌\"; console.log(fn.prototype.name); // 张无忌 console.log(fn.prototype); // fn { name: '张无忌' } 使用defineProperty()方法 function fn() { console.log(\"this is function \"); } // defineProperty() Object.defineProperty(fn.prototype, \"age\", { value: 10, // 如果不修改此属性描述符，则不可枚举 enumerable: true, }); console.log(fn.prototype); // fn {age: 10 } ","date":"2020-06-02","objectID":"/posts/notes/20200602/:1:3","tags":null,"title":"原型（一）","uri":"/posts/notes/20200602/"},{"categories":["notes"],"content":"构造函数的原型 // 定义构造函数 function Hero() { this.name = \"张无忌\"; this.sayMe = function () { console.log(\"this is function \"); }; } // 操作构造函数Hero的原型 Hero.prototype.age = 18; // 利用构造函数来创造对象 var hero = new Hero(); console.log(hero); // Hero { name: '张无忌', sayMe: [Function] } // 为构造函数的原型新增的属性在创建对象中仍然可以访问 console.log(hero.age); // 18 // 对象小hero中不存在age属性 var result = Object.getOwnPropertyDescriptor(hero, \"age\"); console.log(result); //undefined 以上代码经测试可以发现，为构造函数原型新添加的属性，在其对象中虽可访问但通过getOwnPropertyDescriptor方法是得不到的。 ","date":"2020-06-02","objectID":"/posts/notes/20200602/:2:0","tags":null,"title":"原型（一）","uri":"/posts/notes/20200602/"},{"categories":["notes"],"content":"原型属性 ","date":"2020-06-02","objectID":"/posts/notes/20200602/:3:0","tags":null,"title":"原型（一）","uri":"/posts/notes/20200602/"},{"categories":["notes"],"content":"自有属性与原型属性 自有属性：通过对象的引用添加的属性。其它对象可能无此属性；即使有，也是彼此独立的属性。 原型属性：从原型对象中继承来的属性，一旦原型对象中属性值改变，所有继承自该原型的对象属性均改变。 通过构造函数Hero创建对象时不仅具有构造函数的自有属性，也具有构造函数的原型属性。 通过对象是无法修改原型的值，修改原型的值，必须修改构造函数的原型。 // 定义一个构造函数 function Hero(name) { // 构造函数本身的属性 成为自有属性 this.name = name; this.sayMe = function () { console.log(\"this is function\"); }; } // 通过构造函数Hero的prototype新增属性或方法 // 通过原型所定义的属性称为原型属性 Hero.prototype.age = 19; /** * 通过构造函数Hero创建对象时 * 不仅具有构造函数的自有属性 * 也具有构造函数的原型属性 * */ var hero = new Hero(\"张无忌\"); console.log(hero.name); // 张无忌 console.log(hero.age); //19 var hero2 = new Hero(\"周芷若\"); console.log(hero2.name); // 周芷若 console.log(hero2.age); //19 hero.age = 80; // 相当于为hero新增属性 console.log(hero); console.log(hero.age); //80 console.log(hero2.age); // 19 Hero.prototype.age = 80; ","date":"2020-06-02","objectID":"/posts/notes/20200602/:3:1","tags":null,"title":"原型（一）","uri":"/posts/notes/20200602/"},{"categories":["notes"],"content":"自调函数 自调函数就是自己调用自己。简单语法如下两种： // 国内常用方式 (function () { var w = 100; // 局部变量 console.log(\"this is function\"); })(); // 表达式方式 (function (v) { console.log(\"表达式\" + v); })(\"function\"); 语法结构 第一个括号用于定义函数，第二个括号用于调用函数。 作用 用于执行一次性的逻辑任务 应用 作为整体逻辑代码的外层结构 ","date":"2020-06-01","objectID":"/posts/notes/20200601/:0:1","tags":null,"title":"Function类型（四）","uri":"/posts/notes/20200601/"},{"categories":["notes"],"content":"作为值的函数 在函数的函数体中定义另一个函数 -\u003e 内容（私有）函数 // 作为值的函数 function fn() { //在函数的函数体中定义另一个函数 -\u003e 内容（私有）函数 return function () { return 1; }; } var result = fn(); console.log(result); // [Function] console.log(result()); // 1 或者如下，返回一个函数 function fn() { function n() { return 1; } return n(); } var result = fn(); console.log(result) ","date":"2020-06-01","objectID":"/posts/notes/20200601/:0:2","tags":null,"title":"Function类型（四）","uri":"/posts/notes/20200601/"},{"categories":["notes"],"content":"函数作为对象的方法 var fn = function fn() { console.log(\"this is function \"); }; // 将函数作为对象的方法 var obj = { fun: fn, }; obj.fun(); // this is function fn(); // this is function 当函数作为对象的方法时，再次修改函数同样不会影响对象中已经赋值。 var fn = function fn() { console.log(\"this is function \"); }; // 将函数作为对象的方法 var obj = { fun: fn, }; obj.fun(); fn(); fn = function () { console.log(\"this is function too\"); }; obj.fun(); // this is function ","date":"2020-06-01","objectID":"/posts/notes/20200601/:0:3","tags":null,"title":"Function类型（四）","uri":"/posts/notes/20200601/"},{"categories":["notes"],"content":"闭包 ","date":"2020-06-01","objectID":"/posts/notes/20200601/:1:0","tags":null,"title":"Function类型（四）","uri":"/posts/notes/20200601/"},{"categories":["notes"],"content":"作用域链 作用域是一层一层向下传递的。 例如 var a = \"a\"; function fun() { var b = \"b\"; function fn() { //相对于f函数作用域的话，c相当于全局变量 var c = \"c\"; function f() { //函数作用域 var d = \"d\"; console.log(a); //a console.log(b); //b console.log(c); //c console.log(d); //d } f(); } fn(); } fun(); ","date":"2020-06-01","objectID":"/posts/notes/20200601/:1:1","tags":null,"title":"Function类型（四）","uri":"/posts/notes/20200601/"},{"categories":["notes"],"content":"闭包是什么 简单来说，闭包就是访问在全局范围内访问局部作用域的变量。 以下三种方式均可称为闭包。 // 对象与函数 function fn1() { var v = 100; return { get: function () { return v; }, set: function (value) { v = value; }, }; } var obj = fn1(); obj.set(200); console.log(obj.get()); // 函数与构造函数 function fn2() { var v = 100; this.get = function () { return v; }; this.set = function (value) { v = value; }; } var obj = new fn2(); obj.set(200); console.log(obj.get()); // 全局变量 var get, set; function fn3() { var v = 100; get = function () { return v; }; set = function (value) { v = value; }; } fn3(); set(200); console.log(get()); //200 回调函数不属于闭包。但加上参数可以改为闭包： \r function fn1(v) { var v1 = 100; // console.log(v2); v(v1); } function fn2(v) { var v2 = 200; console.log(v); } fn1(fn2); // 100 闭包结构并不固定，但当内部函数以某一种方式被任何一个外部函数作用域访问时，就可以成为闭包 \r 闭包的特点 局部变量 在函数中定义有共享意义（如：缓存、计数器等）的局部变量。（注：定义成全局变量会对外造成污染） 内部函数 在函数（f）中声明有内嵌函数，内嵌函数（g）对函数（f）中的局部变量进行访问。 外部使用 函数（f）向外返回此内嵌函数（g),外部可以通过此内嵌函数持有并访问声明在函数（f）中的局部变量，而此变量在外部是通过其他途径无法访问的。 闭包的作用 提供可共享的局部变量。 保护共享的局部变量。提供专门的读写变量的函数 避免全局污染。 ","date":"2020-06-01","objectID":"/posts/notes/20200601/:1:2","tags":null,"title":"Function类型（四）","uri":"/posts/notes/20200601/"},{"categories":["notes"],"content":"函数的重载 在其他开发语言中，函数具有一种特性，叫做重载。所谓重载，就是定义多个同名的函数，但每一个函数接收的参数的个数不同，程序会根据调用时传递的实参个数进行判断，具体调用的是哪个函数。 但是在JavaScript中不可以像下面的方式定义： // 在JavaScript如果定义多个同名函数 - function add(a, b) { return a + b; } function add(a, b, c) { return a + b + c; } console.log(add(1, 2)); // NaN console.log(add(1, 3, 4)); // 8 ","date":"2020-05-31","objectID":"/posts/notes/20200531/:1:0","tags":null,"title":"Function类型（三）","uri":"/posts/notes/20200531/"},{"categories":["notes"],"content":"arguments对象 存在于函数体中的特殊对象(原本是Function类型的arguments属性)。arguments对象是一个类数组对象，其中包含length属性：函数实参的个数，其作用是用于接收函数的参数（实参） function fn() { console.log(arguments); console.log(arguments[0]); } fn(1, 2, 3, 4); // [Arguments] { '0': 1, '1': 2, '2': 3, '3': 4 } // 1 模拟函数重载\r function add() { var len = arguments.length; switch (len) { case 2: return arguments[0] + arguments[1]; case 3: return arguments[0] + arguments[1] + arguments[2]; case 4: return arguments[0] + arguments[1] + arguments[2] + arguments[3]; } } console.log(add(1, 2)); console.log(add(1, 2, 3)); console.log(add(1, 2, 3, 4)); console.log(add(1, 2, 3, 4, 5)); JavaScript中没有函数重载，只能通过模拟来实现\r","date":"2020-05-31","objectID":"/posts/notes/20200531/:1:1","tags":null,"title":"Function类型（三）","uri":"/posts/notes/20200531/"},{"categories":["notes"],"content":"递归 函数的递归：函数在当前函数体调用自身。 执行方式类似于循环语句的执行方式即反复执行指定的语句块内容。 执行递归函数时，必须提供结束执行的条件（出口） 如下为最简单的递归： var v = 0; function fn() { console.log(\"this is function \"); v++; if (v \u003e 3) { return; } // 调用自身函数 fn(); } fn(); 如果在外部需要释放函数，那么函数内部的自调应该改为arguments.callee()。 var v = 0; function fn() { console.log(\"this is function \"); v++; if (v \u003e 3) { return; } // 调用自身函数 // fn(); arguments.callee(); } var f = fn; fn = null; f(); ","date":"2020-05-31","objectID":"/posts/notes/20200531/:2:0","tags":null,"title":"Function类型（三）","uri":"/posts/notes/20200531/"},{"categories":["notes"],"content":"特殊函数（高阶函数） ","date":"2020-05-31","objectID":"/posts/notes/20200531/:3:0","tags":null,"title":"Function类型（三）","uri":"/posts/notes/20200531/"},{"categories":["notes"],"content":"匿名函数 所谓匿名函数就是没有名字的函数，但JavaScript的语法并不支持匿名函数。因此匿名函数的用法有两个 回调函数 将一个函数作为另一个函数的参数使用，作为参数的函数称为回调函数 自调函数 函数调用自身（定义即调用函数） ","date":"2020-05-31","objectID":"/posts/notes/20200531/:3:1","tags":null,"title":"Function类型（三）","uri":"/posts/notes/20200531/"},{"categories":["notes"],"content":"回调函数 将一个函数作为另一个函数的参数使用，作为参数的函数称为回调函数 回调函数的优势： 匿名回调函数节省了全局命名空间 将私有的数据内容开放给指定位置使用（仅仅） 虽然可以使用私有数据，但不清楚来源一封装 var n = function (w) { console.log(w); }; function fn(v) { var name = \"张无忌\"; v(name); //将局部变量作为v()函数的实参传递 } fn(function (w) { console.log(w); // 张无忌 }); ","date":"2020-05-31","objectID":"/posts/notes/20200531/:3:2","tags":null,"title":"Function类型（三）","uri":"/posts/notes/20200531/"},{"categories":["notes"],"content":"构造函数与函数 定义一个函数时，它既是一个函数也是一个构造函数，同时又是一个对象。 function Hero() { // 当作是一个函数 var v = 100; // 当作是一个构造函数来使用 this.set = function (value) { v = value; }; this.get = function () { return v; }; } // 通过构造函数来创建对象 var hero = new Hero(); hero.set(2); console.log(hero.get()); // 2 // 为对象Hero添加属性和方法 Hero.age = 18; console.log(Hero.age); // 18 ","date":"2020-05-30","objectID":"/posts/notes/20200530/:1:0","tags":null,"title":"Function类型（二）","uri":"/posts/notes/20200530/"},{"categories":["notes"],"content":"定义函数的方式与区别 定义方式 执行 效率 函数定义语句 函数名被声明提前 不存在效率问题 字面量表达式 函数体固定，无法动态执行 不存在效率问题 Function类型定义 函数体是字符串，可以动态执行 效率低 ","date":"2020-05-30","objectID":"/posts/notes/20200530/:2:0","tags":null,"title":"Function类型（二）","uri":"/posts/notes/20200530/"},{"categories":["notes"],"content":"Function的属性与方法 ","date":"2020-05-30","objectID":"/posts/notes/20200530/:3:0","tags":null,"title":"Function类型（二）","uri":"/posts/notes/20200530/"},{"categories":["notes"],"content":"length属性 获取形参的个数。调用方式如下： // Function类型的length属性 - 获取函数(形参)的参数的个数 function fn(a, b, d, e, f) { console.log(\"this is a function\"); } fn(1); console.log(fn.length); // 5 ","date":"2020-05-30","objectID":"/posts/notes/20200530/:3:1","tags":null,"title":"Function类型（二）","uri":"/posts/notes/20200530/"},{"categories":["notes"],"content":"Function的apply()方法 用于调用一个函数，并且接受指定的this值，以及一个数组作为参数。语法结构如下 func.apply(thisArg,[argsArray]) thisArg 指定this的值，表示当前调用函数的对象。如果不使用this值时，提供默认为null或者undefined值 argsArray 用于接收指定参数的形参。 与函数调用体的区别在于接收的this值 \r function fn(a, b) { console.log(\"this is \" + a + b); } // 调用函数 fn(\"function\", \"hello\"); // this is functionhello /** * apply(this,args)方法调用 * 使用的对象调用方法的语法结构 -\u003e 将函数作为对象使用 * 参数 * this - 指定this的值,表示当前调用函数的对象 * 如果不适用this值时,提供默认为null或者undefined值 * args - 数组,用于接收指定函数的实参 * 与函数调用体的区别在于接收的this值 */ fn.apply(null, [\"function\", \"张无忌\"]); //this is function张无忌 ","date":"2020-05-30","objectID":"/posts/notes/20200530/:3:2","tags":null,"title":"Function类型（二）","uri":"/posts/notes/20200530/"},{"categories":["notes"],"content":"Function的call()方法 Function的 call()方法用于调用一个函数，并且接收指定的this值作为参数，以及参数列表。 func.call(thisArg,arg1,arg2,...) thisArg 用于指定this的值 后边的参数御用接收函数的实参 call()与apply()方法区别 - 在于第二个参数 \r /** * call()方法 - 用于调用函数 * 参数 * - thisArg - 用于指定this的值 * - arg1,arg2,... - 用于接受函数的实参 * call()与apply()方法区别 - 在于第二个参数 */ function fn(a, b) { console.log(\"this is function \" + a + b); } fn.call(null, \"12\", \"34\"); //this is function 1234 ","date":"2020-05-30","objectID":"/posts/notes/20200530/:3:3","tags":null,"title":"Function类型（二）","uri":"/posts/notes/20200530/"},{"categories":["notes"],"content":"Function的bind()方法 Function的bind()方法用于创建一个新的函数（称为绑定函数），井且接收指定的this值作为参数，以及参数列表。其语法结构如下 fun.bind(thisArg[,arg1[,arg2[,...]]]) thisArg 指定this的值，表示当前调用函数的对象。如果不使用this值时，提供默认为null或者undefined值 arg 用于接收指定参数的形参。 返回值 返回新创建的函数 作用 实现函数的深复制 验证复制为深复制 \r var fn = function () { console.log(\"this is function \"); }; var f = fn.bind(); f(); //this is function fn = function () { console.log(\"this is function too\"); }; f();//this is function 通过以上代码测试，当声明一个函数后，再次修改这个函数，并不会影响前边复制的f。因此bind方法实现的是深复制。 函数赋值也为深复制 var a = function () { console.log(\"this is a\"); }; var b = a; b(); // this is a a = function () { console.log(\"this is new a\"); }; b(); // this is a 关于bind()方法的参数 \r在复制函数时，bing()方法传入的参数会作为参数调用时默认传入的参数。例如： var fn = function (v) { console.log(\"this is \" + v); }; fn(\"zhangwuji\"); // this is zhangwuji var f = fn.bind(null, \"zhangwuji\"); f() // this is zhangwuji 但是这并不意味着不能在向这个函数传递参数，例如给f()传入参数'a'那么相当于调用fn函数时传入了两个参数fn('zhangwuji','a')。例如如下测试： var fn = function (v+w) { console.log(\"this is \" + v+w); }; fn(\"zhangwuji\"); // this is zhangwujiundefined var f = fn.bind(null, \"zhouzhiruo\"); f(\" hahaha\"); // this is zhouzhiruo hahaha ","date":"2020-05-30","objectID":"/posts/notes/20200530/:3:4","tags":null,"title":"Function类型（二）","uri":"/posts/notes/20200530/"},{"categories":["notes"],"content":"Function类型 ","date":"2020-05-27","objectID":"/posts/notes/20200527/:0:0","tags":null,"title":"Function类型（一）","uri":"/posts/notes/20200527/"},{"categories":["notes"],"content":"Function类型与函数 函数是这样的一段 Javascript代码，它只定义一次，但可能被执行或调用多次。 Function类型是 JavaScript提供的引用类型之一，通过 Function类型创建 Function对象。 在Javascript中，函数也是以对象的形式存在的。每个函数都是一个 Function对象。 函数名，本质就是一个変量名，是指向某个Function对象的引用。 每一个函数都是一个Function类型的函数、 function fn() { console.log(\"this is fn function\"); } var f = function () { console.log(\"this is f function\"); }; // 函数是一个对象 console.log(fn instanceof Object); //true console.log(f instanceof Object); //true // 函数是Function类型的对象 console.log(fn instanceof Function); //true console.log(f instanceof Function); //true 通过Function创建函数 \r语法：var 函数名 = new Function(args,statement); args 字符串类型，表示当前创建函数的形参。如果是多个形参用逗号分隔 statement 表示当前创建函数的函数体（字符串类型）。 var fun = new Function(\"a,b\", 'console.log(\"this is function \"+a+\" \"+b)'); fun(100, 200); ","date":"2020-05-27","objectID":"/posts/notes/20200527/:1:0","tags":null,"title":"Function类型（一）","uri":"/posts/notes/20200527/"},{"categories":["notes"],"content":"Function与Object Function即是自身类型也是Object类型。Object同理。 /** * Function类型时JavaScript中的引用类型之一 * 引用类型都可以当作一个构造函数 * 构造函数也是函数的一种 * 构造函数是一个Function类型的对象 * JavaScript中所有对象都是Object类型 */ console.log(Function instanceof Function); //true /** * Function类型时JavaScript中的引用类型之一 * 引用类型都可以当作一个构造函数 * 构造函数也是函数的一种 * 构造函数是一个Function类型的对象 * JavaScript中所有对象都是Object类型 */ console.log(Function instanceof Object); //true /** * Object类型是JavaScript中的引用类型之一 * 引用类型都可以当作一个构造函数 * 构造函数也是函数的一种 * 构造函数是一个Function类型的对象 */ console.log(Object instanceof Function); //true /** * Object类型是JavaScript中的引用类型之一 * 引用类型都可以当作一个构造函数 * 构造函数也是函数的一种 * 构造函数是一个Function类型的对象 * JavaScript中所有对象都是Object类型 */ console.log(Object instanceof Object); //true ","date":"2020-05-27","objectID":"/posts/notes/20200527/:2:0","tags":null,"title":"Function类型（一）","uri":"/posts/notes/20200527/"},{"categories":["notes"],"content":"自定义构造函数 构造函数又称对象模板或构造器，它的作用是创建JavaScript对象。构造函数有两种，分别如下： JavaScript提供的构造函数 - 引用类型 自定义构造函数 自定义构造函数声明方式 函数声明方式 function Hero() { // 定义属性 this.name = \"张无忌\"; // 定义方法 this.sayMe = function () { console.log(\"this is function \"); }; } 字面量声明方式 var Hero = function (name) { // 定义属性 this.name = name; // 定义方法 this.sayMe = function () { console.log(\"this is function \"); }; }; 利用构造函数创建对象 创建对象的类型为声明时的函数。例如使用Hero构造函数创建对象，那么对象就是Hero类型的。 var hero = new Hero(\"张无忌\"); console.log(hero); 构造函数与函数的异同点 相同点 语法结构相同 不同点 函数 函数包括函数体，而函数体里包括局部变量和函数 构造函数 构造函数包括属性和方法 ","date":"2020-05-27","objectID":"/posts/notes/20200527/:3:0","tags":null,"title":"Function类型（一）","uri":"/posts/notes/20200527/"},{"categories":["notes"],"content":"Constructor属性 JavaScript中所有对象都包含一个constructor属性，这个属性来源于Object对象。 // 定义一个构造函数 function Hero() { this.name = \"张无忌\"; this.sayMe = function () { console.log(\"this is function \"); }; } // 使用构造函数创建对象 var hero = new Hero(); // 对象具有与构造函数相同的属性和方法 console.log(hero.name); hero.sayMe(); // js中所有对象都是Object类型 console.log(hero.constructor); ","date":"2020-05-27","objectID":"/posts/notes/20200527/:4:0","tags":null,"title":"Function类型（一）","uri":"/posts/notes/20200527/"},{"categories":["notes"],"content":"属性描述符的存取器 get get当获取或访问当前属性时，会调用此方法。 类似数据描述符中的value get方法在被调用时，不能传递任何参数 get方法在被调用时，允许传递this关键字 this - 表示当前的目标对象 var obj = { name: \"张无忌\", }; Object.defineProperty(obj, \"name\", { // 获取指定的属性 get: function () { // 当获取或访问当前属性时，会调用此方法 /** * 类似数据描述符中的value * get方法在被调用时，不能传递任何参数 * get方法在被调用时，允许传递this关键字 * this - 表示当前的目标对象 */ // return this; return \"周芷若\"; }, }); console.log(obj.name); // 周芷若 // 同样的如果只设置get，那么也是不能修改的。 obj.name = \"赵敏\"; console.log(obj.name); // 周芷若 set set方法用于定义当前目标函数的修改功能 该方法接收唯一的一个参数 作为当前目标属性的新的值 通过属性修改操作指定新的值 作为形参对应的实参 此方法修改值需借助一个变量，例如： var obj = { name: \"张无忌\", }; var value; //全局变量 Object.defineProperty(obj, \"name\", { /** * set方法用于定义当前目标函数的修改功能 * 该方法接收唯一的一个参数 -\u003e 作为当前目标属性的新的值 * 通过属性修改操作指定新的值 -\u003e 作为形参对应的实参 * */ set: function (newvalue) { console.log(\"this is set function \"); value = newvalue; }, }); obj.name = \"赵敏\"; console.log(obj.name); //赵敏 需要注意的是：如果变量没有初始化获取值，那么值是undefined。 \r var obj = { name: \"张无忌\", }; var value; //全局变量 Object.defineProperty(obj, \"name\", { set: function (newvalue) { console.log(\"this is set function \"); value = newvalue; }, }); console.log(obj.name); //undefined 关于get与set的另一种常见写法 \r var obj = { // 存取描述符中的get get attr() { return \"张三\"; }, set attr(value) { console.log(\"setter:\" + value); }, }; console.log(obj.attr); //张三 obj.attr = 100; //setter:100 这种写法中，赋值与上方一致，也是定义一个新的变量，然后赋值。此写法结果与用法与上边一致，只是写法不同。 ","date":"2020-05-26","objectID":"/posts/notes/20200526/:1:0","tags":null,"title":"Object对象的属性描述符的存取器","uri":"/posts/notes/20200526/"},{"categories":["notes"],"content":"防篡改对象 定义的对象默认在任何时候、任何位置，无论有意义的还是无意义的都可以修改对象的属性或方法。而这些篡改可能会影响对象的内置属性或方法，从而导致对象的正常功能可能无法使用。 Javascript在ES5版本中新増了放置纂改对象的属性或方法的机制，共提供了以下三级保护方式 禁止扩展 禁止为对象扩展新的属性或方法 密封对象 禁止扩展新的属性或方法，禁止配置现有的属性或方法的描述符，仅允许读写属性的值 冻结对象 禁止对对象执行任何修改操作。 ","date":"2020-05-26","objectID":"/posts/notes/20200526/:2:0","tags":null,"title":"Object对象的属性描述符的存取器","uri":"/posts/notes/20200526/"},{"categories":["notes"],"content":"禁止扩展 禁止扩展只需要调用Object.preventExtensions(obj)方法即可，参数就是需要禁止的对象. 一旦设置禁止扩展,那么该对象不可新增属性或方法. 使用obj.name方法新增不会报错但无效 使用Object.defineProperty方法新增会报错. 判断对象是否可扩展使用方法Object.isExtensible(obj),参数同样是需要判断的对象. 返回一个布尔值,true表示可被扩展,false表示不可被扩展. var obj = {}; // 将对象设置禁止扩展 Object.preventExtensions(obj); // 新增属性或方法无效 -\u003e 语法没有报错 obj.name = \"张无忌\"; // 此方法新增或修改或报错 // Cannot define property name, object is not extensible Object.defineProperty(obj, \"name\", { value: \"周芷若\", }); console.log(obj); // 返回布尔值 true表示可扩展 false表示不可扩展 var result = Object.isExtensible(obj); console.log(result); ","date":"2020-05-26","objectID":"/posts/notes/20200526/:2:1","tags":null,"title":"Object对象的属性描述符的存取器","uri":"/posts/notes/20200526/"},{"categories":["notes"],"content":"密封对象 将对象进行密封调用Object.seal(obj)即可,参数为需要密封的对象. 一旦将对象进行了密封,那么需要注意如下: 不能为该对象新增属性或方法 不能修改该对象的以下属性或方法的描述符 configurable enumerable 判断是否是密封对象Object.isSealed(obj),参数同样是需要判断的对象. 返回一个布尔值,true表示被密封了,false表示没有被密封 var obj = { name: \"张无忌\", //可修改 }; // 将该对象进行密封 Object.seal(obj); /** * 将对象进行密封 * 1. 不能为该对象新增属性或方法 * 2. 不能修改该对象的属性或方法的描述符（configurable、enumerable） */ // // 新增属性 obj.age = 18; console.log(obj); // { name: '张无忌' } // // 修改属性 obj.name = \"周芷若\"; console.log(obj); //{ name: '周芷若' } // 报错 // Object.defineProperty(obj, \"age\", { // value: 18, // }); // 修改值 Object.defineProperty(obj, \"name\", { value: \"赵敏\", writable: false, // configurable: true, //不可修改 // enumerable: true, //不可修改 }); console.log(obj); //{ name: '周芷若' } obj.name = \"赵敏\"; console.log(obj); //{ name: '赵敏' } ","date":"2020-05-26","objectID":"/posts/notes/20200526/:2:2","tags":null,"title":"Object对象的属性描述符的存取器","uri":"/posts/notes/20200526/"},{"categories":["notes"],"content":"冻结对象 将对象进行密封调用Object.freeze(obj)即可,参数为需要冻结的对象. 一旦将对象进行了冻结,那么该对象只能使用,不能做任何修改,包括删除 判断是否是密封对象Object.isFrozen(obj),参数同样是需要判断的对象. 返回一个布尔值,true表示被冻结了,false表示没有被冻结 var obj = { name: \"张无忌\", }; // 冻结对象 Object.freeze(obj); // 新增 obj.age = 18; console.log(obj); //{ name: '张无忌' } // 修改 obj.name = \"周芷若\"; console.log(obj); //{ name: '张无忌' } // 删除 delete obj.name; console.log(obj); //{ name: '张无忌' } // 以下方法报错 // Object.defineProperty(obj, \"age\", { // value: 18, // }); console.log(Object.isFrozen(obj)); ","date":"2020-05-26","objectID":"/posts/notes/20200526/:2:3","tags":null,"title":"Object对象的属性描述符的存取器","uri":"/posts/notes/20200526/"},{"categories":["notes"],"content":"JavaScript中的面向对象 ","date":"2020-05-25","objectID":"/posts/notes/20200525/:0:0","tags":null,"title":"JavaScript的面向对象与Object对象","uri":"/posts/notes/20200525/"},{"categories":["notes"],"content":"面向对象是什么 面向对象编程的全称为 Object Oriented Prograrnming，简称为OOP。面向对象编程是用抽象方式创建基于现实世界模型的一种编程模式。 面向对象编程可以看作是使用一系列对象相互协作的软件设计。面向对象程序设计的目的是在编程中促进更好的灵活性和可维护性。凭借其对模块化的重视，面向对象的代码开发更简单，更容易理解。 所有的程序是由一定的属性和行为对象组成的，不同的对象的访问通过函数调用来完成，对象间所有的交流都是通过方法调用，通过对封装对象数据，提高复用率。 面向对象编程的三个主要特征是：封装；2)继承；3)多态。 任何事物都可以看作对象，相似的可以看作一类。类是群体，对象是个体。 \rJavaScript是一种基于原型的面向对象语言，而不是基于类的。 ","date":"2020-05-25","objectID":"/posts/notes/20200525/:1:0","tags":null,"title":"JavaScript的面向对象与Object对象","uri":"/posts/notes/20200525/"},{"categories":["notes"],"content":"封装 只关心入口和出口，而不关心过程 ","date":"2020-05-25","objectID":"/posts/notes/20200525/:1:1","tags":null,"title":"JavaScript的面向对象与Object对象","uri":"/posts/notes/20200525/"},{"categories":["notes"],"content":"继承 继承通常是指类与类之间的关系。如果两个类都有相同的属性或方法，那么可以让一个类继承于另类，这样就不需要在前者再次定义同样的属性或方法。 ","date":"2020-05-25","objectID":"/posts/notes/20200525/:1:2","tags":null,"title":"JavaScript的面向对象与Object对象","uri":"/posts/notes/20200525/"},{"categories":["notes"],"content":"多态 不同的对象可以定义具有相同名称的方法，方法是作用于所在的对象中。这种不同对象通过相同方法的调用实现各自行为的能力，被称之为多态。 ","date":"2020-05-25","objectID":"/posts/notes/20200525/:1:3","tags":null,"title":"JavaScript的面向对象与Object对象","uri":"/posts/notes/20200525/"},{"categories":["notes"],"content":"构造函数 构造函数又称为构造器或对象模板，是对象中的一个方法，在实例化时构造器被调用。在 JavaScrip中函数就可以作为构造器使用，因此不需要特别地定义一个构造器方法。 /** 创建构造函数 * 用于创建对象 * * 属性 * * 方法 * * function 构造函数名称(){ * this.属性名='属性值' * this.方法名=function(){ * 方法体 * } * } */ function Hero() { this.name = \"张无忌\"; this.sayMe = function () { console.log(\"我是张无忌\"); }; } var hero = new Hero(); console.log(hero); 为类添加参数 function Hero(name) { this.name = name; this.sayMe = function () { console.log(\"我是\" + name); }; } var hero = new Hero(\"张无忌123\"); console.log(hero); 函数与构造函数 函数与构造函数并没有本质区别。也可以相互混写，例如： // 1. 函数\\构造函数 function Hero() { // 局部变量 var v = 100; // 内部函数 function n() {} this.name = \"name\"; this.test = function () { console.log(\"test\"); }; } Hero(); var hero = new Hero(); 将构造函数的内容写入到函数内容中，通过函数方式调用或者构造函数方式都是可以的，并不会出现语法错误。 var fun = new Fun(); // 获取V的值 console.log(fun.get()); // 重新设置v的值 fun.set(200) // 再次打印v的值 console.log(fun.get()); ","date":"2020-05-25","objectID":"/posts/notes/20200525/:2:0","tags":null,"title":"JavaScript的面向对象与Object对象","uri":"/posts/notes/20200525/"},{"categories":["notes"],"content":"Object对象 创建对象的三种形式 创建空对象 var obj1 = new Object(null); var obj2 = new Object(undefined); 创建一个与给定值对应类型的对象 var obj3 = new Object(100); console.log(obj3); //[Number: 100] 当以非构造函数形式被调用时，Object 等同于 new Object()。 var obj4 = Object(); //函数调用 var obj5 = new Object(); //构造函数调用 ","date":"2020-05-25","objectID":"/posts/notes/20200525/:3:0","tags":null,"title":"JavaScript的面向对象与Object对象","uri":"/posts/notes/20200525/"},{"categories":["notes"],"content":"属性描述符 Javascript提供了一个内部数据结构，用于描述对象的值，控制其行为，例如该属性是否可写、是否可配置、是否可修改以及是否可枚举等。这个内部数据结构被称为“属性描述符”。 对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。 ","date":"2020-05-25","objectID":"/posts/notes/20200525/:3:1","tags":null,"title":"JavaScript的面向对象与Object对象","uri":"/posts/notes/20200525/"},{"categories":["notes"],"content":"数据描述符 键 值 默认值 value 该属性对应的值，可以是任何有效的Javascript值（数值，对象，函数等）。 undefiend writable 当且仅当该属性的writable为true时， valueオ能被赋值运算符改変。 false configurable 当且仅当该属性的configurable为true时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。 false enumerable 当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中。 false ","date":"2020-05-25","objectID":"/posts/notes/20200525/:3:2","tags":null,"title":"JavaScript的面向对象与Object对象","uri":"/posts/notes/20200525/"},{"categories":["notes"],"content":"存取描述符 键 值 默认值 get 给属性提供getter的方法，如果没有getter则为undefined。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传人this对象。 set 给属性提供setter的方法，如果没有setter则为undefined。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值 configurable 当且仅当该属性的configurable为true时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。 false enumerable 当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中。 false ","date":"2020-05-25","objectID":"/posts/notes/20200525/:3:3","tags":null,"title":"JavaScript的面向对象与Object对象","uri":"/posts/notes/20200525/"},{"categories":["notes"],"content":"获取属性描述符 通过Object.getOwnPropertyNames(object,prop)方法获取属性描述符，其中: object 表示指定属性对应的目标对象 prop 表示描述符的目标属性名称 返回值 其属性描述符对象 /** * 通过定义对象(属性火方法)这种方式 * 属性默认都是数据描述符 */ var obj = { name: \"张无忌\", }; /** * 使用Object.getOwnPropertyNames()方法获取指定属性的描述符 * Object.getOwnPropertyNames(object,prop) * object - 表示指定属性对应的目标对象 * prop - 表示描述符的目标属性名称 * 返回值 - 其属性描述符对象 * * * */ var result = Object.getOwnPropertyDescriptor(obj, \"name\"); console.log(result); //{ value: '张无忌', writable: true, enumerable: true, configurable: true } console.log(result.value); //张无忌 ","date":"2020-05-25","objectID":"/posts/notes/20200525/:3:4","tags":null,"title":"JavaScript的面向对象与Object对象","uri":"/posts/notes/20200525/"},{"categories":["notes"],"content":"设置属性描述符 设置属性使用Object.defineProperty(obj,prop,desc)方法，他的作用有两个：用于定义目标对象的新属性、修改目标对象的已存在属性。其中： obj 表示目标对象 prop 表示目标对象的目标属性名称 desc 表示属性描述符,必须是对象的格式。 { value: '' } 返回值 返回传递的对象 设置value值 \r 修改一个值 var obj = { // 定义对象的同时定义了该属性以及值(可修改,可删除,可枚举) name: \"张无忌\", }; Object.defineProperty(obj, \"name\", { value: \"周芷若\" }); console.log(obj); 新增一个值 Object.defineProperty(obj, \"age\", { value: 18, }); console.log(obj.age); //18 与常规方式的区别 如果使用\"对象名.属性名 = 值” 可修改,可删除,可枚举 如果使用Object.defineProperty()方法新增属性 不可修改命不可删除以及不可枚举 一旦属性的值是不可修改的，执行修改操作:没有语法错误,但修改无效 \r由图可以得知：用Object.defineProperty()方法新增属性后，再次修改后输出，值并未发生变化。 设置wriable值 \r该值为布尔值，默认为false。表示属性值可否被修改。 修改现有属性 当writable为false时，无法修改其属性。 var obj = { // 定义对象的同时定义了该属性以及值(可修改,可删除,可枚举) name: \"张无忌\", }; // 修改现有属性 Object.defineProperty(obj, \"name\", { value: \"周芷若\", writable: false, }); console.log(obj.name); //周芷若 // 修改name属性值 obj.name = \"赵敏\"; console.log(obj.name); //周芷若 新增属性 与修改同理当writable为false时，无法修改其属性。为true时可以修改. 设置configurable值 \rBooleant值，表示目标属性的描述符是否可以被修改。当且仅当该属性的configurable为true时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除.默认为false 设置enumerable值 \r var obj = { // 定义对象的同时定义了该属性以及值(可修改,可删除,可枚举) name: \"张无忌\", }; Object.defineProperty(obj, \"name\", { value: \"周芷若\", enumerable: false, }); console.log(obj.name); /** 属性描述符enumerable - 控制当前属性是否可被枚举（遍历） * 仅能循环遍历对象中可被枚举的属性 * * for...in语句 * * keys()方法 * 可以循环遍历对象中可被枚举和不可被枚举的属性 * getOwnPropertyNames()方法 */ for (var i in obj) { console.log(i); } var result1 = Object.keys(obj); console.log(result1); var result2 = Object.getOwnPropertyNames(obj); console.log(result2); 以上代码执行结果: ","date":"2020-05-25","objectID":"/posts/notes/20200525/:3:5","tags":null,"title":"JavaScript的面向对象与Object对象","uri":"/posts/notes/20200525/"},{"categories":["project"],"content":"项目需求 在线输入多行文字 选择文本可设置字体大小、加粗、斜体、下划线、删除线、字体颜色和背景颜色 允许输入无序列表和有序列表 允许设置1~6级标题 允许插入图片 ","date":"2020-05-18","objectID":"/posts/project/20200518/:1:0","tags":null,"title":"模仿一个在线文档","uri":"/posts/project/20200518/"},{"categories":["project"],"content":"项目开发历史 完整的项目地址：https://antmoe.gitee.io/project/2020/05/OnlineDoc/ 2020-05-19 https://antmoe.gitee.io/project/2020/05/OnlineDoc/ 图片插入（本地图片） \r字体颜色、背景颜色 \r撤销、取消样式 \r 2020-05-18 https://antmoe.gitee.io/project/2020/05/18/ 多行文字 \r字体大小 \r加粗、斜体、下划线、删除线 \r无序、有序列表 \r1~6级标题 \r【完成部分】只能插入拥有绝对链接的图片（外链） \r【未完成】字体、背景颜色设置 \r ","date":"2020-05-18","objectID":"/posts/project/20200518/:2:0","tags":null,"title":"模仿一个在线文档","uri":"/posts/project/20200518/"},{"categories":["project"],"content":"项目开发历程 这里主要说一下完成这个项目的过程中遇到的问题及问题解决方案。 开发思路 需要一个框，用于输入文字，并且这个框可以支持html标签 iframe实现 参考文章：https://www.cnblogs.com/xiangxs/p/5120574.html 选中文本修改其样式 参考文章：http://16bing.com/2017/04/18/ref-iframe/ MDN参考：https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand 插入图片 直接通过input获取后，通过insertImage命令插入。 由于无法获取真实地址，因此此方法只能插入外链图片即上传图床后插入链接。 直接插入HTML标签 未测试 设置颜色 通过一个div或者颜色版获取到用户选择的颜色，然后进行设置。 ","date":"2020-05-18","objectID":"/posts/project/20200518/:3:0","tags":null,"title":"模仿一个在线文档","uri":"/posts/project/20200518/"},{"categories":["project"],"content":"输入框 输入框首先明确的是textarea标签虽然可以实现多行文本，但无法插入样式标签即不能解析标签。于是通过百度得知：可以使用iframe标签。 \u003ciframe id=\"text\" frameborder=\"0\"\u003e\u003c/iframe\u003e \u003cscript\u003e var edit = document.getElementById(\"text\").contentWindow; // 控制整个文档可编辑 edit.document.designMode = \"On\"; // 表明元素是否是可编辑的 edit.document.contentEditable = \"ture\"; \u003c/script\u003e 上边这段代码主要用途就是使iframe元素处于可编辑状态。 ","date":"2020-05-18","objectID":"/posts/project/20200518/:3:1","tags":null,"title":"模仿一个在线文档","uri":"/posts/project/20200518/"},{"categories":["project"],"content":"基本设置 这里的基本设置主要是指execCommand命令只传第一个参数的设置项。包括加粗、斜体、下划线、删除线、有序列表、无序列表。 这些设置的实现思路几乎一致。主要通过为HTML标签设置自定义属性 data-set用于控制点击时所触发的动作。 \u003ci class=\"iconfont icon-jiacu\" id=\"bold\" data-set=\"bold\"\u003e\u003c/i\u003e \u003cscript\u003e bold.addEventListener('click', singleSet) function singleSet() { var action = this.getAttribute('data-set') edit.document.execCommand(action, false, null); } \u003c/script\u003e ","date":"2020-05-18","objectID":"/posts/project/20200518/:3:2","tags":null,"title":"模仿一个在线文档","uri":"/posts/project/20200518/"},{"categories":["project"],"content":"两个参数的设置 两个参数的设置目前包括设置字体大小及插入标题。因为涉及到了选择，因此需要通过用户具体选择的是那一个才能执行相应的功能。 字体大小 鼠标悬停显示使用的方式为最基本的父子级嵌套。为了减少重复性样式，子级统一为一个class名。这样就能实现多个子级共用一个样式了。 \u003ci class=\"iconfont icon-fontsize\" id=\"fontsize\" data-set=\"fontsize\"\u003e \u003cul class=\"child\"\u003e \u003cli data-set=\"fontSize\" data-value=\"1\"\u003e1\u003c/li\u003e \u003cli data-set=\"fontSize\" data-value=\"2\"\u003e2\u003c/li\u003e \u003cli data-set=\"fontSize\" data-value=\"3\"\u003e3\u003c/li\u003e \u003cli data-set=\"fontSize\" data-value=\"4\"\u003e4\u003c/li\u003e \u003cli data-set=\"fontSize\" data-value=\"5\"\u003e5\u003c/li\u003e \u003cli data-set=\"fontSize\" data-value=\"6\"\u003e6\u003c/li\u003e \u003cli data-set=\"fontSize\" data-value=\"7\"\u003e7\u003c/li\u003e \u003c/ul\u003e \u003c/i\u003e 关于HTML标签 data-set 表示需要执行命令的动作名称 data-value 表示动作的参数即第三个参数 关于绑定事件 绑定事件如果每一个都获取那就太难了！！因此使用事件委托的方式。需要注意的是为了准确获取到子级child，可以先获取父级（因为设置了ID），然后通过父级获取child。达到准确获得。 为父级绑定事件，在事件内进行判断（class名、nodeName均可） var Fontsize = document.getElementById('fontsize') var setFontSize = Fontsize.getElementsByClassName('child')[0] setFontSize.addEventListener('click', function (e) { var target = e.target if (target.nodeName === 'LI') { edit.document.execCommand(target.getAttribute('data-set'), true, target.getAttribute('data-value')); } }) 标题标签 标题标签遇到的问题主要是Chrome不兼容问题，疑似根本没有heading命令。于是只能用formatBlock命令替代，但参数需要加上尖括号，例如： \u003ci class=\"iconfont icon-biaoti\" id=\"heading\" data-set=\"heading\"\u003e \u003cul class=\"child\"\u003e \u003cli data-set=\"formatBlock\" data-value=\"\u003cH1\u003e\"\u003e插入H1\u003c/li\u003e \u003cli data-set=\"formatBlock\" data-value=\"\u003cH2\u003e\"\u003e插入H2\u003c/li\u003e \u003cli data-set=\"formatBlock\" data-value=\"\u003cH3\u003e\"\u003e插入H3\u003c/li\u003e \u003cli data-set=\"formatBlock\" data-value=\"\u003cH4\u003e\"\u003e插入H4\u003c/li\u003e \u003cli data-set=\"formatBlock\" data-value=\"\u003cH5\u003e\"\u003e插入H5\u003c/li\u003e \u003cli data-set=\"formatBlock\" data-value=\"\u003cH6\u003e\"\u003e插入H6\u003c/li\u003e \u003c/ul\u003e \u003c/i\u003e \u003cscript\u003e var heading = document.getElementById('heading') var heading_child = heading.getElementsByClassName('child')[0] heading_child.addEventListener('click', function (e) { var target = e.target if (target.nodeName === 'LI') { console.log(1) edit.document.execCommand(target.getAttribute('data-set'), true, target.getAttribute('data-value')); } }) \u003c/script\u003e 关于事件绑定，同样的使用事件委托。 ","date":"2020-05-18","objectID":"/posts/project/20200518/:3:3","tags":null,"title":"模仿一个在线文档","uri":"/posts/project/20200518/"},{"categories":["project"],"content":"插入图片 插入图片时如果使用外链地址，那么可以直接插入。例如： edit.document.execCommand(\"insertImage\", true, 'https://ae01.alicdn.com/kf/H355adba4500642949f3d43d001b83ac3b.jpg'); 但是由于JavaScript限制，不能直接获取图片的真实地址。但返回的地址时Blob:xxxx，通过以上方式好像不可以。因此准备尝试通过自定义标签的方式插入。 2020-05-19完成本地图片的插入 这个功能很简单，主要思路是将图片载入后，将其转换data格式的即可。绑定事件即input按钮改变时触发。 insertImage.addEventListener('change', function (e) { // TAG 创建一个File对象 var reader = new FileReader(); // 加载文件内容 reader.readAsDataURL(e.target.files[0]); // 当内容加载完成后执行的动作 reader.onload = function (evt) { edit.document.execCommand(\"insertHTML\", true, '\u003cimg src=\"' + evt.target.result + '\"\u003e'); } }) 关于文件对象更多参考于MDN：https://developer.mozilla.org/zh-CN/docs/Web/API/File/Using_files_from_web_applications ","date":"2020-05-18","objectID":"/posts/project/20200518/:3:4","tags":null,"title":"模仿一个在线文档","uri":"/posts/project/20200518/"},{"categories":["project"],"content":"颜色设置 颜色选择器主要用于控制背景颜色和文字颜色。因为默认的input框难以改变其样式，因此将其透明度改为0，并且覆盖到标签上，实现点击标签触发按钮的假象。改变其颜色同样为input绑定change事件。颜色值为input的value // 设置背景颜色 hiliteColor_value.addEventListener('change', function () { hiliteColor.style.color = getColor(hiliteColor_value) edit.document.execCommand('hiliteColor', true, getColor(hiliteColor_value)); }) // 设置文字颜色 foreColor_value.addEventListener('change', function () { foreColor.style.color = getColor(foreColor_value) edit.document.execCommand('foreColor', true, getColor(foreColor_value)); }) // NOTE 颜色处理---获取颜色 function getColor(element) { return element.value } ","date":"2020-05-18","objectID":"/posts/project/20200518/:3:5","tags":null,"title":"模仿一个在线文档","uri":"/posts/project/20200518/"},{"categories":["project"],"content":"遇到的其他问题 我的双参数函数貌似没有用到 DONE本地图片无法显示问题 DONE关于颜色的调色板不知如何调出 ","date":"2020-05-18","objectID":"/posts/project/20200518/:4:0","tags":null,"title":"模仿一个在线文档","uri":"/posts/project/20200518/"},{"categories":["exercise"],"content":"描述 https://antmoe.gitee.io/project/2020/05/17/1_轮播图切换动画.html 实现静态效果不难，只需要控制其left效果即可。 如果加入动画效果，只能利用定时器. 左右按钮的切换大致相同,只以右按钮为例: 记录当前图片的索引(全局变量保存) 判断尺寸 几张图片 每张图片的宽度 利用定时器完成累加/减 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003e小米首页轮播图\u003c/title\u003e \u003cstyle\u003e * { box-sizing: border-box; } body { margin: 0; padding: 0; } .container { width: 1226px; height: 460px; background-color: lightcyan; overflow: hidden; margin: 100px auto; position: relative; } .container .imgList { width: 6130px; position: absolute; } .container .imgList img { display: block; width: 1226px; height: auto; float: left; } .container .slide-controls { width: 100%; height: 100%; position: absolute; left: 0; top: 0; right: 0; bottom: 0; } .container .slide-controls .slide-left, .container .slide-controls .slide-right { width: 41px; height: 69px; position: absolute; top: 50%; transform: translateY(-50%); background-image: url(https://i1.mifile.cn/f/i/2014/cn/icon/icon-slides.png); cursor: pointer; z-index: 2; } .container .slide-controls .slide-left { left: 0; background-position: -84px 0; } .container .slide-controls .slide-left:hover { background-position: 0 0; } .container .slide-controls .slide-right { right: 0; background-position: -124px 0; } .container .slide-controls .slide-right:hover { background-position: -42px 0; } .container .nav { width: 100px; height: 20px; position: absolute; left: 50%; right: 0; bottom: 8px; transform: translateX(-50%); z-index: 2; } .container .nav .slide-nav { width: 12px; height: 12px; border: 2px solid #fff; border-color: hsla(0, 0%, 100%, .3); border-radius: 10px; background: rgba(0, 0, 0, .4); cursor: pointer; margin: 0 4px; float: left; z-index: 3; } .container .nav .slide-nav:hover { background: hsla(0, 0%, 100%, .4); border-color: rgba(0, 0, 0, .4); } \u003c/style\u003e \u003cscript type=\"text/javascript\" nonce=\"e9b48b8ca3e64a6a85e757b4795\" src=\"//local.adguard.org?ts=1589675716165\u0026amp;type=content-script\u0026amp;dmn=gethtml.cn\u0026amp;css=1\u0026amp;js=1\u0026amp;gcss=1\u0026amp;rel=1\u0026amp;rji=1\u0026amp;stealth=1\u0026amp;uag=\"\u003e\u003c/script\u003e \u003cscript type=\"text/javascript\" nonce=\"e9b48b8ca3e64a6a85e757b4795\" src=\"//local.adguard.org?ts=1589675716165\u0026amp;name=AdGuard%20Popup%20Blocker\u0026amp;name=AdGuard%20Assistant\u0026amp;name=AdGuard%20Extra\u0026amp;type=user-script\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003c!-- 视觉容器 --\u003e \u003cdiv class=\"container\"\u003e \u003c!-- 图片列表 --\u003e \u003cdiv class=\"imgList\"\u003e \u003cimg src=\"https://ae01.alicdn.com/kf/U1a6b653720d845c682f97d2fcf75c22f6.png\" /\u003e \u003cimg src=\"https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/755aca9487082e7698e16f17cfb70839.jpg\" /\u003e \u003cimg src=\"https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/e5b37cdb85b3b93b5938cc508a10c906.jpg\" /\u003e \u003cimg src=\"https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/e909ef0e50960f61a730380013bc960a.jpg\" /\u003e \u003cimg src=\"https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/6bd4174b8c5aad67a64864a5716ad152.jpg\" /\u003e \u003c/div\u003e \u003c!-- 左右切换菜单 --\u003e \u003cdiv class=\"slide-controls\"\u003e \u003cdiv class=\"slide-left\"\u003e\u003c/div\u003e \u003cdiv class=\"slide-right\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c!-- 轮播图的导航 --\u003e \u003cdiv class=\"nav\"\u003e \u003cdiv class=\"slide-nav\"\u003e\u003c/div\u003e \u003cdiv class=\"slide-nav\"\u003e\u003c/div\u003e \u003cdiv class=\"slide-nav\"\u003e\u003c/div\u003e \u003cdiv class=\"slide-nav\"\u003e\u003c/div\u003e \u003cdiv class=\"slide-nav\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cscript\u003e // NOTE 获取元素对象 var container = document.getElementsByClassName('container')[0] var imgList = container.getElementsByClassName('imgList')[0] var rightBtn = document.getElementsByClassName('slide-right')[0] var leftBtn = document.getElementsByClassName('slide-left')[0] var nav = container.getElementsByClassName('nav')[0] var slide_nav = container.getElementsByClassName('slide-nav') var indexStart var auto_num // NOTE 定义全局变量 // TAG 定义单图片的宽度（每次滚动的大小） var img_width = 1226 // TAG 图片的总个数 var img_num = imgList.childElementCount // TAG 图片当前的索引 默认为0 var img_index = 0 // TAG 记录上一个nav按钮 var pre_nav_num = 0 // NOTE 定义函数 // TAG 按钮点击时，对应图片获得对应样式 function showNav(num) { // 显示当前被点击的nav slide_nav[num].style.background = 'hsla(0, 0%, 100%, .4)' slide_nav[num].style.borderColor = 'rgb","date":"2020-05-17","objectID":"/posts/exercise/20200517/:1:0","tags":null,"title":"左右滑动式轮播图","uri":"/posts/exercise/20200517/"},{"categories":["exercise"],"content":"错题 setInterval(function(){console.log('这是延迟执行.')}, 1000)这段代码的含义描述正确的是？ 每隔一秒都会调用function函数 每隔一秒都会执行console.log()语句 console.log()语句会在一秒之后执行 function函数只会被调用一次 我的选择： console.log()语句会在一秒之后执行 每隔一秒都会执行console.log()语句 每隔一秒都会调用function函数 正确答案： 每隔一秒都会执行console.log()语句 每隔一秒都会调用function函数 为什么选错？ 题目描述不严谨。但延迟一秒是因为周期函数每1秒执行一次。 ","date":"2020-05-16","objectID":"/posts/exercise/20200516/:1:0","tags":null,"title":"三个动画练习","uri":"/posts/exercise/20200516/"},{"categories":["exercise"],"content":"小练习 今日学习内容为三个小练习，分别为小球自动向下移动、菜单自动隐藏、键盘控制方块。 ","date":"2020-05-16","objectID":"/posts/exercise/20200516/:2:0","tags":null,"title":"三个动画练习","uri":"/posts/exercise/20200516/"},{"categories":["exercise"],"content":"小球自动向下移动 在线地址：https://antmoe.gitee.io/project/2020/05/16/1_小球自动向下移动.html 创建DIV 通过不断改变其top属性，实现不断向下移动 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003e小球自动向下移动\u003c/title\u003e \u003cstyle\u003e body { margin: 0; } .box { width: 50px; height: 50px; background-color: coral; border-radius: 50%; position: relative; left: 400px; top: -50px; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003c!-- \u003cdiv id=\"box\"\u003e\u003c/div\u003e --\u003e \u003cscript\u003e var body = document.body // 创建div id为box的标签,并加入到body元素种 function createBox() { var WIDTH = window.innerWidth var div = document.createElement('div') div.setAttribute('class', 'box') var random = Math.random() * (WIDTH - 50); div.style.left = random + 'px' body.appendChild(div) } // 控制div向下移动 function moveDown() { var boxs = document.getElementsByClassName('box') for (var i = 0; i \u003c boxs.length; i++) { var box = boxs[i] var style = window.getComputedStyle(box) var boxTop = parseFloat(style.top) boxTop++ box.style.top = boxTop + 'px' } } // 创建多个小球 for (var i = 0; i \u003c 10; i++) { createBox() } // 设置定时器,向下移动 setInterval(function () { // 调用向下移动函数 moveDown() }, 100) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-05-16","objectID":"/posts/exercise/20200516/:2:1","tags":null,"title":"三个动画练习","uri":"/posts/exercise/20200516/"},{"categories":["exercise"],"content":"菜单自动隐藏 在线地址：https://antmoe.gitee.io/project/2020/05/16/2_菜单自动隐藏.html 与上一个类似，通过不断改变高度，实现不断变小。 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e body { margin: 0; } #menu { width: 100px; height: 300px; border: 1px solid black; position: absolute; left: 400px; top: 100px; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"menu\"\u003e\u003c/div\u003e \u003cscript\u003e // 1. 获取指定元素 var menu = document.getElementById('menu') var flag = false var t = setInterval(function () { // 2. 获取有效项式 var style = window.getComputedStyle(menu) // 3. 获取指定元素的高度值 var height = parseFloat(style.height) // 判断高度是否为零 if (height \u003c= 0) { // 将指定元素隐藏 menu.style.display = 'none' clearInterval(t) } else { // 4. 减少元素的高度 height-- menu.style.height = height + 'px' } }, 100) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-05-16","objectID":"/posts/exercise/20200516/:2:2","tags":null,"title":"三个动画练习","uri":"/posts/exercise/20200516/"},{"categories":["exercise"],"content":"键盘控制方块移动 在线地址：https://antmoe.gitee.io/project/2020/05/16/3_键盘控制方块移动.html 常规的获取HTML元素 常规的监听键盘事件（keydown） 水平移动 设置一个标志位，用于判断是向左还是向右。另外需要记录计时器的返回值。用于清除计时器。 垂直移动 与水平方向同理 空格停止（清除移动） 将记录的定时器编号清除即可。 \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e body { margin: 0; } #box { width: 50px; height: 50px; background-color: coral; position: absolute; top: 200px; left: 100px; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"box\"\u003e\u003c/div\u003e \u003cscript\u003e var html = document.documentElement var body = document.body var box = document.getElementById('box') var boxStyle = window.getComputedStyle(box) // 定义水平移动标志,垂直移动标志,垂直事件编号 水平事件编号 var leavel_flag, vertical_flag, vertical, level document.addEventListener('keydown', function (e) { var boxTop = parseFloat(boxStyle.top) var boxLeft = parseFloat(boxStyle.left) // 获取按下的按键 var key = e.code switch (key) { case 'ArrowUp': vertical_flag = true vertical = vertical_move() break case 'ArrowDown': vertical_flag = false vertical = vertical_move() break case 'ArrowLeft': leavel_flag = false level = level_move() break case 'ArrowRight': leavel_flag = true level = level_move() break case 'Space': cancel() break } }) // 取消计时器 function cancel() { if (vertical) { clearTimeout(vertical) } if (level) { clearTimeout(level) } } function level_move() { cancel() // TAG flag 为true时,+操作,即向右 if (leavel_flag) { return setInterval(function () { box.style.left = (++boxLeft) + 'px' }, 50) } else { //TAG 否则向左 return setInterval(function () { box.style.left = (--boxLeft) + 'px' }, 50) } } function vertical_move() { cancel() // TAG flag 为true时,-操作,即向上 if (vertical_flag) { return setInterval(function () { box.style.top = (--boxTop) + 'px' }, 50) } else { //TAG 否则向下 return setInterval(function () { box.style.top = (++boxTop) + 'px' }, 50) } } \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-05-16","objectID":"/posts/exercise/20200516/:2:3","tags":null,"title":"三个动画练习","uri":"/posts/exercise/20200516/"},{"categories":["notes"],"content":"错题 有关window对象的描述以下哪些是正确的？ 在全局作用域定义的变量、函数和对象都是window对象的属性和方法 window对象是BOM中最核心的对象 window可以用来代表用户的操作系统 window对象用来表示浏览器窗口 我的选择： window对象用来表示浏览器窗口 在全局作用域定义的变量、函数和对象都是window对象的属性和方法 正确选项： window对象是BOM中最核心的对象 window对象用来表示浏览器窗口 在全局作用域定义的变量、函数和对象都是window对象的属性和方法 为什么选错？ 记反了==！ 认为BOM是window对象的。 有关window对象的描述以下哪些是正确的？ window.innerWidth和window.innerHeight用来获取浏览器窗口的内部宽度和高度 可以通过window对象获取一切我们想要的对象 window.outterWidth和window.outterHeight用来获取浏览器外部的宽度和高度 BOM中其他对象都是window对象的属性 我的选择： BOM中其他对象都是window对象的属性 window.innerWidth和window.innerHeight用来获取浏览器窗口的内部宽度和高度 正确答案： BOM中其他对象都是window对象的属性 window.innerWidth和window.innerHeight用来获取浏览器窗口的内部宽度和高度 window.outterWidth和window.outterHeight用来获取浏览器外部的宽度和高度 为什么选错？ 我认为outterHeight和outterWidth是获取整个浏览器窗口的宽度和高度。 ","date":"2020-05-13","objectID":"/posts/notes/20200513/:1:0","tags":null,"title":"定时器","uri":"/posts/notes/20200513/"},{"categories":["notes"],"content":"定时器 定时器的具体方法由 Window对象提供，共有以下两种定时器 延迟执行：指的是指定程序代码在指定时间后被执行，而不是立即被执行 周期执行：指的是指定程序代码在指定时间为间隔，重复被执行。 目前，HTML页面中多数动态效果，以及动画效果等均由定时器内容完成。 ","date":"2020-05-13","objectID":"/posts/notes/20200513/:1:1","tags":null,"title":"定时器","uri":"/posts/notes/20200513/"},{"categories":["notes"],"content":"延迟执行 语法：var timeoutID=scope.setTimeout(function/code[,delay]) function/code 受调用的函数或执行的代码 delay 延迟的毫秒数（1秒等于1000毫秒），函数的调用会在该延迟之后发生。如果省略该参数，delay取默认值0 返回值 该方法的返回值timeoutID是一个正整数，表示定时器的编号。这个值可以传递给clearTimeout()来取消该定时器。 基本语法测试 \r setTimeout(function () { console.log('默认立即制行') }) setTimeout(function () { console.log('延迟3秒执行') }, 3000) console.log('测试是否被延迟制行影响') // 清除定时 以下代码会导致 test 并不会输出 var t = setTimeout(function () { console.log('test') }, 3000) clearTimeout(t) 以上代码的测试如图所示，可以看到延迟制行会打乱代码执行的顺序。即*延迟10秒执行*语句并不会导致下边的语句不执行。 https://antmoe.gitee.io/project/2020/05/13/01_延迟制行.html ","date":"2020-05-13","objectID":"/posts/notes/20200513/:1:2","tags":null,"title":"定时器","uri":"/posts/notes/20200513/"},{"categories":["notes"],"content":"周期执行 语法：var timeoutID =scope.setInterval(function/code[,delay]) function/code 受调用的函数或执行的代码 delay 延迟的毫秒数（1秒等于1000毫秒），函数的调用会在该延迟之后发生。如果省略该参数，delay取默认值0 返回值 该方法的返回值timeoutID是一个正整数，表示定时器的编号。这个值可以传递给clearInterval()来取消该定时器。 基本语法测试 \r setInterval(function () { console.log('默认立即制行') }) setInterval(function () { console.log('延迟每3秒执行') }, 3000) console.log('测试是否被延迟制行影响') // 清除定时 var t = setInterval(function () { console.log('test') }, 3000) clearInterval(t) 可以看到，几乎与延迟执行相同。执行顺序不会受到延迟的影响。清除定时器同样导致定时消失。 将延迟执行改写为周期执行 \r // TAG 常规写法 function fun() { console.log('这是递归写法') setTimeout(fun, 1000) } fun() // TAG 匿名函数写法 (function () { console.log('这是匿名函数写法') setTimeout(arguments.callee, 1000) })() // TAG 匿名函数写名字写法 (function fun1() { console.log('这是匿名写名字写法') setTimeout(fun1, 1000) })() https://antmoe.gitee.io/project/2020/05/13/02_周期执行.html ","date":"2020-05-13","objectID":"/posts/notes/20200513/:1:3","tags":null,"title":"定时器","uri":"/posts/notes/20200513/"},{"categories":["notes"],"content":"动画方法requestAnimationFrame() window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。 注意：若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用window.requestAnimationFrame() 语法：window.requestAnimationFrame(callback); callback 下一次重绘之前更新动画帧所调用的函数(即上面所说的回调函数)。该回调函数会被传入DOMHighResTimeStamp参数，该参数与performance.now()的返回值相同，它表示requestAnimationFrame() 开始去执行回调函数的时刻。 返回值 一个 long 整数，请求 ID ，是回调列表中唯一的标识。是个非零值，没别的意义。你可以传这个值给 window.cancelAnimationFrame() 以取消回调函数。 基本语法测试 \r console.log('this is a message ') /* NOTE requestAnimationFrame(callback) NOTE 参数表示动画逻辑的回调函数 NOTE 返回值表示当前执行动画的标识 */ requestAnimationFrame(function () { console.log('this is animation...') }) console.log('this is a message2 ') 类似于延迟执行，执行一次就不会在执行了。 兼容性问题 \r var requestAnimationFrame = webkitRequestAnimationFrame || mozRequestAnimationFrame || requestAnimationFrame https://antmoe.gitee.io/project/2020/05/13/03_HTML5的动画方法.html ","date":"2020-05-13","objectID":"/posts/notes/20200513/:1:4","tags":null,"title":"定时器","uri":"/posts/notes/20200513/"},{"categories":["notes"],"content":"小案例 以下两个案例需要注意的点就是周期函数的返回值需要在全局作用域声明。在时间内部进行赋值。 ","date":"2020-05-13","objectID":"/posts/notes/20200513/:2:0","tags":null,"title":"定时器","uri":"/posts/notes/20200513/"},{"categories":["notes"],"content":"动态时间显示 整体来说，这是一个非常简单的小案例。其基本逻辑用一个周期定时器包裹起来即可。 https://antmoe.gitee.io/project/2020/05/13/04_动态时间显示.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003e动态显示时间\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton id=\"start\"\u003e开始显示\u003c/button\u003e \u003cbutton id=\"stop\"\u003e停止显示\u003c/button\u003e \u003ch2 id=\"showtime\"\u003e\u003c/h2\u003e \u003cscript\u003e var startBtn = document.getElementById('start') var stopBtn = document.getElementById('stop') var showtime = document.getElementById('showtime') var t; startBtn.addEventListener('click', function () { // TAG 禁用按钮 startBtn.setAttribute('disabled', 'disabled') t = setInterval(function () { // TAG 1. 获取当前时间 var date = new Date() var hour = date.getHours() var minute = date.getMinutes() var second = date.getSeconds() // TAG 2. 格式化当前时间 var time = hour + ':' + minute + ':' + second // TAG 3. 动态显示 showtime.textContent = time }) }) stopBtn.addEventListener('click', function () { startBtn.removeAttribute('disabled') clearInterval(t) }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-05-13","objectID":"/posts/notes/20200513/:2:1","tags":null,"title":"定时器","uri":"/posts/notes/20200513/"},{"categories":["notes"],"content":"方块移动 这个案例也很简单，同样是使用周期定时器。 https://antmoe.gitee.io/project/2020/05/13/05_方块自动移动.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e body { margin: 0; } #box { width: 50px; height: 50px; background-color: coral; position: absolute; top: 200px; left: 100px; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"box\"\u003e\u003c/div\u003e \u003cscript\u003e var box = document.getElementById('box') var t // NOTE 开关,false表示没有被点击过,应开始移动. var flag = false box.addEventListener('click', function () { if (!flag) { t = setInterval(function () { // TAG 1. 获取当前方块的left var style = window.getComputedStyle(box) var left = parseFloat(style.left) // TAG 2. 增加left样式属性值 left++ // TAG 3. 利用内联样式覆盖外联样式 box.style.left = left + 'px' }, 10) flag = true } else { clearInterval(t) flag = false } }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-05-13","objectID":"/posts/notes/20200513/:2:2","tags":null,"title":"定时器","uri":"/posts/notes/20200513/"},{"categories":["notes"],"content":"BOM编程艺术 ","date":"2020-05-12","objectID":"/posts/notes/20200512/:0:0","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"日考错题 以下哪些选项是可以用来获取select元素中所有的option元素？ selectElement.getElementsByTagName(‘option’) selectElement.options selectElement.getElemnetsByName(‘option’) selectElement.length 我的选择： selectElement.options selectElement.getElementsByTagName(‘option’) selectElement.getElemnetsByName(‘option’) 正确答案 selectElement.options selectElement.length selectElement.getElementsByTagName(‘option’) 为什么做错？ 对于selectElement.getElemnetsByName('option') 选项看错了，以为是className。 没有选择selectElement.length是因为只认为他是取长度，审题不清。 如何可以获取那个option元素被选中两列？ optionElement.selected属性值为value optionElement.value属性值为非空字符串 selectElement.optionSelected selectElement.selectedIndex 我的选择： selectElement.selectedIndex selectElement.optionSelected 正确答案： selectElement.selectedIndex optionElement.selected属性值为value 为什么做错？ selectElement对象根本就没有optionSelected属性。而是selected属性。 如何获取option元素的值？ optionElement.value optionElement.getAttribute(‘value’) optionElement.textValue optionElment.text 我的选择： optionElement.value optionElement.getAttribute(‘value’) optionElment.text 正确答案： optionElement.value optionElement.getAttribute(‘value’) 为什么做错？ optionElment.text对于这个选项，值与文本内容可以不相等。 ","date":"2020-05-12","objectID":"/posts/notes/20200512/:1:0","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"项目抽查 一个表单 一个用户名输入框 两个密码输入（密码，确定密码）框 一个email输入框 一个下拉选择 复选框若干个 逻辑内容①：实现对用户名输入不为空的验证 获取用户名输入框对象 为用户名输入框对象绑定事件（focus：获取焦点；blur：失去焦点） 利用HTML5的API进行验证 if (username.validity.valueMissing) { username.setCustomValidity('用户名不能为空') } else { username.setCustomValidity('') } 虽然绑定的是blur（失去焦点）事件，但触发仍需要表单被提交才能触发。因此需要提交表单才可以。 逻辑内容②：实现对两个密码框一致性的判断 表单提交，提交的是表单。因此需要获取表单对象 为表单对象绑定事件（submit） 事件中，需要禁用默认事件。即event.preventDefault() 接下来就是常规判断 // document.forms 返回结果为集合 var form = document.forms[0] form.addEventListener('submit', function (event) { event.preventDefault() if (document.getElementById('pwd1').value != document.getElementById('pwd2').value) { username.setCustomValidity('密码不一致') } else { username.setCustomValidity('') } }) 项目在线地址：https://antmoe.gitee.io/project/2020/05/12/1.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cform action=\"\"\u003e \u003cinput type=\"text\" required id=\"username\"\u003e \u003cinput type=\"password\" id=\"pwd1\"\u003e \u003cinput type=\"password\" id=\"pwd2\" \u003e \u003cinput type=\"email\"\u003e \u003cselect name=\"\" id=\"\"\u003e \u003coption value=\"nan\"\u003e男\u003c/option\u003e \u003coption value=\"nv\"\u003e女\u003c/option\u003e \u003c/select\u003e \u003cinput type=\"checkbox\" name=\"t\" id=\"\"\u003etest \u003cinput type=\"checkbox\" name=\"t\" id=\"\"\u003etest \u003cinput type=\"checkbox\" name=\"t\" id=\"\"\u003etest \u003cinput type=\"submit\" value=\"66\" id=\"sub\"\u003e \u003c/form\u003e \u003cscript\u003e var form = document.forms[0] var username = document.getElementById('username') username.addEventListener('blur', function () { console.log(1) if (username.validity.valueMissing) { username.setCustomValidity('用户名不能为空') } else { username.setCustomValidity('') } }) var sub = document.getElementById('sub') form.addEventListener('submit', function (event) { event.preventDefault() if (document.getElementById('pwd1').value != document.getElementById('pwd2').value) { username.setCustomValidity('密码不一致') } else { username.setCustomValidity('') } }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-05-12","objectID":"/posts/notes/20200512/:2:0","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"什么是BOM BOM的全称为 Browser Object Model，被译为浏览器对象模型 BOM提供了独立于HTML页面内容，而与浏览器相关的一系列对象。主要被用于管理浏览器窗口及与测览器窗口之间通信等功能。 BOM由一系列对象构成，这些对象可以简单理解为是由各个览器所提供的，例如 Window对象等。 ","date":"2020-05-12","objectID":"/posts/notes/20200512/:3:0","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"Window对象 window对象是BOM中最核心的对象 ","date":"2020-05-12","objectID":"/posts/notes/20200512/:4:0","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"全局作用域 在浏览器环境中运行javascript逻辑时，在全局作用域中定义的对象、变量和函数都是Window对象的属性和方法。 var test = 666 console.log('test:', test) console.log('windows.test:', window.test) function t() { console.log('this is function') } t() window.t() delete window.test console.log('删除windwos.test后test的值:', test) console.log('删除windwos.test后windows.test的值:', window.test) delete test console.log('删除test后test的值:', test) console.log('删除test后windows.test的值:', window.test) 根据以上测试结果，可以很清楚的发现：删除是不起作用的。 https://antmoe.gitee.io/project/2020/05/12/01_window对象.html ","date":"2020-05-12","objectID":"/posts/notes/20200512/:4:1","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"浏览器窗口的宽度和高度 innerWidth和innerHeight属性 只读属性，返回当前浏览器窗口的可视宽度和高度。如果存在滚动条，也包含滚动条。 outterWidth和outterHeight属性 只读属性，返回当前浏览器窗口的整个宽度和高度。 https://antmoe.gitee.io/project/2020/05/12/02_图片跟随窗口变化.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e body { margin: 0; padding: 0; } img { width: 100%; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cimg id=\"img\" src=\"https://ae01.alicdn.com/kf/H1d2dc39c58a84dc0960d4173b1bbc4643.jpg\" alt=\"\"\u003e \u003cscript\u003e var img = document.getElementById('img') // resize表示重新设置大小 window.addEventListener('resize', function () { console.log(window.innerWidth, window.innerHeight) img.style.width = window.innerWidth + 'px' img.style.height = window.innerHeight + 'px' }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e window.innerWidth等属性得值均为数字类型，作为宽度需加单位。例如window.innerWidth + 'px' \r","date":"2020-05-12","objectID":"/posts/notes/20200512/:4:2","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"Windows对象与self属性 Window对象的self属性返回当前浏览器窗口的只读属性。换句话讲，Self属性返回的是 Window对象的引用。 if (window.top != window.self) { console.log('这个窗口不是最顶层窗口') } else { console.log('这个窗口是最顶层窗口') } ","date":"2020-05-12","objectID":"/posts/notes/20200512/:4:3","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"open和close open[url] 参数参数打开地址。 close() 关闭当前页签 以上两个方法均是操作页签 \rhttps://antmoe.gitee.io/project/2020/05/12/03_打开与关闭浏览器窗口.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton id=\"btn\"\u003e按钮\u003c/button\u003e \u003cbutton id=\"close\"\u003e关闭\u003c/button\u003e \u003cscript\u003e var btn = document.getElementById('btn') var closebtn = document.getElementById('close') btn.addEventListener('click', function () { window.open('https://baidu.com') }) closebtn.addEventListener('click', function () { window.close() }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-05-12","objectID":"/posts/notes/20200512/:4:4","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"Navigator对象 Navigator对象包含了一些有美浏览器状态的信息。可以通过window.navigator属性得到 Navigator对象。 https://antmoe.gitee.io/project/2020/05/12/04_navigator.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript\u003e // 以下属性均为只读属性 console.log('浏览器的代码名：', navigator.appCodeName) console.log('浏览器的名称：', navigator.appName) console.log('浏览器的平台和版本信息：', navigator.appVersion) console.log('运行浏览器的操作系统平台：', navigator.platform) console.log('运行浏览器的userAgent：', navigator.userAgent) // 判断用户使用的平台 var ua = navigator.userAgent if (/windows/i.test(ua)) { console.log('当前是Windows系统') } else if (/mac/i.test(ua)) { console.log('当前是mac操作系统') } else if (/android/i.test(ua)) { console.log('当前是android操作系统') } else if (/iphone/i.test(ua)) { console.log('当前是iphone操作系统') } \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 使用switch语句判断用户浏览器信息 \r var ua = navigator.userAgent var regex = /Chrome|Edge|Firefox/i var info = ua.match(regex) console.log(info) switch (info[0]) { case 'Chrome': console.log('Chrome') break case 'Edge': console.log('Edge') break case 'Firefox': console.log('Firefox') break case 'msie': console.log('msie') break default: console.log('你的浏览器是自创的吧?') } 使用常规方式判断用户浏览器信息 \r var ua = navigator.userAgent if (/Chrome/i.test(ua) \u0026\u0026 /Edg/i.test(ua)) { console.log('Edge') } else if (/Firefox/i.test(i)) { console.log('Firefox') } else if (/Chrome/i.test(ua)) { console.log('Chrome') } https://antmoe.gitee.io/project/2020/05/13/1.html 完整代码： \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript\u003e var ua = navigator.userAgent if (/Chrome/i.test(ua) \u0026\u0026 /Edg/i.test(ua)) { console.log('Edge') } else if (/Firefox/i.test(i)) { console.log('Firefox') } else if (/Chrome/i.test(ua)) { console.log('Chrome') } var regex = /Chrome|Edge|Firefox/i var info = ua.match(regex) switch (info[0]) { case 'Chrome': console.log('Chrome') break case 'Edge': console.log('Edge') break case 'Firefox': console.log('Firefox') break case 'msie': console.log('msie') break default: console.log('你的浏览器是自创的吧?') } \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-05-12","objectID":"/posts/notes/20200512/:4:5","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"History对象 History对象包含用户在测览器中访问过的URL（网址）。 length属性 History对象的length属性可以获取用户在浏览器中访问网址的数量。 前进和后退功能 方法名称 描述 forward() 实现跳转下一个页面，作用和浏览器的前进按钮一样 back() 实现跳转到上一个页面，作用和浏览器的回退按钮一样 go() 实现跳转到指定的页面。如果为负数表示后退，如果为正数表示前进 ","date":"2020-05-12","objectID":"/posts/notes/20200512/:4:6","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"Location对象 Location对象包含了浏览器的地址栏中的信息，该对象主要用于获取和设置地址。 Location对象很特别，因为该对象既是 Window对象的属性，又是 Document对象的属性。 属性/方法名称 描述 host 返回服务器名称和端口号 hostname 返回服务器名称 href 返回当前加载页面的完整URL pathname 返回当前URL中的目录和文件名 port 返回当前URL中的端口号 protocol 返回页面使用的网络协议 assign() 载入一个新的文档，作用和直接修改 Location相同 reload() 重新载入当前文档，作用和刷新按钮一样。参数为true时，则会强制清空缓存刷新页面 replace() 用新的文档替换当前文档（不会生成历史记录，不能使用回退按钮回退） 获取和设置地址 https://antmoe.gitee.io/project/2020/05/12/05_获取和设置地址.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton id=\"btn\"\u003e按钮\u003c/button\u003e \u003cscript\u003e var btn = document.getElementById('btn') btn.addEventListener('click', function () { console.log('Location对象为：', window.location) window.location = 'https://www.baidu.com' }) // 也可以用下边的方式 // btn.addEventListener('click', function () { // console.log('Location对象的href属性为：', location.href) // location.href = 'https://www.baidu.com' // }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-05-12","objectID":"/posts/notes/20200512/:4:7","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"定时器 定时器的具体方法由 Window对象提供，共有以下两种定时器 延迟执行：指的是指定程序代码在指定时间后被执行，而不是立即被执行 周期执行：指的是指定程序代码在指定时间为间隔，重复被执行。 目前，HTML页面中多数动态效果，以及动画效果等均由定时器内容完成。 延迟执行 语法：var timeoutID=scope.setTimeout(function/code[,delay]) function/code 受调用的函数或执行的代码 delay 延迟的毫秒数（1秒等于1000毫秒），函数的调用会在该延迟之后发生。如果省略该参数，delay取默认值0 返回值 该方法的返回值timeoutID是一个正整数，表示定时器的编号。这个值可以传递给clearTimeout()来取消该定时器。 基本语法测试 \r setTimeout(function () { console.log('默认立即制行') }) setTimeout(function () { console.log('延迟3秒执行') }, 3000) console.log('测试是否被延迟制行影响') // 清除定时 以下代码会导致 test 并不会输出 var t = setTimeout(function () { console.log('test') }, 3000) clearTimeout(t) 以上代码的测试如图所示，可以看到延迟制行会打乱代码执行的顺序。即*延迟10秒执行*语句并不会导致下边的语句不执行。 https://antmoe.gitee.io/project/2020/05/13/01_延迟制行.html 周期执行 语法：var timeoutID =scope.setInterval(function/code[,delay]) function/code 受调用的函数或执行的代码 delay 延迟的毫秒数（1秒等于1000毫秒），函数的调用会在该延迟之后发生。如果省略该参数，delay取默认值0 返回值 该方法的返回值timeoutID是一个正整数，表示定时器的编号。这个值可以传递给clearInterval()来取消该定时器。 基本语法测试 \r setInterval(function () { console.log('默认立即制行') }) setInterval(function () { console.log('延迟每3秒执行') }, 3000) console.log('测试是否被延迟制行影响') // 清除定时 var t = setInterval(function () { console.log('test') }, 3000) clearInterval(t) 可以看到，几乎与延迟执行相同。执行顺序不会受到延迟的影响。清除定时器同样导致定时消失。 将延迟执行改写为周期执行 \r // TAG 常规写法 function fun() { console.log('这是递归写法') setTimeout(fun, 1000) } fun() // TAG 匿名函数写法 (function () { console.log('这是匿名函数写法') setTimeout(arguments.callee, 1000) })() // TAG 匿名函数写名字写法 (function fun1() { console.log('这是匿名写名字写法') setTimeout(fun1, 1000) })() https://antmoe.gitee.io/project/2020/05/13/02_周期执行.html 动画方法requestAnimationFrame() window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。 注意：若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用window.requestAnimationFrame() 语法：window.requestAnimationFrame(callback); callback 下一次重绘之前更新动画帧所调用的函数(即上面所说的回调函数)。该回调函数会被传入DOMHighResTimeStamp参数，该参数与performance.now()的返回值相同，它表示requestAnimationFrame() 开始去执行回调函数的时刻。 返回值 一个 long 整数，请求 ID ，是回调列表中唯一的标识。是个非零值，没别的意义。你可以传这个值给 window.cancelAnimationFrame() 以取消回调函数。 基本语法测试 \r console.log('this is a message ') /* NOTE requestAnimationFrame(callback) NOTE 参数表示动画逻辑的回调函数 NOTE 返回值表示当前执行动画的标识 */ requestAnimationFrame(function () { console.log('this is animation...') }) console.log('this is a message2 ') 类似于延迟执行，执行一次就不会在执行了。 兼容性问题 \r var requestAnimationFrame = webkitRequestAnimationFrame || mozRequestAnimationFrame || requestAnimationFrame https://antmoe.gitee.io/project/2020/05/13/03_HTML5的动画方法.html ","date":"2020-05-12","objectID":"/posts/notes/20200512/:4:8","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"小案例 以下两个案例需要注意的点就是周期函数的返回值需要在全局作用域声明。在时间内部进行赋值。 ","date":"2020-05-12","objectID":"/posts/notes/20200512/:5:0","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"动态时间显示 整体来说，这是一个非常简单的小案例。其基本逻辑用一个周期定时器包裹起来即可。 https://antmoe.gitee.io/project/2020/05/13/04_动态时间显示.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003e动态显示时间\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cbutton id=\"start\"\u003e开始显示\u003c/button\u003e \u003cbutton id=\"stop\"\u003e停止显示\u003c/button\u003e \u003ch2 id=\"showtime\"\u003e\u003c/h2\u003e \u003cscript\u003e var startBtn = document.getElementById('start') var stopBtn = document.getElementById('stop') var showtime = document.getElementById('showtime') var t; startBtn.addEventListener('click', function () { // TAG 禁用按钮 startBtn.setAttribute('disabled', 'disabled') t = setInterval(function () { // TAG 1. 获取当前时间 var date = new Date() var hour = date.getHours() var minute = date.getMinutes() var second = date.getSeconds() // TAG 2. 格式化当前时间 var time = hour + ':' + minute + ':' + second // TAG 3. 动态显示 showtime.textContent = time }) }) stopBtn.addEventListener('click', function () { startBtn.removeAttribute('disabled') clearInterval(t) }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-05-12","objectID":"/posts/notes/20200512/:5:1","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"方块移动 这个案例也很简单，同样是使用周期定时器。 https://antmoe.gitee.io/project/2020/05/13/05_方块自动移动.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003cstyle\u003e body { margin: 0; } #box { width: 50px; height: 50px; background-color: coral; position: absolute; top: 200px; left: 100px; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"box\"\u003e\u003c/div\u003e \u003cscript\u003e var box = document.getElementById('box') var t // NOTE 开关,false表示没有被点击过,应开始移动. var flag = false box.addEventListener('click', function () { if (!flag) { t = setInterval(function () { // TAG 1. 获取当前方块的left var style = window.getComputedStyle(box) var left = parseFloat(style.left) // TAG 2. 增加left样式属性值 left++ // TAG 3. 利用内联样式覆盖外联样式 box.style.left = left + 'px' }, 10) flag = true } else { clearInterval(t) flag = false } }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-05-12","objectID":"/posts/notes/20200512/:5:2","tags":null,"title":"BOM编程艺术","uri":"/posts/notes/20200512/"},{"categories":["notes"],"content":"表单操作 ","date":"2020-05-11","objectID":"/posts/notes/20200511/:0:0","tags":null,"title":"14事件","uri":"/posts/notes/20200511/"},{"categories":["notes"],"content":"获取表单 获取表单元素 \r 通过常规方式 Document对象方式。document.getElementById('form')等。 通过Document的属性forms document.forms 返回结果为HTMLCollection。 通过表单的name名字。 此方法不推荐。因为在新版本的浏览器中可能不再支持。 如果返回结果为一个时类型为对象，多个时是集合。 获取表单组件元素 \r 常规方式 Document对象方式。document.getElementById('form_input')等。 通过表单元素的属性elements var f = document.forms[0] console.log(f.elements) ","date":"2020-05-11","objectID":"/posts/notes/20200511/:1:0","tags":null,"title":"14事件","uri":"/posts/notes/20200511/"},{"categories":["notes"],"content":"表单操作 ","date":"2020-05-11","objectID":"/posts/notes/20200511/:2:0","tags":null,"title":"14事件","uri":"/posts/notes/20200511/"},{"categories":["notes"],"content":"文本框的操作 选择当前文本框的所有内容 \u003cform action=\"#\" id=\"myform\"\u003e \u003cinput type=\"text\" id=\"username\" name=\"username\" value=\"请输入用户名\"\u003e \u003c/form\u003e \u003cscript\u003e var username = document.getElementById('username') username.select() \u003c/script\u003e select事件 简单来说就是当被选择时的触发的事件 \u003cform action=\"#\" id=\"myform\"\u003e \u003cinput type=\"text\" id=\"username\" name=\"username\" value=\"请输入用户名\"\u003e \u003c/form\u003e \u003cscript\u003e var username = document.getElementById('username') username.addEventListener('select', function () { console.log('select') }) \u003c/script\u003e 获取选择的文本内容 selectionStart 选择文本内容的开始索引值 selectionEnd 选择文本内容的结束索引值 \u003cform action=\"#\" id=\"myform\"\u003e \u003cinput type=\"text\" id=\"username\" name=\"username\" value=\"请输入用户名\"\u003e \u003c/form\u003e \u003cscript\u003e var username = document.getElementById('username') username.addEventListener('select', function () { console.log(username.selectionStart, username.selectionEnd, username.value.slice(username.selectionStart, username.selectionEnd)) }) \u003c/script\u003e 设置文本内容 setSelectionRange(start,end,[opt]) 参数分别为开始位置，结束位置和方向（forward、backward、none，分别表示从前往后，从后往前，选择方向位置或不重要）。 \u003cform action=\"#\" id=\"myform\"\u003e \u003cinput type=\"text\" id=\"username\" name=\"username\" value=\"请输入用户名\"\u003e \u003c/form\u003e \u003cscript\u003e var username = document.getElementById('username') username.addEventListener('click', function () { username.setSelectionRange(1, 2) }) \u003c/script\u003e 操作剪切板 操作剪切板的事件为copy、cut、paste。分别为复制、剪切、粘贴。 复制操作示例 username1.addEventListener('copy', function () { console.log('这是一个复制操作。。。。') }) 剪切操作示例 username1.addEventListener('cut', function () { console.log('这是一个剪切操作') }) 粘贴操作示例 var username2 = document.getElementById('username2') username2.addEventListener('paste', function (event) { // 阻止默认行为 event.preventDefault() // 为了测试效果，将用户名替换成*** if (result === '用户名') { result = '***' } username2.value = result }) 通过全局变量方式获取剪切板内容方式 \r也就是在全局作用域定义一个变量，这个变量用于存储每次用户复制后的内容。 https://antmoe.gitee.io/project/2020/05/11/01_操作剪切板.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cform action=\"\"\u003e \u003cinput type=\"text\" id=\"username1\" value=\"请输入你的用户名\"\u003e \u003cinput type=\"text\" id=\"username2\"\u003e \u003cinput type=\"submit\" value=\"\"\u003e \u003c/form\u003e \u003cscript\u003e var username1 = document.getElementById('username1') // 全局变量方式 var result // copy操作 username1.addEventListener('copy', function () { console.log('这是一个复制操作。。。。') var value = username1.value result = value.substring(username1.selectionStart, username1.selectionEnd) // console.log(result) }) // cut操作 username1.addEventListener('cut', function () { console.log('这是一个剪切操作') }) var username2 = document.getElementById('username2') username2.addEventListener('paste', function (event) { event.preventDefault() if (result === '用户名') { result = '***' } username2.value = result }) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 通过DataTransfer对象设置. \r DataTransfer对象通过事件获取 存在兼容性问题,因此使用或操作符. username2.addEventListener('paste', function (event) { var data = event.clipboardData || window.clipboardData }) DataTransfer提供的方法 为一个给定的类型设置数据 setData(in String type,in String data) var result = '666' data.setData('text', result) 根据指定的类型检索数据 getData(in String type) data.getData('text') 删除与给定类型关联的数据 clearData([in String type]) https://antmoe.gitee.io/project/2020/05/11/02_操作剪切板.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cform action=\"\"\u003e \u003cinput type=\"text\" id=\"username1\" value=\"请输入你的用户名\"\u003e \u003cinput type=\"text\" id=\"username2\"\u003e \u003cinput type=\"submit\" value=\"\"\u003e \u003c/form\u003e \u003cscript\u003e var username1 = document.getElementById('username1') // copy操作 username1.addEventListener('copy', function (event) { var data = event.clipboardData || window.clipboardData console.log(data) console.log('这是一个复制操作。。。。') var value = username1.value result = value.substring(username1.selectionStart, username1.selectionEnd) console.log(result) data.setData('text', result) }) var username2 = document.getElementById('username2') username2.addEventListener('paste', functi","date":"2020-05-11","objectID":"/posts/notes/20200511/:2:1","tags":null,"title":"14事件","uri":"/posts/notes/20200511/"},{"categories":["notes"],"content":"表单验证 HTML5验证API属性 \r以下方法通过validity调用.username.validity.valueMissing 名称 类型 描述 customError Boolean 该元素的自定义有效性消息已经通过调用元素的setCustomValidity() 方法设置成为一个非空字符串. patternMismatch Boolean 该元素的值与指定的pattern属性不匹配. rangeOverflow Boolean 该元素的值大于指定的 max属性. rangeUnderflow Boolean 该元素的值小于指定的 min属性. stepMismatch Boolean 该元素的值不符合由step属性指定的规则. tooLong Boolean 该元素的值的长度超过了HTMLInputElement 或者 HTMLTextAreaElement 对象指定的maxlength属性中的值. 注意:在Gecko中,该属性永远不会为true,因为浏览器会阻止元素的值的长度超过maxlength. typeMismatch Boolean 该元素的值不符合元素类型所要求的格式(当type 是 email 或者 url时). valid Boolean 其他的约束验证条件都不为true. valueMissing Boolean 该元素有 required 属性,但却没有值. HTML5验证API方法 \r 方法名 描述 checkValidity() 如果元素的值不存在验证问题，返回true，否则返回 false setCustomValidity(message) 为元素添加一个自定义的错误消息：如果设置了自定义错误消息，则该元素被认是无效的，并显示指定的错误 判断输入是否为空 username.addEventListener('blur', function () { if (username.validity.valueMissing) { console.log('用户名为空了') } }) 设置错误提示 username.addEventListener('blur', function () { if (username.validity.valueMissing) { username.setCustomValidity('用户名不能为空') }else { username.setCustomValidity('') } }) 需要注意的是,当设置自定义错误后,需要在反情况下再次设置空字符串,否则验证会一致失败.如上代码所示. 另外需要注意的是：所有的验证都是在触发提交事件时才会被触发。也就是当点击submit按钮时，才会验证。 https://antmoe.gitee.io/project/2020/05/11/04_HTML5表单验证.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cform action=\"\"\u003e \u003cinput type=\"text\" id=\"username\" required pattern=\"^[0-9a-zA-Z]$\"\u003e \u003cinput type=\"submit\"\u003e \u003c/form\u003e \u003cscript\u003e var username = document.getElementById(\"username\") /* 表单组件元素对应的对象提供了validity属性 */ // console.log(username.validity) // 配合元素中required属性来使用 // true 表示当前内容为空 false表示当前元素内容不为空 // console.log(username.validity.valueMissing) username.addEventListener('blur', function () { if (username.validity.valueMissing) { username.setCustomValidity('用户名不能为空') } else { username.setCustomValidity('') } if (username.validity.patternMismatch) { username.validity.setCustomValidity('用户名格式错误') } else { username.setCustomValidity('') } }) // console.log(username.validity.) \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2020-05-11","objectID":"/posts/notes/20200511/:3:0","tags":null,"title":"14事件","uri":"/posts/notes/20200511/"},{"categories":["notes"],"content":"表单提交 submit事件 var form = document.forms[0] form.addEventListener('submit', function (e) { console.log('当前表单以被提交') e.preventDefault() }) submit() var btn = document.getElementById('btn') btn.addEventListener('click', function (e) { form.submit() }) https://antmoe.gitee.io/project/2020/05/11/05_表单提交.html ","date":"2020-05-11","objectID":"/posts/notes/20200511/:4:0","tags":null,"title":"14事件","uri":"/posts/notes/20200511/"},{"categories":["帮助"],"content":"note \u003cdiv class=\"details admonition note open\"\u003e \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fas fa-pencil-alt fa-fw\"\u003e\u003c/i\u003e注意\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=details-content\u003e \u003cdiv class=admonition-content\u003e一个 \u003cstrong\u003e注意\u003c/strong\u003e note\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"details admonition abstract open\"\u003e \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fas fa-list-ul fa-fw\"\u003e\u003c/i\u003e摘要\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=details-content\u003e \u003cdiv class=admonition-content\u003e一个 \u003cstrong\u003e摘要\u003c/strong\u003e abstract\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"details admonition info open\"\u003e \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fas fa-info-circle fa-fw\"\u003e\u003c/i\u003e信息\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=details-content\u003e \u003cdiv class=admonition-content\u003e一个 \u003cstrong\u003e信息\u003c/strong\u003e info\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"details admonition tip open\"\u003e \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fas fa-lightbulb fa-fw\"\u003e\u003c/i\u003e技巧\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=details-content\u003e \u003cdiv class=admonition-content\u003e一个 \u003cstrong\u003e技巧\u003c/strong\u003e tip\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"details admonition success open\"\u003e \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fas fa-check-circle fa-fw\"\u003e\u003c/i\u003e成功\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=details-content\u003e \u003cdiv class=admonition-content\u003e一个 \u003cstrong\u003e成功\u003c/strong\u003e success\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"details admonition question open\"\u003e \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fas fa-question-circle fa-fw\"\u003e\u003c/i\u003e问题\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=details-content\u003e \u003cdiv class=admonition-content\u003e一个 \u003cstrong\u003e问题\u003c/strong\u003e question\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"details admonition warning open\"\u003e \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fas fa-exclamation-triangle fa-fw\"\u003e\u003c/i\u003e警告\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=details-content\u003e \u003cdiv class=admonition-content\u003e一个 \u003cstrong\u003e警告\u003c/strong\u003e warning\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"details admonition failure open\"\u003e \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fas fa-times-circle fa-fw\"\u003e\u003c/i\u003e失败\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=details-content\u003e \u003cdiv class=admonition-content\u003e一个 \u003cstrong\u003e失败\u003c/strong\u003e failure\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"details admonition danger open\"\u003e \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fas fa-skull-crossbones fa-fw\"\u003e\u003c/i\u003e危险\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=details-content\u003e \u003cdiv class=admonition-content\u003e一个 \u003cstrong\u003e危险\u003c/strong\u003e danger\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"details admonition bug open\"\u003e \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fas fa-bug fa-fw\"\u003e\u003c/i\u003eBug\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=details-content\u003e \u003cdiv class=admonition-content\u003e一个 \u003cstrong\u003eBug\u003c/strong\u003e bug\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"details admonition example open\"\u003e \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fas fa-list-ol fa-fw\"\u003e\u003c/i\u003e示例\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=details-content\u003e \u003cdiv class=admonition-content\u003e一个 \u003cstrong\u003e示例\u003c/strong\u003e example\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv class=\"details admonition quote open\"\u003e \u003cdiv class=\"details-summary admonition-title\"\u003e\u003ci class=\"icon fas fa-quote-right fa-fw\"\u003e\u003c/i\u003e引用\u003ci class=\"details-icon fas fa-angle-right fa-fw\"\u003e\u003c/i\u003e\u003c/div\u003e \u003cdiv class=details-content\u003e \u003cdiv class=admonition-content\u003e一个 \u003cstrong\u003e引用\u003c/strong\u003e quote\u003c/div\u003e \u003c/div\u003e \u003c/div\u003e 注意\r一个 注意 note\r\r\r摘要\r一个 摘要 abstract\r\r\r信息\r一个 信息 info\r\r\r技巧\r一个 技巧 tip\r\r\r成功\r一个 成功 success\r\r\r问题\r一个 问题 question\r\r\r警告\r一个 警告 warning\r\r\r失败\r一个 失败 failure\r\r\r危险\r一个 危险 danger\r\r\rBug\r一个 Bug bug\r\r\r示例\r一个 示例 example\r\r\r引用\r一个 引用 quote\r\r\r","date":"2020-05-10","objectID":"/posts/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/help/:1:0","tags":["帮助"],"title":"标签使用手册","uri":"/posts/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/help/"},{"categories":["帮助"],"content":"figure \u003cfigure\u003e \u003cimg src=\"/images/theme-documentation-built-in-shortcodes/lighthouse.jpg\"/\u003e \u003cfigcaption\u003e \u003ch4\u003eLighthouse (figure)\u003c/h4\u003e \u003c/figcaption\u003e \u003c/figure\u003e \r\rLighthouse (figure)\r\r","date":"2020-05-10","objectID":"/posts/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/help/:2:0","tags":["帮助"],"title":"标签使用手册","uri":"/posts/%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/help/"},{"categories":["自考"],"content":"自考英语（二）词汇","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"高频单词 ","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:0","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 1 A **able'** [ˈeɪbl] adj. 有能力的,有才能的反义词: unable ​ People there are able to use the water resources to meet their daily needs. ​ 那里的人们可以利用水资源来满足日常需求。 ​ 【衍生词】 enable [ɪˈneɪbl] vt.使能够 ​ 过去式: enabled 过去分词: enabled 现在分词: enabling ​ 第三人称单数:enables ​ These forms of communication enable them to share ideas about themselve ​ and the world in almost real time ​ 这些通信方式使他们能够实时分享关于自身和世界的想法。 ​ ability’ [əˈbɪləti] n.能力(不可数),才能(可数) 复数: abilities ​ He is man of ability.他是位有能力的人 ​ He is man of many abilities.他是位多才多艺的人 ​ 【固定词组】 ​ be/do able to do sth.能(能够)做某事; enable sb. to do sth.使某人能够做 ​ 某事 absorb [ əbˈzɔːrb ] vt.吸收 ​ 过去式: absorbed 过去分词: absorbed 现在分词:absorbing ​ 第三人称单数:absorbs ​ They are the ones that help us to absorb our food. ​ 它们(平滑肌)帮助我们吸收食物。 ​ 【衍生词】absorption [əbˈzɔːpʃn] n吸收 ​ This controls the absorption of liquids.这控制着液体的吸收。 academically’ [ˌækə’demɪklɪ ] adv.学术上地,从学术观点 ​ 形容词:academical ​ It can help predict how well someone may do academically. ​ (IQ)可以预测一个人在学术上的发展。 ​ 【衍生词】academy [ əˈkædəmi ] n.专科学校,学院,私立学校 ​ 复数:academies ​ This is an academy of music.这是一所音乐专科学院 acceptable [əkˈseptəbl] adj.可接受的 ​ 比较级: more acceptable 最高级: most acceptable 副词: accepably 反义 ​ 词: unacceptable ​ Trucks are acceptable because they perform a needed service. ​ 人们接受卡车,因为卡车为我们提供需要的服务。 ​ 【衍生词】accept [əkˈsept] vt.接受 ​ 过去式: accepted 过去分词: accepted 现在分词: accepting ​ 第三人称单数:accepts ​ Please accept our sincere apologies.请接受我们真诚的道歉。 accident [ˈæksɪdənt] n.事故,意外事件(特指事故,有造成人 ​ 的损伤,出发点可能是无意的) 复数:accidents ​ In1869, he died of an accident.1869年,他死于一场事故。 ​ 【衍生词】accidental [ˌæksɪˈdentl] adj.意外的,偶然的 ​ 副词: accidentally ​ Though plagiarism(剽窃) can be accidental，it’s sometimes done on pupose. ​ 虽然剽窃可能是由于偶然的巧合,但有时候就是有意而为之 ​ 【同义词】event [ɪˈvent] n.事件,大事,活动(常指重要的事情) ​ 复数:events ​ Red Nose Day( RND) is a well-known event in the UK. ​ 红鼻子节是英国一项著名的活动。 ​ incident’ [ˈɪnsɪdənt] n事件,事变(常指①小事件如同小插曲一 ​ 般;或②重大的恶性事件) 复数: incidents ​ And gradually this incident was forgotten.渐渐地,这事就被遗忘了。 according’ [ əˈkɔːrdɪŋ] adj.一致的,相符的 副词: accordingly ​ According to the Cycle News, many kinds of people enjoy motoreycling. ​ 据“Cyele News”报导,很多不同类型的人都喜欢骑摩托车。 ​ 【衍生词】accord [əˈkɔːrd] n.协议,条约;vi.一致,符合 ​ 过去式: accorded 过去分词: accorded 现在分词: according ​ 第三人称单数: accords ​ Most people are in accord with their desire for peace. ​ 在渴望和平这一点上,大多数人都是一致的。 ​ 【固定词组】 according to 根据,据……所说 achieve’ [əˈtʃiːv] vt.实现,取得 ​ 过去式:achieved 过去分词: achieved 现在分词: achieving ​ 第三人称单数:achieves ​ Have you ever heard of someone who achieves suceess without making any ​ mistakes before?你以前听说过,有,没犯过错误就取得成功的人吗? ​ 【衍生词】achievement [ əˈtʃiːvmənt ] n.成就(可数),完成(不可 ​ 数) 复数: achievements ​ They were proud of their children’s achievements. ​ 他们对孩子们的成绩感到自豪。 ​ That task is impossible of achievement那项任务不可能完成。 acquaintance [ əˈkweɪntəns ] n认识的人,熟人 ​ 复数: acquaintances ​ Be careful about meeting online acquaintances in person.见网友需谨慎。 act [ ækt ] vt.行动,表演 ​ 过去式:acted 过去分词: acted 现在分词:acting 第三人称单数:acts ​ They should think and act for themselves.他们应该独立思考和行动。 ​ 【衍生词】 action’ [ˈækʃn ] n.行动 复数: actions ​ For example, you can start with a small action. ​ 例如,你可以从一件小事开始 ​ activity [ ækˈtɪvəti ] n.活动 复数:activities ​ Physical activity can help people remain active and stay healthy. ​ 体育活动可以帮助人们保持活跃和健康。 ​ active [ ˈæktɪv ] adj.积极的,活跃的 ​ 比较级: more active 最高级: most active 副词: actively ​ actor [ ˈæktə(r) ] n.男演员 复数:actors ​ actress [’ ˈæktrəs ] n.女演员 复数:actresses actually’ [ ˈæktʃuəli ] adv.实际上,事实上 形容词:actual ​ There doctor found out that Robert was actually a woman. ​ 医生发现罗伯特实际上是个女人。 add [ æd ] vt.增加 ​ 过去式: added 过去分词: added 现在分词: adding 第三人称单数:adds ​ An enthusiastic audience can add even more energy to you. ​ 热情的观众可以给你注入更多能量。 ​ 【衍生词】 addition’ [ əˈdɪʃn ] n.增加 ​ In addition, they provide their customers with great discounts on products.此 ​ 外,他们会向客户提供产品的折扣价 ​ additional’ [ əˈdɪʃənl ] adj.额外的 副词:additionally ​ Ancient Greek schools featured a structure that had boys in school from the ​ age of six until fourteen and then an optional additional four years.古希腊学 ​ 校的特点是,","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:1","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 2 alter [ ˈɔːltə (r)] vt.\u0026vi.改变(常指轻微改变,强调在保持原状的情 ​ 况下进行局部改变) ​ 过去式: altered 过去分词: altered 现在分词: altering 第三人称单数:alters ​ You then need to analyze what has happened, alter your direction and move ​ on.然后,你需要分析发生了什么,调整你的方向并继续前进。 ​ 【同义词】 ​ change [ tʃeɪndʒ ] vt.\u0026vi.\u0026n.改变(普通用词,可指任何变化,强 ​ 调与原先的情况有明显的不同) ​ 过去式: changed 过去分词: changed 现在分词: changing ​ 第三人称单数: changes 复数:changes ​ I felt hopeless and helpless. I couldn’t change anything. ​ 我感到绝望和无助,什么也改变不了。 ​ Finishing early was welcome change.能早日结束是个可喜的变化。 ancient [ ˈeɪnʃənt ] adj古代的,古老的 ​ Ancient Greek civilization has greatly helped the building of today’s society. ​ 古希腊文明极大地促进了当今社会的建设。 address [ əˈdres ] n.地址 复数:addresses ​ He left his address and paid me.他留下了地址并支付了打车费。 airport [ ˈeəpɔːt ] n.机场 复数arports ​ “The Airport, please.”he said.他说“请去机场”。 almost [ ˈɔːlməʊst ] adv.将近,几乎 ​ People can get online almost anywhere.人们几乎在任何地方都可以上网。 alone [ əˈləʊn ] adv.单独地,独自地 ​ Turn the TV off in the evening and spend some time playing games alone or ​ with family member.晚上关掉电视,独自或和家人一起玩会游戏 among [ əˈmʌŋ ] prep.(表示位置)处在……中,(表示范围)在 ​ 之内 ​ Among them, about 55% are businessmen, 3% are in the professions and 9% ​ in government service.在他们之中,大约55%的人是商务人士,3%是专 ​ 人士,9%来自政府机构。 apartment [ əˈpɑːtmənt ] n.住房,公寓楼 复数: apartments ​ If a park were turned into an apartment building, what would happen to the ​ plants and animals there? ​ 如果将公园变成公寓楼,原有的植物和动物会发生什么呢? aside [ əˈsaɪd ] adv.在旁边,在一边 ​ set aside 搁置一旁,留出,拨出 ​ Set aside about 30 minutes a day when you can play games. ​ 每天留30分钟,来玩游戏。 ​ put aside 放在一边,撤开 ​ Put aside this question for moment.这个问题先撇开不谈。 ask [a:sk] vt.\u0026vi.问,询问;i要求,请求 ​ 过去式: asked 过去分词: asked 现在分词: asking 第三人称单数:asks ​ The more you ask of it, the more it can do. ​ 你要求的多,它能做到的也越多。 average [ ˈævərɪdʒ ] adj.平均的,平常的 ​ The average UK adult uses technology for cight hours and 41 minutes a day. ​ 英国成年人平均每天使用科技的时间是8小时41分钟。 across [ əˈkrɒs ] prep.遍及,在对面adv.横过,从一边…另一边 The kilt is clearly very famous across the world. ​ 这条短裙显然在世界各地都很有名。 ​ I’ s too wide. We can’t’ swim across.这太宽了,我们游不过去。 advantage [ad'‘vantid33] n.有利条件,益处 复数:advantages ​ 反义词: disadvantage ​ You shouldn’t worry about that as you may get a lot of advantages out of your ​ mistakes.你不必担心,因为你可以从错误中获益良多。 ​ 【固定词组】 ​ take advantage of 利用,占…便宜 ​ Stop trying to take advantage of me!别老想占我的占便宜。 ​ at advantage 于有利地位 at disadvantage 处于不利地位 ​ We were put at advantage( disadvantage)我们被置于有利(不利)的 ​ 地位。 amount [ əˈmaʊnt ] n.数量,总额金额 ​ great amount of ( huge amounts of) 大量的 ​ Nowadays computers can handle huge amounts of data. ​ 如今计算机能处理大量数据。 around [ əˈraʊnd ] prep.\u0026adv.围绕,在周围 ​ When look back now, I realize was a bit of an idiot to many people around ​ me.当我回首往事,我意识到,对周围的许多人来说,我有点像个白痴。 associate [ əˈsəʊsieɪt ] vt.联想,结交 ​ 过去式: associated 过去分词: associated 现在分词: associating 第三人称 ​ 单数: associates ​ People always associate Hangzhou with the West Lake. ​ 提起杭州,人们就联想到西湖。 ​ 【固定词组 associate with 与……交往,联系 ​ Homeschooling kids can choose who they associate with. ​ 家庭式教育的孩子可以自主选择交往的对象。 ​ 【衍生词】association [ əˌsəʊsiˈeɪʃn ] n.协会 ​ He wanted to join the teachers’association.他想加入教师协会。 afterward [ ˈɑːftəwəd ] adv.以后,过后 同:afterwards ​ For months afterward I would glance over at the garden while I played outside. ​ 几个月之后,每当在外面玩耍时,我都会扫一眼花园。 B **back** [ bæk ] n.背,背部;adj.后面的;adv.向后地 复数: backs ​ When I got my first essay back, my grade was terrible. ​ 当我拿回第一篇作文,我的成绩糟透了。 ​ 【衍生词】 background [ ˈbækɡraʊnd ] n.背景 复数: backgrounds ​ I did not have a common background with my friends because grew up in ​ Europe.因为在欧洲长大,我和朋友们没有一个共同的背景。 ​ backward [ ˈbækwəd ] adv.向后的(地),落后的 ​ 反义词: forward ​ It is still backward country.依然是一个落后的国家。 ​ backwards [ ˈbækwədz ] adv.向后地,倒退地 ​ 反义词:forwards ​ She looked hackwards and saw nothing.她向后瞧了一下,什么也没看见。 ​ 【固定词组】 back up 支持,后退 ​ You need more evidence to back up your opinion. ​ 你需要更多的证据去支持你的观点。 ​ The bus had to back up and turn around.汽车得往后退,再倒过来。 bad [ bæd ] adj.坏的,不好的 ​ 比较级: worse 最高级: worst 副词: badly ​ If something bad just happened to your friend, what","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:2","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 3 bridge [ brɪdʒ ] n.桥 复数: bridges ​ John Roebling planned to build the Brooklyn Bridge before. ​ 约翰·罗布林计划在1867年之前建造布鲁克林大桥。 boast [ bəʊst ] vt.自夸,自吹自擂 ​ 过去式: boasted 过去分词: boasted 现在分词: boasting 第三人称单 ​ 数:boasts ​ I don’t want to boast, but I can actually speak six languages. ​ 不是我吹嘘,我确实能讲六种语言。 bottle [ ˈbɒtl ] n.瓶子,一瓶(的量) 复数:bottles ​ Scotsmen do not put on their kilt just to buy a bottle of milk and a loed ​ hread at the local supermarket. ​ 苏格兰男人穿短裙,并不是只为了在当地超市买瓶牛奶或一条面包。 brother [ ˈbrʌðə(r) ] n.兄弟,同胞 复数:brothers ​ There they had my brother and me.他们在那儿有了我和我哥哥。 ​ 【衍生词】 brotherly [ ˈbrʌðəli ] adj.兄弟般的,情同手足的 ​ 副词: brotherly ​ They believed that helping others was their brotherly duty. ​ 他们坚信,帮助他人是他们兄弟般的责任。 ​ sisterI [ ˈsɪstə(r) ] n姐妹 复数:sisters ​ daughter [‘do:ta(r)] n.女儿 复数: daughters ​ son [ sʌn ] n.儿子 复数:sons ​ father [ ˈfɑːðə (r)] n.父亲 复数: fathers 简称:dad ​ mother [‘ˈmʌðə(r)] n.母亲 复数: mothers 简称:mum ​ grandfather [ ˈɡrænfɑːðə (r)] n.(外)祖父 复数: grandfathers ​ 简称: grandpa ​ grandmother [ ˈɡrænmʌðə (r)] n(外)祖母 复数:grandmothers ​ 简称:grandma ​ husband [ ˈhʌzbənd ] n.丈夫 复数: husbands ​ wife [ waɪf ] n.妻子 复数: wives ​ child [ tʃaɪld ] n.小孩 复数:children ​ kid [ kɪd ] n.\u003c口\u003e小孩 ​ 复数:kids ​ parent [ ˈpeərənt ] n.父亲(或母亲) ​ 复数: parents beach [ biːtʃ ] n.海滩 复数: beaches ​ On the country, homeschooling can move outdoors, to the beach or the zoo. ​ 在乡下,家庭式教育可以到户外去,比如海滩或者动物园。 ​ 备注: ​ country [ ˈkʌntri ] n.国家(复数: countries),乡下(单数名词) bell [ bel ] n.钟(声),铃(声) 复数: bells ​ Classmates. bells, and even cheerful decorations in school can make it hard ​ for some children to concentrate.学校里的同学,钟声,甚至是欢快的装饰 ​ 都会让一些孩子难以集中注意力。 box [ bɒks ] n.盒;vt\u0026vi拳击 复数:boxes ​ Mary carefully packed the fruit in box to keep them safe and dry.玛丽小心 ​ 翼翼地打包好盒子里的水果,保证它们的安全和干燥,以防破碎。 ​ 【衍生词】 boxing [ ˈbɒksɪŋ ] n.拳击(运动) ​ He is the world champion in boxing.他是世界拳击冠军。 big [ bɪɡ ] adj.大的,重大的 比较级:biger 最高级: biggest Brazil is a big country with many states and people. ​ 巴西是一个拥有许多州和人口的大国。 ​ Kilts are for special oceasions, such as weradings. funerals and other big and ​ important events.是用于特别场合的,如婚礼,葬礼和其他重大活动。 C **call** [ kɔːl ] vt.打电话给,喊叫;n.电话联络,喊叫 ​ 过去式: called 过去分词: called 现在分词:calling 第三人称单数:calls ​ 复数:calls ​ He was informed to call Dr. Plum for an interview. ​ 他被告知,打电话给普拉姆医生参加面试。 ​ Many people make telephone calls or surf the web while watching TV. ​ 许多人一边看电视一边打电话或上网。 ​ 【衍生词】so-called [ ˌsəʊ ˈkɔːld ] adj.所谓的,号称的 ​ In particular, the study notes that the so-called “cool\"behavior is a predut ​ of future problems with drugs and alcohol. ​ 这项研究特别指出,所谓“酷”的行为是对今后毒品和酒精问题的预警。 calm [ kɑːm ] adj.平静的;vt.使安静,使冷静 ​ 比较级: calmer 最高级: calmest 副词:calmly ​ 过去式: calmed 过去分词: calmed 现在分词: calming 第三人称单数:calms ​ In Switzerland, it’s pleasant, calm, and peaceful everynhere. ​ 瑞到处都是愉快、平静与和平的。 ​ Look, calm down! We’ll find her.喂,镇静一点!我们会找到她的。 ​ 【固定词组】 calm down或 cal sbth down(使)平静,镇静,安静 cancel [ ˈkænsl ] vt.取消 ​ 过去式:cancelled 过去分词: cancelled 现在分词: cancelling 第三人称单 ​ 数:cancels ​ A survey shows that you may not cancel your trip. ​ 民意调查表明,你可能不会取消你的旅行。 care [ keə (r)] n.照顾,小心;照顾,担心 ​ 过去式:cared 过去分词: cared 现在分词: caring 第三人称单数: cares ​ Thry also teach runners to set practieal goals and take care of their bodies. ​ 他们还教跑步者设定实际的目标并教他们照顾自己的身体。 ​ No one cares whether yoau can do it well or not, and you don’t need to care ​ ahout it either.没人在乎你做的好不好,你自己也无需在意。 ​ 【衍生词】careful [keafl] adj.仔细的,小心的 ​ 比较级: more careful 最高级: most careful 副词: carefully ​ So be careful with your play list if you want to recover faster。 ​ 如果你想(从分手阴影中)尽快恢复,请小心你的播放列表。 ​ 【固定词组】 take care of 照顾,照料 ​ I take care of them to the best of my abilities我尽我所能地照他们。 career [ kəˈrɪə(r)] n.职业,事业 复数: careers ​ Soon after she started her new career, the American revolution began. ​ 在她开始新的职业生涯后不久,美国革命开始了。 carry [ ˈkæri ] vt.携带,输送 ​ 过去式: carried 过去分词: carried 现在分词:carrying ​ 第三人称单数:carries ​ Fruit is part of a flowering plant and it carries the seeds. ​ 果实是开花植物的一部分且携带种子。 ​ 【固定词组】 ​ carry on 继续,进行 ​ Carry on with your work 接着干吧。 ​ carry out 执行,贯彻,进行到底 ​ I mys","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:3","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 4 conflict [ ˈkɒnflɪkt ] n.冲突 复数:conflicts ​ Being able to deal with a conflict and knowing how to bargain and reach ​ agreement can muake big difference to the outcome.能够处理冲突,知道如 ​ 何讨价还价并达成协议,这些可以对谈判结果起到很大的作用。 confront [ kənˈfrʌnt ] n.面对 ​ 过去式: confronted 过去分词: cfronted 现在分词: confronting ​ 第三人称单数:confronts ​ It is thrngh the peuin df onfronting and resolving that we learn. ​ 面对问题,解决问题的过程,使得我们不断学习。 consider [ kənˈsɪdə(r)] vt.\u0026vi.考虑,把(某人,某事)看作 ​ 过去式: cosidered 过去分词: considered 现在分词: considering 第三人称 ​ 单数:considers ​ Muay people consider it to an unofficial natioal holiday. ​ 许多人视它为非官方的国家假日 ​ 【衍生词】consideration [ kənˌsɪdəˈreɪʃn ] n.考虑(统称,不可数 ​ 具化,可数) 复数:considerations ​ Care and consideration shaould be given when you are looking for friends ​ the Intemet.网络交友要小心谨慎。 ​ Time is ancthet impostant consideration.时间是另一个需要考虑的重要 ​ 因素 ​ considerate [ kənˈsɪdərət ] adj.考虑周到的,为(他人)着想的 ​ 体贴的 ​ 比较级 more considernte 最高级: most considerate ​ 副词:considerately ​ You are a very considerate petsin.你是一个深思熟虑的人。 continue [ kənˈtɪnjuː ] vi.继续,持续 ​ 过去式 continued 过去分词continued 现在分词:continuing ​ 第三人称单数:continues ​ Then you continue your research.后继续你的研究。 control [ kənˈtrəʊl ] vt.控制:n控制(能力) ​ 过去式: controlled 过去分词: controlled 现在分词:controlling ​ 第三人称单数:controls ​ However, we must always remember that we can control our reactions. ​ 然而,我们必须时刻牢记,我们可以控制自己的反应。 ​ 【固定词组】 in control 在控制之下 ​ Some people forget that they are in eontrol.有些人忘记了局面由自己掌控。 inconvenient [ ˌɪnkənˈviːniənt ] adj.不方便的 ​ 副词: inconveniently ​ When he got through, it appeared thut even this was inconvenient for his ​ mother.当他接通电话,似乎他母亲有些不方便。 ​ 【衍生词】convenient [ kənˈviːniənt ] adj.方便的 ​ 比较级: more convenient 最高级: most convenient 副词:aconveniently ​ Please come whenever it is comvenient to you.方便的时候,请随时来。 ​ convenience [ kənˈviːniəns ] n.方便,便利 ​ They may use a credit card for emience. ​ 为了方便,他们可以使用信用卡。 conversation [ ˌkɒnvəˈseɪʃn ] n.交谈,会话 ​ 复数: conversations ​ He said we are moving away from face-to-face conversations beeause of ​ technology.他说,由于科技的原因,我们正在远离面对面的交淡。 correct [ kəˈrekt ] adj.正确的;vt.改正 ​ 副词: correctly 反义词: incorrect ​ 过去式: corrected 过去分词: corrected 现在分词:correcting ​ 第三人称单数:corrects ​ When it is used in the correet and proper way, it can help to promote career ​ or business.正确和恰当使用(英语),可以有效促进职业或事业的发展。 ​ I spent all evening correcting essays.我整个晚上都在批改论文。 courage [ ˈkʌrɪdʒ ] n.勇气,胆量 ​ Prblems call forth our courage and our wisdom. ​ 问题激发了我们的勇气和智慧。 create [ kriˈeɪt ] n.产生,创造 ​ 过去式: created 过去分词:created 现在分词: creating 第三人称单 ​ 数:creates ​ You’l be suirprised at the posifive cyele that creates. ​ 你会对创造的良性循环感到惊讶。 ​ 【衍生词】creative [ kriˈeɪtɪv ] adj.创造性的,有创造力的 ​ 比较级: more crative 最高级: creative 副词:creatively ​ Cooking is creative.富有创造性。 credit [ ˈkredɪt ] n.学分,信用 复数:credits ​ People also donate money by post, in banks, by phone using credit cand ​ and noline.人们还通过邮寄、银行、电话使用信用卡和在线的方式捐款。 criminal [ ˈkrɪmɪnl ] adj.犯罪的;n罪犯 ​ 副词:criminally 复数:criminals ​ They also had a 22 percent greater rate of criminal behavion. ​ 他们的犯攀率也提高了22%。 ​ A group of pamen attacked a prison und set free nine criminals. ​ 一伏持枪歹徒袭击了一所监狱,放走9名罪犯。 ​ 【衍生词】 ​ crime [ kraɪm ] n.犯罪(不可数),罪行(可数) 复数.crimes ​ The crime rate is rising.犯罪率正在上升。 ​ The massacre was a crime against humanity. ​ 这场大屠杀是一桩反人类的罪行。 criticize [ ˈkrɪtɪsaɪz ] vt.\u0026vi.批评 ​ 过去式:criticized 过去分词: criticized 现在分词:criticizing ​ 第三人称单数:criticizes ​ Insteud of cniticizing thea. I tend to notice their loveliness，curiosity and ​ hummor.我不再批评他们,面是倾向于关注他们可爱好奇和幽默的一面。 ​ 【衍生词】 critical [ ˈkrɪtɪkl ] adj.批评的,挑别的) ​ 比较级: more critical 最高级: most critica 副l词:critically ​ It is difficult enough to he critical of our men mistakes. ​ 对我们自己的错误采取批评的态度确实非常困难。 culture [ ˈkʌltʃə(r)] n.文化(统称,不可数;化,可数) ​ 复数:cultures ​ Thus, it can be an easy way to leamn languages and world cultures. ​ 因此,它是学习语言和世界文化的简单方法。 ​ There is juBt not enouigh fun and frivolity in culture today. ​ 当今的文化恰恰是不够轻松有趣。 curiosity [ ˌkjʊəriˈɒsəti ] n.好奇心 ​ Instead of criticizing them. I tend to notice their loveliness, cunasity","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:4","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 5 copy [ ˈkɒpi ] vt.\u0026vi.复制;n.复制,副本 ​ 过去式: copied 过去分词: copied 现在分词 copying 第三人称单数:copies ​ 复数: copies ​ You copy a paragraph and paste it into your report. ​ 你复制一个段落并粘贴到你的报告中。 ​ I sent copy to the minister for transport.我给交通部长发送了一份副本。 ​ 【衍生词】cut [ kʌt ] vt.\u0026vi.将(某物)切开,削减 ​ 过去式:cut 过去分词:cut 现在分词: cutting 第三人称单数:cuts ​ paste [ peɪst ] n.粘贴 ​ 过去式: pasted 过去分词: pasted 现在分词: pasting 第三人称单数: pastes ​ Cut, paste, and you are done.剪切,粘贴,你就完成了。 couple [ ˈkʌpl ] n.对,配偶 复数: couples ​ He managed to rustle up a couple of blankets. ​ 他很快想办法弄到了几张毯子。 ​ The couple had helped in the hunt for the toddlers. ​ 这对夫妇曾帮着搜寻那些幼童。 course [ kɔːs ] n.课程,航线 复数:courses ​ She is currently doing a business studies course at Lceds. ​ 她目前在利兹大学修读一门商科课程。 ​ 【固定短语】 of course当然 ​ Of course, in Scotland, you will often see the kilt. ​ 当然,在苏格兰,你会经常看到短裙。 crash [kra] n.碰撞 复数:crashes ​ Imagine waking up after dreaming about a terrible plane crash. ​ 想象一下,梦见一场可怕的空难后醒来的场景。 cow [kao] n.奶牛 复数:cows ​ When you hear the word “far you muay imagine the countrysde with coses ​ and crops.当听到“农场”这个词时,你可能会想到有奶牛和庄稼的 ​ 乡下。 cry [ kraɪ ] vi.\u0026vt.哭;n.哭 ​ 过去式:cried 过去分词:cried 现在分词: crying 第三人称单数:cries ​ Roaning along quiet streets, they wake sleeping families and make babiess cry. ​ 它们(摩托车)从安静的街道上咆哮而过,吵醒熟睡的家庭,引发婴儿的 ​ 哭泣。 ​ Adam jumped from his seat at the girl’s cry. ​ 女孩儿一哭,亚当立即从座位上跳了起来。 crop [krɒp] n.农作物,庄稼 复数: crops ​ When you hear the word “farm”, you may imagine the countryside with cows ​ and erops.当听到“农场”这个词时,你可能会想到有奶牛和庄稼的 ​ 乡下。 cooperate [ kəʊˈɒpəreɪt ] vi.合作,配合 ​ 过去式 cooperated 去分词: cooperated 现在分词: cooperating 第三人称 ​ 单数: cooperates ​ I am so happy to cooperate with you.很高兴与你合作。 ​ 【衍生词】cooperation [ kəʊˌɒpəˈreɪʃn ] n.合作,配合 ​ We would like to see closer cooperation between parents and schools. ​ 我们希望学生家长和学校有更加紧密的合作。 case [ keɪs ] n.具体情况,事例,实例 复数: cases ​ In this case, homeschooling offers fewer interruptions. ​ 在这种情况下,家庭式教育的干扰会少一些。 ​ 【固定词组】 in case 以防,以防万一 ​ Mary carefully packed the fruit in a box to keep them safe and dry in case one ​ got smashed.玛丽小心翼翼地打包好盒子里的水果,保证它们的安全和干 ​ 燥,以防破碎。 character [ ˈkærəktə(r)] n.(人、集体的品质、性格(单数名词), ​ 字符、字母(可复数) 复数: characters ​ Leaming to cooperate with others towards a common goal in sports is what ​ builds character frendship and important life skills for players. ​ 对运动员而言,在运动中学会为了共同的目标与他人合作,这会塑造他 ​ 们的品格,建立起友谊,并且这还是一种重要的生活技能。 closet [ ˈklɒzɪt ] n.壁橱 复数:closets ​ It sat on the counter for a year. but then it disappeared, probally into a ​ closet somewhere. 它被放在柜台上整整一年,但是之后就消失了,也许是 ​ 被放进了壁橱里的某个地方。 controversial [ ˌkɒntrəˈvɜːʃl ] adj.有争议的,引起争议的 ​ 副词: controversially ​ Even a short trip to the countryside is controversia in some places. ​ 在某些地方,即使只是短暂的乡村之旅也是存在争议的。 corporation [ ˌkɔːpəˈreɪʃn ] n.公司 复数: corporations ​ Factory farms, with other larger farm corporations, are becoming the norm ​ 和其他大型农场公司一样,工厂化农场正在成为常态。 cover [ ˈkʌvə(r)] vt.遮盖,掩蔽;n封面,掩护物 复数: covers 现在 ​ 分词: covering 过去式: covered 过去分词: covered 第三人称单数:overs ​ My brothers then covered them all with the freshly turned earth. ​ 然后我的兄弟们在上面盖上了新鲜的泥土。 ​ I saw book with red cover我看见了一本红色封面的书。 D **day** [ deɪ ] n.一天 复数:days ​ Set aside about 30 minutes a day when you can play games. ​ 每天留30分钟,来玩游戏。 ​ 【衍生词】daily [ ˈdeɪli ] adj.每日的 ​ People there are ahle to use the water resoures to meet their daily needs. ​ 那里的人们可以利用水资源来满足日常需要。 ​ daytime [ ˈdeɪtaɪm ] n.白天 ​ They may not be as active as people who work during the daytime. ​ 他们可能没有白天工作的人那么活跃。 damage [ ˈdæmɪdʒ ] vt.\u0026vi.损害,毁坏;n损害,损毁 ​ 过去式: damaged 过去分词: damaged 现在分词: damaging 第三人称单 ​ 数: damages ​ This can damage the dog’s teeth or injure the dog. ​ 这会损坏狗狗的牙齿或伤害到狗狗。 ​ The storm didn’t’ do much damage.暴风雨并未造成严重损失。 ​ 【衍生词】 ​ damaged [ ˈdæmɪdʒd ] adj.被坏的 反义词: undamaged ​ The damaged boat is still at the bottom of the ocean. ​ 被损坏的船仍然在海洋的底部。 ​ damaging [ ˈdæmɪdʒɪŋ ] adj.有破坏性的 ​ Lead is potentially damaging to children’s health. ​ 铅对儿童的健康具有潜在损害。 danger [ ˈdeɪndʒə(r) ] n.危险(不可数),危险的人,危险因素(可 ​ 数) 复数:dangers ​ Finally, contact local authorities if you feel you","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:5","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 6 drive [ draɪv ] vt.开车,驱动 ​ 过去式: drove 过去分词: drive n现在分词: driving 第三人称单数:drives ​ Finally, the high rate of unenoyzaent caused by these factors has tended to ​ drive wages down further. ​ 最终,这些因素造成的高失业率往往会进一步压低工资。 ​ 【衍生词】driver [ ˈdraɪvə(r) ] n.驾驶员 复数:drivers ​ Rublie, the son of a taxi driver, became doctor at Columbia Medical ​ Center.罗比,一个出租车司机的儿子,成为哥伦比亚医疗中心的一名医生。 duty [ ˈdjuːti ] n责任,义务(不可数,在道义或法律上应尽的本分,强 ​ 调自觉性);职责,工作(可数) 复数: duties ​ They believed that helping others was their brotherly duty. ​ 他们坚信,帮助他人是他们兄弟般的责任。 ​ His duties included sweeping the lawn.他的职责包括清理草坪。 ​ 【衍生词】 ​ responsibility [ rɪˌspɒnsəˈbɪləti ] n.责任,义务(①管控某人或 ​ 某事物的责任②对不良事件所负的责任或工作职责,强调对他人的责 ​ 任) (统称,不可数;具化,可数) 复数: responsibilities ​ This time , he was given more responsibility.这次,他被赋子了更多的责任。 degree [ dɪˈɡriː ] n. 学位,程度 复数:degrees ​ I’ve been told many people start college with one major, and graduate with a ​ degree in somneling totally different.有人告诉我,很多人是从一个专业开 ​ 始上大学,又以不同的专业的学位毕的业。 ​ 【衍生词】hachelor [ ˈbætʃələ(r) ] n.学士,单身汉 复数: bachelos ​ I have Bachelor of Ans degree.得文学学士学位。 ​ master [ ˈmɑːstə(r) ] n. 硕士,主人 复数: masters ​ doctor [ ˈdɒktə(r) ] n. 博士,医生 复数: doctors date [ deɪt ] n.日期约会(异性或恋人);vt\u0026vi与人约会 ​ 过去式:dated 过去分词: dated 现在分词: dating 第三人称单数: dates ​ 复数: dates ​ To do that, you’ll need to know the author. the title, and the date it was ​ puhlished.做到这一点,您需要知道作者、标题和出版日期。 ​ For a year I dated a woman who was a reseatch assistant. ​ 我曾与一位女研究助理约会了一年的时间。 ​ 【衍生词】 appointment [ əˈpɔɪntmənt ] n. 约定,约会(尤指工作上 ​ 的) 复数: appointments ​ She made an appointment for her son to sce the doctor. ​ 她为儿子约定了看医生的时间。 delicious [ dɪˈlɪʃəs ] adj. 美味的,可口的 ​ 比较级: more delicious 最高级: most delicious 副词: deliciously ​ The food is delicious.食物很美味。 deliver [ dɪˈlɪvə (r)] vt. 交付;vi. 传送 ​ 过去式: delivered 过去分词: delivered 现在分词: delivering 第三人称单 ​ 数:delivers ​ I have orders to deliver it to Mr. Demiris personally. ​ 我命要把它送给德米里斯先生本人。 ​ 【衍生词】delivery [ dɪˈlɪvəri ] n. 传送 ​ Allow 28 days for delivery.请留出28天送货时间。 diet [ ˈdaɪət ] n.日常饮食 复数: diets ​ go on diet 节食 ​ Some kids went on extreme diets, and ot hers even ate no food. ​ 有些孩子节食过度,甚至不吃东西。 digital [ ˈdɪdʒɪtl ] adj. 数字的,数码的 副词:digitally ​ Another finding was that people understand digital technology most when they ​ are 14 or 15. ​ 另一个发现表明,人在14或15岁时对数字技术的理解能力达到顶峰 。 dirty [ ˈdɜːti ] adj. 脏的,卑劣的 ​ 比较级: dirtier 最高级: dirtiest 副词:dirtily ​ Motoreyelists offen look dirty, in fact, they are dirty. ​ 摩托车手经常看起来很,其实他们就是很脏。 draw [ drɔː ] vt. \u0026vi. 吸引,绘画 ​ 过去式:drew 过去分词 drawn 现在分词: drawing 第三人称单数:draws ​ In onder to dniw more customers, they offered great discounts. ​ 为了吸引更多的顾客,他们提供了很大的折扣。 dream [ driːm ] vt. \u0026vi. 做梦,向往;n梦想,梦 ​ 过去式: dreamed 过去分词: dreamed 现在分词: dreaming 第三人称单数: ​ dreams 复数: dreams ​ Imagine waking up after dreaming about a terrible plane crash. ​ 想象一下,梦见一场可怕的空难后醒来的场景。 ​ The explanation of dreams is still an unclear area. ​ 梦的解析仍属于不明领域。 drop [ drɒp ] vt. \u0026vi. (使)落下;n. 滴 ​ 过去式: ropped 过去分词: dropped 现在分词: dropping 第三人称单数: ​ drops 复数: drops ​ So do animals when they eat fruit and drop the seeds. ​ 动物吃果肉、扔果核,也是(传播种子)。 ​ Add the cream a few drops at a time. ​ 每次加几滴奶油。 drug [ drʌɡ ] n. 药物,毒品 复数: drugs ​ They had a penenit greater rate of problere due to drugs and alcohol. ​ 由于吸毒和酒,他们的问题发生率提高了45%。 dance [ dɑːns ] vt. \u0026n. 跳舞 ​ 过去式: danced 过去分词: danced 现在分词: dancing 第三人称单数: ​ dances 复数:dances ​ It’s a temrible thing when nohody wants to dance with you. ​ 没有人想和你跳舞是一件很糟糕的事情 dark [ dɑːk ] adj. 黑暗的,深色的 ​ 比较级: darker 最高级: darkest 副词: darkly ​ For the sume reason, motoreyclists usually wear dark colors. ​ 出于同样的原因,摩托车手通常穿深色衣服。 deliberately [ dɪˈlɪbərətli ] adv. 故意地 ​ 形容词:deliberate ​ We encourage the human capacity to solve problems, just as in school we ​ deliberately set problems for our children to solve. ​ 我们鼓励人们提高解决问题的能力,就像在学校里,我们会故意给孩子 ​ 设置些问题,让他们去解决。 dialect [ ˈdaɪəlekt ] n. 方言 复数: dialects ​ There are multiple dialects and many types of foods. ​ 有多种方言和多类食物。 diner [ ˈdaɪnə(r) ] n. 用餐者 复数: diners ​ Tolay, diners have millions of choices. ​ 今天,","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:6","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 7 examine [ ɪɡˈzæmɪn ] vt. \u0026vi. 检查,考试 ​ 过去式: examined 过去分词: examined 现在分词:examining ​ 第三人称单数:esamines ​ Now let’s eurine what us do when it comes to listeruing to music. ​ 现在让我们来测试一下,我们大多数人在听音乐时都是怎么做的。 ​ 【衍生词】examination [ ɪɡˌzæmɪˈneɪʃn ] n. 检查,考试 ​ The esamuination is near at hand.考试临近了。 ​ exam [ ɪɡˈzæm ] n. 考试(偏口语,同 examination) 复数: exams excellent [ ˈeksələnt ] adj.优秀的,卓越的 副词: excellently ​ Thanks to the Intemet, it is now possible to get some excellent Black Friday ​ deals online.多亏了互联网,现在可以在线获得很好的黑色星期五优惠。 ​ 【衍生词】excellence [ ˈeksələns ] n. 优秀,卓越 ​ My performance is far below excellence.我的表演离优秀还差得远呢。 excited [ ɪkˈsaɪtɪd ] adj. 感到兴奋的 ​ 比较级 more excited 最高级: most excited 副词: excitedly ​ I feel exrited and at horne.我感到兴奋和自在。 ​ 【衍生词】exciting [ ɪkˈsaɪtɪŋ ] adj.令人兴奋的 ​ 比较级 more exciting 最高级: most exciting 副词: excitingly ​ Chooaing them wisely can make your life more exciting and inspiring ​ 明智地选择(朋友)可以让你的生活更加精彩和振奋。 ​ excite [ ɪkˈsaɪt ] vt. 使兴奋 ​ 过去式: excited 过去分词: excite d现在分词: exciting 第三人单 ​ 数: exeites ​ The good news excited everybody,这个好消息使每一个人都很兴奋。 exist [ ɪɡˈzɪst ] vi. 存在,生存 过去式: existed 过去分词: existed 现在分词: existing 第三人称单数: exists ​ Vertical fars don’t’ exist yet.垂直农业还不存在。 ​ 【衍生词】existent [ ɪɡˈzɪstənt ] adj.存在的,生存的 ​ The producer is no longer existent.制造者已经不在了。 ​ existence [ ɪɡˈzɪstəns ] n.存在(不可数),生活方式(可数) 复 ​ 数: existenees ​ I was unaware of his existence until today.直到今天我才知道有他这么 ​ 个人。 expect [ ɪkˈspekt ] vt.\u0026vi. 期望,预料 ​ 过去式: expected 过去分词: expected 现在分词: expecting 第三人称单 ​ 数: expects ​ You shouldn’t’ expect to.你不应该指望。 ​ 【衍生词】expected [ ɪkˈspektɪd ] adj.预期要发生的,期待中的 ​ 反义词: unexpected ​ It is expected that John will be back by ten. ​ 约翰在十点以前回来是预料中的事。 easy [ ˈiːzi ] adj.容易的,安心的 ​ 比较级: easier 最高级: easiest 副词: easily ​ The decline of the labor market is easy to misinterpret. ​ 劳动力市场的衰退很容易遭到误解。 ​ 【衍生词】uneasy [ ʌnˈiːzi ] adj. 心神不安的,不稳定的 ​ 副词: uneasily ​ When she sat in a room with several of us, there was sometimes an uneasy ​ silence.当她和我们几个坐在一个房间里,有时整体氛围会陷入不安的沉默 encourage [ ɪnˈkʌrɪdʒ ] vt. 鼓励,鼓动 ​ 过去式: encouraged 过去分词: encouraged 现在分词: encouraging 第三人 ​ 称单数: encourages 反义词: discourage ​ When language is used well, it can bring out very deep feelings in others, ​ and encourage others to take action. ​ 语言使用得当,能激发他人的情感,并且鼓励他们采取行动。 ​ 【衍生词】encouragement [ ɪnˈkʌrɪdʒmənt ] n. 鼓励,激励 ​ Her words were a great encouragement to them. ​ 她的话对他们是极大的鼓舞。 early [ ˈɜːli ] adj.早期的;adv.早,在初期 ​ 比较级: earlier 最高级:earliest ​ The study fourd that these kids tended to have probleme with areas ​ relationhips by their early20s.研究发现,这些孩子在20岁出头的时 ​ 会倾向于有药物和人际关系方面的问题。 ​ Some of those people did mental activities both early and late in life. ​ 其中有些人在生命的早期和后期都做过脑力锻炼。 enemy [ ˈenəmi ] n. 敌人,敌军 复数: enemies ​ They fail to realize that their worst enemy lies within themselres. ​ 他们没有意识到他们最大的敌人就是自己。 eventually [ ɪˈventʃuəli ] adv. 终究,终于 同义词: finally ​ You will eventually get there-unless you stop trying. ​ 你最终会成功的,除非你停止努力。 ​ 【衍生词】eventual [ ɪˈventʃuəl ] adj. (事件)最终发生的,结果的 ​ It is impossible to predict what the eventual outcome will be. ​ 无法预测最终结果。 exactly [ ɪɡˈzæktli ] adv. 确切地,精确地 ​ Human emotion is one of those factors that cannot be defined exactly. ​ 情绪是难以清晰定义的因素之一。 ​ 【衍生词】exact [ ɪɡˈzækt ] adj. 准确的,严密的 ​ 比较级: exacter/ more exact 最高级: exactest/ most exact ​ She gave an exact description of the attacker. ​ 她对袭击者的特征作了精确的描述。 exercise [ ˈeksəsaɪz ] vt. \u0026vi. 锻炼;n. 练习,运动,训练 ​ 过去式: exereised过去分词: exercised现在分词: exercising第三人称 ​ 数: texercises 复数: exercises ​ In addition, regular exereise can make your muscles and bones stronger. ​ 此外,定期锻炼可以使你的肌肉和骨骼更强壮。 ​ It can even help you to stay more focused in school beeause exercise helps you ​ to thiak more clearly. ​ 它甚至可以帮助你在学校更专注,因为运动有助于使你思维更清晰。 extraordinary [ ɪkˈstrɔːdnri ] adj. 非凡的,特别的 ​ 【衍生词】ordinary [ ˈɔːdnri ] adj. 普通的 ​ Onlinary people like looking at extraordinary people, even if they are only ​ statues.普通人喜欢看非凡的人,即使他们只是雕像。 either [ ˈaɪðə(r) ] pron. (两者之中)任何一个 ​ either…or… 要么要么……,或……或…….. ​ Well,they would either d","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:7","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 8 fellow [ ˈfeləʊ ] adj. 同伴的,同事的;n.同伴 复数fellows ​ They never suspected that their fellow soldier was a woman. ​ 他们从来没有怀疑过他们的战友是女人。 ​ He’s a nice old fellow.他这位老兄人不错。 field [ fiːld ] n.(学习或研究的)领域;n. 田 复数:fields ​ A team of researchers are entering a new field of studies. ​ 一组研究人员正在进入一个新的研究领域。 ​ We plon fields to grow crops.我们犁田耕地种庄稼。 ​ 【衍生词】area [ ˈeəriə ] n.领域,地区 复数:areas ​ The explanation of dreams is still an unclear area. ​ 对梦的解释仍属于不明领域。 ​ Areas that have rich water resources will naturally have more people. ​ 水资源丰富的地区自然会有更多的人口。 fight [ faɪt ] vt. \u0026vi. 战斗,斗争;n战斗(指一场战斗) ​ 过去式: fought 过去分词: fought 现在分词: fighting 第三人称单数: fights ​ It helps the body fight off illness.它能帮助身体抵御疾病。 ​ This was Hyer’s last fight, for no one else challenged him. ​ 这是海尔的最后一场比赛,因为再没有人向他发起挑战。 ​ 【衍生词】 fighting [ ˈfaɪtɪŋ ] n. 战斗(统称战斗) ​ The fighting broke out about two hours after sundown. ​ 日落后大约两小时战斗打响了。 figure [ ˈfɪɡə(r) ] n. 数字;vt. 推测,计算 ​ 过去式: figured 过去分词: figured 现在分词: figuring 第三人称单数: ​ figures 复数: figures ​ These figures would not surprise most people. ​ 这些数字不足以让大多数人感到惊讶。 ​ 【固定词组】 figure sb./sth.out 弄懂;弄清楚;弄明白 ​ We couldn’t figure ler out.我们摸不透她。 film [ fɪlm ] n. 电影 复数: films ​ He wrole the famous films Four Weddings and a Funeral and Noting Hill. ​ 他写了著名的电影《四个婚礼和一个葬礼》和《诺山》。 ​ 【衍生词】 movie [ ˈmuːvi ] n. 电影(同film) 复数movies ​ If a kid peefers to spend Saturday nights home watching a movie or reading ​ instesd of going out with friends, that is not cause for concem.如果一个孩子 ​ 星期六晚上喜欢在家看电影或看书,而不愿和朋友出去玩,不必顾虑。 ​ cinema [ ˈsɪnəmə ] n.电影院 复数:cinemas ​ I used to go to the cinema every week.我过去每周都去看电影。 ​ fit [ fɪt ] adj. 合适的,健壮的 比较级:fitter 最高级fittest ​ It can make you physically fit and healthy for life. ​ 它能使你身体良好,终身健康。 fix [ fɪks ] vt.固定,修理;n. 固定,(尤指简单、暂时的)解决方法 ​ 过去式: fixed 过去分词: fixed 现在分词: fixing 第三人称单数: fixes ​ 复数: fixes ​ It is fixed on the wall.它固定在墙上。 ​ Proper dog training is notquick fix”-it is an ongoing process ​ 恰当的犬只训练并非“一蹴而就”—它是一个持续的过程。 fleshy [ ˈfleʃi ] adj. 肉质的,多肉的 ​ There are two main types of fruit fleshy and dry. ​ 果实主要有两种:肉质的和干果。 flower [ ˈflaʊə(r) ] n.花 复数: flowers ​ When they close late in the afteroon, other flowers open. ​ 而它们在下午晚些时候不开放了,其他的花就会开。 ​ 【衍生词】 flowering [ ˈflaʊərɪŋ ] adj. 开花的,有花的 ​ Fruit is part of a flowering plant and it carries the seeds. ​ 果实是开花植物的一部分,它携带种子。 forest [ ˈfɒrɪst ] n. 森林 复数:forests ​ Desert people have many traditional and unique foods, which cannot be found ​ in the forest. ​ 沙漠的人有许多传统和独特的食物,这些食物在森林中是找不到的。 ​ 【衍生词】rainforest [ ˈreɪnfɒrɪst ] n. (热带)雨林(统称,不可数 ​ 具化,可数)复数: rainforests ​ The tropical rainforest is a very humid place. ​ 热带雨林是一个非常潮湿的地方。 form [ fɔːm ] vt. \u0026vi. 形成,构成;n. 表格,方式 ​ 过去式 formed 过去分词:formed 现在分词: forming 第三人称单数:forms ​ 复数: forms ​ A plan firmed in my head.一个计划在我的头脑中形成。 ​ These foms of comumication enable them to share ideas about themseles ​ and the world in almost real time.这些通信方式使他们能够实时分享关于 ​ 自身和世界的想法。 ​ 【衍生词】former [ ˈfɔːmə(r) ] adj. 以前的,从前的 ​ I’d head rumors from former students.我以前的学生那听过一些传闻。 fruit [ fruːt ] n.水果 复数:fruits/fruit ​ There are heo main types of fruit: fleshy and dry. ​ 果实主要有两种:肉质的和干果。 ​ 【衍生词】 vegetable [ ˈvedʒtəbl ] n. 蔬菜 复数:vegetables ​ Some vegetables are already grown in greenhouses. ​ 有些蔬菜已经被种植在温室。 ​ grain [ ɡreɪn ] n. 谷物 复数:grains ​ Beer comes fram grains and wine comes from grapes. ​ 啤酒来自谷物,葡萄酒来自葡萄。 future [ ˈfjuːtʃə(r) ] adj.将来的,未来的;n将来,未来(统称,不 ​ 数;具化,可数) 复数: futures ​ I am not the only one uncertain about future studie ​ 我不是唯一一个对未来学习迷茫的人。 ​ The farms of the future could be bailt in tall buuildings in some large cities. ​ 未来的农场将建在一些大城市的高楼里。 face [ feɪs ] n.面容,表面;vt. \u0026vi. 面对,正视 ​ 过去式: faced 过去分词: faced 现在分词: facing 第三人称单数: faces ​ 复数:faces ​ He suid we are moving away from face-to-face conversations because of ​ technology.他说,由于科技的原因,我们正在远离面对面的交谈。 ​ Frits and vegrtables grown indoors would not face serious threats from insects ​ bad weather.在室内种植的水果和蔬菜,无需面临昆虫和恶劣天气的 ​ 威胁。 fact [ fækt ] n事实 复数:facts ​ He didn’ deny the facts.他没有否认这些事实。 factory [ ˈfæktri ] n.工厂 复数: f","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:8","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 9 gentle [ˈdʒentl] adj.温和的,文雅的 ​ 比较级: gentler 最高级: gentlest 副词: gently ​ Bats are gentle and loving.蝙蝠是温和而慈爱的。 give [ɡɪv] vt. \u0026vi. 给与,赠送 ​ 过去式:gav e过去分词:given 现在分词: giving ​ 第三人称单数:gives ​ She would give us new “tools” and guide us through. ​ 她会教我们新的“工具”并指导我们通过。 ​ 【固定词组】 give up 放弃 ​ But you may have to give up much of your personal space. ​ 但是你可能不得不放弃许多私人空间。 globe [ɡləʊb] n.地球,世界(通常与定冠词 the 连用,指我们生活的 ​ 世界,尤用于强调范围之大) ​ They can establish friendships with people from around the globe. ​ 他们可以与来自世界各地的人建立友谊。 ​ 【衍生词】global [ˈɡləʊbl] adj. 全球的,全球性的 副词:globally ​ Global warming is real problem.全球变暖是个严重的问题。 ​ 【同义词】earth [ɜːθ] n. 地球,世界(人类居住的星球) ​ Natural resources are useful to people, and they come from the earth. ​ 自然资源对人类是有用的,而它们来自地球。 ​ world [wɜːld] n. 世界(通常与定冠词 the 连用,多指地球上的 ​ 世界,包含其中的国家、社会和人) 复数: worlds(通常用单数) ​ It is estimated that there are more than 8 million restaurants in the world ​ today.据估计,当今世界上有八百多万家餐馆。 glory [ˈɡlɔːri] n. 光荣,荣誉 ​ Ancient Greeks valued loyalty, glory, intelligence and hospitality. ​ 古希腊人重视忠诚、荣耀、智慧和好客之情。 good [ɡʊd] adj. 好的,优秀的;adv. 好;n. 好处,利益 ​ 比较级: better 最高级: best ​ And I resolved to list the good things in my lite. ​ 我决心把生活中美好的事情罗列出来。 ​ Physical activity also makes people look and feel good. ​ 体育运动也能让人看起来和感觉良好。 ​ Instead of seeing the faults in everyone, I see the good. ​ 我看到每一个人身上的优点而不是缺点。 ​ 【衍生词】goods [ɡʊdz] n.商品,货物 ​ They can also use the water to help them move goods to other areas. ​ 他们也可以用水来帮助自己把货物运到其他地方。 government [ˈɡʌvənmənt] n.政府 复数:governments(常用作 ​ 单数) ​ Among them, about 55% are businessmen, 3% are in the professions and 9% ​ in goverment service. ​ 其中,约55%的人是商务人士,3%是专业人,%的人来自政府机构。 greenhouse [ˈɡriːnhaʊs] n.温室 复数: greenhouses ​ Some vegetables are already grown in greenhouses. ​ 有些蔬菜已经种植在温室。 game [ɡeɪm] n. 游戏 复数: games ​ For many people, playing games is a way to have some fun. ​ 对许多人来说,玩游戏是一种获得乐趣的方式。 god [ɡɒd] n.上帝,造物主 复数:gods ​ They believed in loyalty to the family, the community and most importantly to ​ the gods.他们信仰对家庭、对社区,最重要的是对神的忠诚。 gradually [ˈɡrædʒuəli] adv.逐步地,渐渐地 形容词: gradual ​ And gradually this incident was forgotten.渐渐地,这件事被遗忘了。 great [ɡreɪt] adj. 伟大的,很好的,大量的 ​ 比较级: greater 最高级: greatest greatly ​ They had a 45 percent greater rate of problems due to drugs and alcohol. ​ 由于吸毒和酗酒,他们的问题发生率提高了45%。 group [ɡruːp] n组,团体 复数: groups ​ Start with smaller groups and get as much feedback as you can. ​ 从小批量的听众开始,尽可能多地获得反馈。 guy [ɡaɪ] n. 家伙,伙计 复数:guys ​ All my classmates admired my experience, and I quickly became well known ​ as“the French guy”. ​ 所有的同学都羡慕我的经历,我很快以“法国佬”而著称。 garden [ˈɡɑːdn] n.花园,公园 复数: gardens ​ When I was a boy we had several gardens around our old house. ​ 当我还是个孩子的时候,我们家的老房子周围有好几座花园。 ​ 【衍生词】 gardener [ˈɡɑːdnə(r)] n.园丁 ​ You’re good gardener,” he said.你是个好园丁,他说。 ​ ardening [ga:dn] n.园艺 ​ I have taken up gardening again.我又开始干起了园艺活。 glance [ɡlɑːns] vi.一瞥;n.一瞥 ​ For months afterward I would glance over at the garden while I played outside. ​ 几个月之后,每当在外面玩耍时,我都会扫一眼花园。 H **habit** [ˈhæbɪt] n.习惯 复数:habits ​ I started the habit of gratitude. ​ 我养成了感恩的习惯。 hand [hænd] n.手复数: hands ​ These are the muscles that we use to raise our hands, or ride our bicycles. ​ 这些就是我们抬手或骑车时用的肌肉。 ​ 【衍生词】handshake [ˈhændʃeɪk] n. 握手 ​ 复数: handshakes ​ Just handshake will do.握一下手就行。 ​ handmade [ˌhændˈmeɪd] adj. 手工的 ​ These handmade skirts are very expensive.这些手工制的裙子非常贵。 ​ gesture [ˈdʒestʃə(r)] n.手势 gestures ​ Use hand gestures.使用手势 happen [ˈhæpən] vi. 发生,出现(普通用词,多用于偶然事件) ​ 过去式: happened 过去分词: happened 现在分词: happening 第三人称单 ​ 数:happens ​ You then need to analyze what has happened, alter your direction and move ​ on.然后,你需要分析发生了什么,调整你的方向并继续前进。 ​ 【衍生词】happening [ˈhæpənɪŋ] n. 事件,意外发生的事 ​ 复数:happenings ​ There have been strange happenings here lately. ​ 这儿最近发生了一些怪事。 ​ 【同义词】occur [əˈkɜː(r)] vi发生,出现(通指偶然事件或计划 ​ 之事,与 happen通用) ​ 过去式: occurred 过去分词: occurred 现在分词: occurring 第三人称单 ​ 数:occurs ​ The earthquake occurred at dawn.地震发生在黎明时分。 ​ take place vi. 发生,举行(多用于事先计划好的事情) ​ 过去式: took place 过去分词: taken place 现在分词","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:9","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 10 include [ɪnˈkluːd] vt. 包括 ​ 过去式: included 过去分词: incuded 现在分词: including 第三人称单数: ​ includes反义词:eaclude ​ These prgraue alwnys incluce information or images of men in kilts. ​ 这些节目总是包括男子穿短裙的信息或形象。 ​ 【衍生词】including [ɪnˈkluːdɪŋ] prep. 包括,包含 ​ 反义词:excluding ​ Never give personal information including your name, age, whers ​ live, and the name of the school you attend. ​ 因此,远不要透露你的个人信息,包括姓名,年龄,住址以及学校名称。 individual [ˌɪndɪˈvɪdʒuəl] adj. 个人的,个体的;n. 个人,个体 ​ 副词:individually 复数: individuals ​ She has her own individual style of doing things. ​ 她有自己独特的行事风格。 ​ Sumetimes it’s juast circumstunces that bring two individuals together who then ​ friends.有时只是环境促使两个人在一起,成为朋友。 influence [ˈɪnfluəns] n. 影响(潜移默化地起作用) ​ 过去式: influenced 过去分词: influenced 现在分词: influencing 第三人称 ​ 单数: influences 复数: influences ​ The emlmatinn of drrams in still an unclear area. ​ 梦的解析仍属于不明领域。 ​ Van Gogh had a marjur influence on the development of modem painting. ​ 梵 · 高对现代绘画的发展有着重大影响。 ​ 【同义词】 ​ affect [əˈfekt] vt. 影响(通常物做主语,产生消极作用) ​ 过去式: affected 过去分词: affected 现在分词: affecting 第三人称单 ​ 数: affects ​ Drean affeet the way people live and work. ​ 梦境影响了人们的生活和工作方式。 ​ inform [ɪnˈfɔːm] vt.\u0026vi. 通知 ​ 过去式: informed 过去分词: informed 现在分词: inforning 第三人称单 ​ 数:informs ​ He was informed to call Dr. Plum for an interview. ​ 他被告知,打电话给普拉姆医生参加面试。 ​ 【衍生词】 ​ information [ˌɪnfəˈmeɪʃn] n. 消息,信息 ​ To be on the sale side, always make it cleat whem the informarion ​ from.为了安全起见,一定要弄清楚资料的来源。 injure [ˈɪndʒə(r)] vt. 伤害(名誉、自尊、感情等) ​ 过去式: injured 过去分词: injured 现在分词: injuring 第三人称单 ​ 数:injures ​ This can damage the dog’s teeth or injure the dog. ​ 这会损坏狗的牙齿或弄伤狗。 ​ 【衍生词】 ​ injured [ˈɪndʒəd] adv.受伤的 ​ In 1872, Washington was injured in building the bridge. ​ 1872年,华盛顿在建造这座桥时受了伤。 ​ injury [ˈɪndʒəri] n. 伤害(对躯壳的伤害,可数;对感情的伤害,不 ​ 可数 )复数: injuries ​ Dog training is never without risk of injury especially with more aggressive ​ dogs.犬只训练不乏受伤的危险,特别是面对更有攻击性的狗。 insist [ɪnˈsɪst] vt. \u0026vi. 坚持,强调 ​ 过去式: insisted 过去分词: insisted 现在分词: insisting 第三人称单 ​ 数:insists ​ She always insisted on finding her way around the school by herself. ​ 她坚持一个人在学校里找路。 ​ 【衍生词】insistent [ɪnˈsɪstənt] adj. 坚持的,引人注意的 ​ 复数:insistently ​ My insistent things, will not change.我所坚持的,我不会改变。 instantly [ˈɪnstəntli] adv.立即,马上 ​ 形容词: instant ​ The boy was instantly disappointed and said he had only been given $20. ​ 男孩立即感到很失望,他只有20美元。 instruct [ɪnˈstrʌkt] vt. 指导,命令 ​ 过去式: instructed 过去分词: instructed 现在分词 instruicting 第三人单 ​ 数:instructs ​ She met with officials, discussed with other engineers, and instrudted ​ workers.她会见官员,与其他工程师进行讨论并指导工人们。 ​ 【衍生词】 ​ instruction [ɪnˈstrʌkʃn] n. 指令,命令 复数: instructions ​ She gave Washington’s instructions to the workers. ​ 她向工人们下达了华盛顿的指示。 intelligence [ɪnˈtelɪdʒəns] n. 智力,情报 ​ There are many other kinds of intelligence.还有许多其他智力类型。 ​ 【衍生词】intelligent [ɪnˈtelɪdʒənt] adj. 聪明的,理解力强的 ​ 比较级: mote intelligent 最高级: most intelligent 副词: intelligently ​ The student gave an intelligent answer.这个学生给出了一个聪明的回答。 interest [ˈɪntrəst] vt. 使产生兴趣;n.兴趣利息(不可数);业余爱好 ​ (可数) ​ 过去式:interested 过去分词: interested 现在分词: interesting ​ 第三人称单数: interests 复数: interests ​ You go threugh the channels several times and find that once again therek ​ nuthing on TV that interests you. ​ 你换过好几次台,发现没什么能吸引你的东西。 ​ When live in a doritory, you can meet many people with diffetet ​ interests.当你住在宿舍,你会遇见很多兴趣各不相同的人。 ​ 【衍生词】interested [ˈɪntrəstɪd] adj. 感到有兴趣的 ​ 比较级: more interested 最高级:most interested ​ I was not interested in miny things my classmates did, and it was hard for me4 ​ to connect with them. ​ 我对同学们做的很多事情都不感兴趣,很难融他们。 ​ interesting [ˈɪntrəstɪŋ] adj. 令人感兴趣的 ​ 比较级: more interesting 最高级: most interesting ​ I make living and meet interesting peopl sometimes. ​ 我谋生计,有时也会遇到有趣的人。 internal [ɪnˈtɜːnl] adj. 内部的 副词:intemally ​ Their internal clocks don’t seem to work correctly. ​ 他们的内部时钟似乎就不能正常工作了。 ​ 【衍生词】 ​ external [ɪkˈstɜːnl] adj.外部的 副词:extemally ​ All his injuries are external.他受的伤都是外伤。 interview [ˈɪntəvjuː] n.面试,采访;vt.\u0026vi.面试;vt.采访 ​ 复数: interviews 过去式: interviewed ","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:10","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 11 lecture [ˈlektʃə(r)] n.演讲,讲座(正式,尤其强调学术性的) 复 ​ 数:lectures ​ She taught in school and gave lectures about her time in the armyt ​ tretirement.她在学校教书,讲授自己的军队经历直至退休。 ​ 【衍生词】 ​ speech [spiːtʃ] n. 演讲,发言(非正式,口头、即时发言) ​ 复数: speeches ​ She gave speech in defense of her hushand. ​ 为了捍卫她的丈夫,她发表了演讲。 lie [laɪ] vt.\u0026vi. 说谎;n谎言,谎话 ​ 过去式:lay/lied 过去分lain/lied 现在分词: lying 第三人称单数:lies ​ 复数:lies ​ The power of positive thinking lies in belief.正面思考的力量在于信念。 ​ It is peoluable that you have never taken a chance on trying anything new,or ​ else you are Iying. ​ 很可能是你从来没有机会尝试一些新东西,否则你就是在撒谎。 ​ We buth knaw that’s’ big lie.我们都知道这是个大谎话。 ​ 【衍生词】 ​ liar [ˈlaɪə(r)] n.说谎者 复数:liars ​ I could ferl “liar” written all over my face. ​ 我能感觉到我满脸写着“骗子“。 lift [lɪft] vt. \u0026vi. 举起,抬起;n.电梯(英式) ​ 过去式:lifted 去分词:lifted 现在分词: lifting 第三人称单数lifts ​ 复数: lifts ​ The first song will lift your mond a little. ​ 第一首歌会让你感到心情有所振奋。 ​ They took the lift to the fourth floor.他们坐电梯到了四楼。 local [ˈləʊkl] adj. 当地的;n本地居民 ​ 副词: locally 复数: locals ​ People also upload videos of loeal charity events onto the Internet. ​ 人们还会将本地慈善活动的视频上传到互联网上。 ​ The locals are very friendly,当地人很友好。 lose [luːz] vt. \u0026 vi. 失去;损失 ​ 过去式:lost 过去分词:lost 现在分词: losing 第三人称单数:loses ​ They fear that they will lose their money and belongings or be under a lot of ​ stress.他们担心自己会失去金钱和财物,或者承受很大的压力。 ​ 【衍生词】loss [lɒs] n.损失(不可数),亏损(可数) 复数:losses ​ They experience failure and loss and let their emotions rule their decisions. ​ 他们经历了失败和失去,任由情绪主宰自己的决定。 ​ We are now operating at loss.我们现在是亏本经营。 ​ loser [ˈluːzə(r)] n.失败者,受损失者 复数: loscrs ​ He’s born laser他生来就是个失败者。 ​ lost [lɒst] adj. 丢失的,迷路的 ​ I’m still looking for that lost file.我还在找那份丢失的档案。 loyalty [ˈlɔɪəlti] n.忠心,忠诚 ​ Keeping faith through the tests was a sign of loyalty and belief. ​ 在考验中,始终保持信任是忠诚和信念的标志。 ​ 【衍生词】 ​ loyal [ˈlɔɪəl] adj. 忠贞的,忠诚的 ​ 比较级: more loyal 最高级: most loyal 副词: loyally ​ He’d always been such a loyal friend to us all. ​ 他一直是我们大家忠实的朋友。 live [lɪv] vi. 居住,生存 ​ 过去式 lived 过去分词:lived 现在分词: living 第三人称单数: lives ​ I did not tell everyone that I lived in Europe. ​ 我没有告诉大家我在欧洲生活过。 ​ 【衍生词】 alive [əˈlaɪv] adj.活着的;活泼的 ​ Fnuits are source of substances that keep us alive and healthy. ​ 水果是维持生命健康的物质来源。 labor [ˈleɪbə(r)] adj.劳工的;n. 劳动,劳工 ​ The decline of the labor market is easy to misinterpret. ​ 劳动力市场的衰退是很容易遭到误解。 ​ Land, labor and capital are all productive of wealth. ​ 土地、劳动和资本都能创造财富。 lazy [ˈleɪzi] adj. 懒的,无精打采的 比较级: lazie r最高级 laziest 副词: lazily ​ That’ s just being laay.只是懒情而已。 list [lɪst] n.清单,目录;列出 复数: lists 过去式: listed 过去分词: ​ listed 现在分词: listing 第三人称单数:lists ​ I strongly recommend dividing your play list into different small lists. ​ 我强烈建议你把总播放列表分成不同的小歌单。 ​ And I resolved to list the good things in my life. ​ 我决心把生活中美好的事情罗列出来。 listen [ˈlɪsn] vi. 倾听 ​ 过去式: listened 过去分词: listened 现在分词 listening 第三人称单 ​ 数:listens ​ I still listened to classical music, but I just kept my music to myself. ​ 我仍然听古典音乐,但只有我自己知道。 ​ 【衍生词】 ​ listener [ˈlɪsənə(r)] n.听众,倾听者 复数: listeners ​ All the benefits of music can only be got if the listener enjoys the music he is ​ listening to.只有当听者喜欢他正在听的音乐时,人们才可以获得音乐带 ​ 来的一切好处。 land [lænd] n.土地,陆地(统称,不可数;具化,可数) 复数:lands ​ Land, labor and eapital are all productive of wealth. ​ 土地、劳动和资本都能创造财富。 ​ America is the land of freedom and opportunity. ​ 美国是一个拥有自由与机遇的国度。 language [ˈlæŋɡwɪdʒ] n.语言(统称,不可数;具化,可数) ​ 复数:languages ​ Language very powerful tool.语是强有力的工具。 ​ All the children must learn a foreign language. ​ 所有的儿童必须学一门外语。 little [ˈlɪtl] adj. 小的 ​ 比较级:less 最高级: least 副词:little ​ On the road, there is little to protect them from mud. ​ 在路上,他们几乎没有防泥的措施。 ​ 【固定词组】 at least 至少 ​ Ii’ll cost at least 500 dollars.这东西至少要花500元。 lesson [ˈlesn] n.课,一堂课 复数: lessons ​ In the evening. she had the boys talk about their lessons with her. ​ 晚上,她会让孩子们跟她聊聊他们的功课。 letter [ˈletə(r)] n.信 复数letters ​ Two weeks later, when I arrived home from work, Robbie handed me a letter. ​ 两周后,我下班到家,罗比递给我一封信。 level [ˈlevl] n.水平,水准 复数: levels ​ Most games offer several different levels. ​ 大多数的","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:11","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 12 material [material] n.素材,材料 复数: materials ​ Be familiar with your speech materials.熟悉你的演讲材料。 matter [ˈmætə(r)] vt. 要紧,有重大影响; n.事件,问题 ​ 过去式: mattered 过去分词: mattered 现在分词: mattering 第三人称单数: ​ matters 复数: matters ​ Everything you do in elass matter.你在课堂上做的一切都很重要。 ​ As a matter of fact, every time we write our name, we use the 20 differem ​ museles in our hand.事实上,每次我们写名字的时候,都会用到手中 20 ​ 块不同的肌肉。 mental [ˈmentl] adj.精神的,心理的 副词: mentally ​ It is a great way to keep your mental health in check. ​ 这是保持心理健康的一种很好的方式。 ​ 【衍生词】 physical [ˈfɪzɪkl] adj. 身体的 副词: physically ​ Physical activity can help people remain active and stay healthy. ​ 体育运动可以帮助人们保持活力和健康。 menu [ˈmenjuː] n.菜单 复数: menus ​ In fact, there were no menus anywhere.事实上,任何地方都没有菜单 miracle [ˈmɪrəkl] n. 奇迹,令人惊奇的人(或事) 复数: miracles ​ Then I looked up at the sky and thought what a miracle life is. ​ 然后,我抬头仰望天空,心想,生命是多么的神奇 misery [ˈmɪzəri] n. 痛苦(不可数),不幸的事,痛苦的事(可数) ​ 复数: miseries ​ Fame brought her nothing but misery.名声只给她带来了痛苦。 ​ However, if you take no steps to make this experience positive, dormitory ​ can become misery.然而,如果你不采取措施让宿舍生活变得积极, ​ 可能会成为一件痛苦的事 modesty [ˈmɒdəsti] n.谦虚,谦逊 ​ The treatment is to stop being so mean aund get a little modesty. ​ 解决方法是别再那么刻薄,谦虚点。 mud [mʌd] n.泥,泥淖 ​ On the road, there is little to proteet them fromn mud. ​ 在路上,他们几乎没有防泥的措施 music [ˈmjuːzɪk] n. 音乐 ​ I still listened to classical music, but I just kept my music to myself. ​ 我仍然听古典音乐,但只有我自己知道。 ​ 【衍生词】 musical [ˈmjuːzɪkl] adj. 音乐的 ​ Musical intelligence is the ability to recognize rhythm and tone. ​ 音乐智力是一种识别节奏和语调的能力。 multiple [ˈmʌltɪpl] adj. 多重的,多个的 ​ There are multiple dialects and many types of foods. ​ 有多种方言和多类食物。 myth [mɪθ] n.神话;荒诞的说法 复数: myths ​ There is more about the myths of Scottish “skirts’. ​ 关于苏格兰“裙子”的谬见还有很多。 make [meɪk] vt. 做,制造,使产生 ​ 过去式:made 现在分词: making 过去分词:made 第三人称单数: makes ​ EQ helps us build strong relationships, make good decisions, and deal with ​ difficult situations. ​ 情商帮助我们建立牢固的人际关系,做出正确的决定,处理困境。 marathon [ˈmærəθən] n.\u003c体\u003e马拉松赛跑 复数: marathons ​ Most of the runners in the London Marathon are raising muney for charity. ​ 大多数人参加伦敦马拉松赛跑是为慈善事业募集资金。 meal [miːl] n.餐 复数:meals ​ The rich could also eat meals supplied by private cooks. ​ 富人可以吃私人厨师提供的饭菜。 meanwhile [ˈmiːnwaɪl] adv. 同时,其间 ​ Meanwhile, you will have to give up muiny things as well. ​ 同时,你也要放弃很多东西。 message [ˈmesɪdʒ] n.信息,消息 复数: messages ​ Don’t listen to songs with negative words or messages. ​ 不要听带有负面字眼或负面信息的歌曲。 middle [ˈmɪdl] adj.中部的 ​ A new study shows that gentle and quiet kids in middle school will ​ rule.新的研究表明,温和安静的中学生将成长为管理者。 milk [mɪlk] n.牛奶 ​ Scotsmen do not put on their kilt just to buy a bottle of milk and a loal ​ bread nt the local supermarket. ​ 苏格兰男人穿短裙,并不是只为了在当地超市买瓶牛奶或一条面包。 million [ˈmɪljən] n.百万 ​ Today, diners have millions of choices. ​ 今天,用餐者们有数百万种选择。 mind [maɪnd] n.精神,决心,见解;vt.\u0026vi.注意,介意 复数:minds ​ 过去式: minded 过去分词: minded 现在分词: minding 第三人称单 ​ 数:minds ​ Even without that apology, make up your mind to forgive, forget, a ​ eventually let go.即使对方没道歉你也要下决心原谅、忘记最终放手。 ​ I do not mind, just as you like.我不在乎,就随你了。 misinterpret [ˌmɪsɪnˈtɜːprət] vt. 误解,曲解 ​ 过去式: muisinterpreted 过去分词: misintepreted 现在分词: misinterpreting ​ 第三人称单数: misinterprets ​ The declitir of the laber market is easy to misinterpret. ​ 劳动力市场的衰退很容易遭到误解。 mobile [ˈməʊbaɪl] n.手机;adj. 可移动的 复数: mobiles ​ People in Brituin now spend more time watching TV. gming,ndu sing- their ​ mobile phones and computers than slerepi.国人现在花更多的时间看电 ​ 现玩游戏,使用手机和电脑,而不是睡觉。 ​ As manufacturing technologirs have become more mobile, production jols ​ have moved from the U.S. to countries where wagrs are low.随着制造技术更 ​ 具流动性,生产类工作已经从美国转移到工资较低的国家。 money [ˈmʌni] n. 钱 ​ Many schonls take part in the money raising events on Red Nose Day. ​ 许多学校参加红鼻子日的捐活动。 month [mʌnθ] n.月,月份 复数: months ​ Other thythms are based on months, scasons or years. ​ 其他节律是基于月份、季节或年份的。 N **narrow** [ˈnærəʊ] adj. 狭窄的,狭溢的;vt. 限制,使变窄 ​ 比较: narronwer 最高级: narrowest 副词: narrowly 过去式: narrowed 过去 ​ 分词: narrowed","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:12","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 13 officer [ˈɒfɪsə(r)] n.官,事 复数: officers ​ The admission officer asked us introdluce ourselves briefly. ​ 招生让我们简单介绍一下自己。 ​ 【衍生词】 unofficial [ˌʌnəˈfɪʃl] adj. 非官方的,非正式的 ​ 副词: unofficially 反义词:official ​ Many people consider it to be an unofficial national holiday. ​ 许多人视它为非官方的国家假日。 ​ office [ˈɒfɪs] n.办公室 复数: offices ​ Come into my office.请到我的办公室里来。 opposite [ˈɒpəzɪt] n.对立面,相反的人事物;adj. 对面的,对立的 ​ 复数: opposites 副词:opposite ​ You may choose them berause you are opposites of each other and find this ​ intereting.可能出于好玩面选择个性截然不同的人做朋友。 ​ Answers are given on the opposite page.答案在对页上。 ​ 【衍生词】oppose [ əˈpəʊz] vt.\u0026vi.抵制,反对 ​ 过去式: opposed 过去分词: opposed 现在分词: opposing 第三人称单 ​ 数:opposes ​ The local residents bitterly opposed the scheme. ​ 当地居民强烈反对这个计划。 optional [ˈɒpʃənl] adj. 可选择的 ​ Ancient Greek schools featured a structure that had boys in school from the ​ age of six until fourteen and then an optional additional four years. ​ 古希腊学校的特点是,男子从六岁到十四岁在学校学习,之后四年选修。 ​ 【衍生词】option [ˈɒpʃn] n.选项,选择权 复数: options ​ As see it, we have two options.据我看,我们有两种选择。 organized [ˈɔːɡənaɪzd] adj.有组织的,有条理的 ​ 反义词: unorganized ​ People there are very different from Brazilans: they are wehy, independent, ​ and organized. ​ 那里的人和巴西人有很大的不同:他们富有,独立,做事有条理。 ​ 【衍生词】organize [ˈɔːɡənaɪz] vt. 组织,安排 ​ 过去式: organized 过去分词: organized 现在分词 organizing 第三人称单 ​ 数:organizes ​ I will oxganize transport.我来安排交通。 ​ organizer [ˈɔːɡənaɪzə(r)] n.组织者 复数: organizers ​ He is god organizer.他是一个很好的组织者。 ​ organization [ˌɔːɡənaɪˈzeɪʃn] n. 组织 复数: organizations ​ They may apply to join the organization.他们可以申请加入该组织。 own [əʊn] adj.自己的;拥有 ​ 过去式: owned 过去式: owned 现在分词: owning 第三人称单数:owns ​ Being awre of emotions helps us manage our own emotions. ​ 意识到情绪有助于我们管理自己的情绪。 ​ His father owns loeal pub.他父亲在当地有一家酒馆。 ​ 【衍生词】owner [ˈəʊnə(r)] n.物主 复数:owners ​ Dog training also involves teaching the owner. ​ 大只训练也包括对主人的训练。 ​ ownership [ˈəʊnəʃɪp] n.所有权 ​ The restaurant is under new ownership.这个餐厅已换了新的东家。 overcome [ˌəʊvəˈkʌm] vt.\u0026vi战胜,克服 ​ 过去式: overeame 过去分词: overcome 现在分词: overcoming 第三人称单 ​ 数: overcomes ​ They only need to overcome their fears in onder to truly succeed in life. ​ 他们只需要克服自己的恐惧就能获得真正的成功。 owe [əʊ] vt. 归功于,欠债 ​ 过去式:owed 过去分词:owed 现在分词: owing 第三人称单数:owes ​ I owe him all my success in baseball and in my life. ​ 我在棒球和生活中的成功都归功于他。 ​ You don’t owe me. I don’t owe you. We’re even. ​ 你不欠我,我也不欠你,我们扯平了。 order [ˈɔːdə(r)] n.秩序,命令;命令:订购 复数: orders 过去式: ​ ordered 过去分词: ordered 现在分词: ordering 第三人称单数: orders ​ in oder to 目的是,为了 ​ In order to succeed you must fail, so that you know what to do the next time. ​ 为了成功,你必须失败,这样你才知道下次该怎么做。 ​ Sit down und be quiet,she oreered坐下,安静点!”她命令道。 ​ 【衍生词】 disorder [dɪsˈɔːdə(r)] n.混乱,(身心机能的)失调 ​ 复数:disonders ​ So eating disorders were caused如此造成饮食失调。 obscure [əbˈskjʊə(r)] adj. 无名的,鲜为人知的 ​ 副词: obscurely 同义词: unknown ​ She was searching for some ohscure major.她在找一些不起眼的专业。 obviously [ˈɒbviəsli] adv.明显地 形容词: obvious ​ This is obviottsly not cheap.这显然不便宜。 open [ˈəʊpən] vt.\u0026vi.(打)开;vt.开放开张营业;adj.敞开的,公开的 ​ 过去式: opened 过去分opened 现在分词: opening 第三人称单数opens ​ On thia day most retail stores open their doors very early -some as early as ​ am.在这一天,大多数零售店很早就开门有些早在4点就开门了。 ​ More “restaurants” opened up in France.更多的“餐馆”在法国开业。 ​ He was breathing through his open mouth.他张着嘴呼吸。 opportunity [ˌɒpəˈtjuːnəti] n.机会 复数: opportunities ​ Those who are already working have the opportunity to see what they can and ​ cannot do effectively in English in their current job.对于在职人员而言,信 ​ 们有机会通过目前的工作有效地看出英语的实用性。 onigin [ˈɒrɪdʒɪn] n.出身,起源 复数:onging ​ While peuple have heand of Black Friday most do not know its origins. ​ 虽然人们听说过黑色星期五,但大多数人不知道它的起源。 ​ 【衍生词】 original [əˈrɪdʒənl] adj.原始的,原创的 ​ 副词:ariginally ​ I think you should go back to your original plan. ​ 我认为你应该回头执行你原来的计划。 outcome [ˈaʊtkʌm] n.结果,成果 复数:outcomes ​ Bing uble to deal with conflict and knowing how to bargain and reach an ​ aprement can make big difference to the outcome.能够处理冲突,知道如 ​ 何讨价还价并达成协议,这些可以对谈判结果起到很大的作用。 old [əʊld] adj.(年龄、资历)老的 ​ 比较级: older 最高级:","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:13","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 14 predict [prɪˈdɪkt] n.预言,预测 ​ 过去式: predicted 过去分词: predicted 现在分词: predicting 第三人单 ​ 数: predicts ​ It can help prediet how well someone may do academically. ​ (IQ)可以预测一个人在学术上的发展。 ​ 【衍生词】 predictor [prɪˈdɪktə] n.预言者,预报器 ​ 复数: predictors ​ The study notes that the so-called “cool” behavior is a predictor of futues ​ problems with drugs and alcohol ​ 这项研究特别指出,所谓“酷”的行为是对今后毒品和酒精问题的预警 prefer [prɪˈfɜː(r)] vt. 更喜欢,偏爱 ​ 过去式: preferred过去分: preferred现在分词: preferring第三人称 ​ 数:prefers ​ Some plants like warm, sunny weather, but other plants prefer ​ temperatures ​ 有些植物喜欢温暖,阳光充足的天气,但其他植物更喜欢较凉爽的温度 prepare [prɪˈpeə] vt. \u0026vi. 准备,预备 ​ 过去式 prepared 过去分词: prepared 现在分词: preparing 第三人称单 ​ 数:prepares ​ The college prepares students for a career in business. ​ 这个学院是培养商务人才的 ​ 【衍生词】prepared [prɪˈpeəd] adj. 事先准备好的 ​ 反义词:unprepared ​ Dog training is a very physical activity, be prepared to be tired. ​ 犬只训练是个十足的体力活,所以要做好受累的准备。 ​ preparation [ˌprepəˈreɪʃn] n.准备 复数 preparations ​ The country is making prepanations for war这个国家正在进行备战。 presence [ˈprezns] n. 在场,出席 ​ We thought she might resent our acting cheerful and thoughtless in her ​ presence. ​ 我们以为,她会讨厌我们在她面前表现得过于欢快和轻率。 ​ 【衍生词】 present [ˈpreznt ] adj. 当前的 ​ I am cntent to stay in my present job.我对现在的工作心满意足。 ​ presentation [ˌpreznˈteɪʃn] n.演出,报告 ​ 复数:presentations ​ I have to make a big presentation in the meeting. ​ 我必须在会议中作重要报告 president [ˈprezɪdənt] n.总统,主席,总裁,(机构、俱乐部、学院 ​ 的)会长 复数:presidents ​ She ran for class president, but came in third.她竞选班长,但名列第三。 ​ 【衍生词】 ​ vice president [ˌvaɪs ˈprezɪdənt] n. 副总统(或大学副校长等) ​ I know I was only vice president.我知道我只是一个副总裁。 pressur [ˈpreʃə] n.压力,强迫(外压 pressure 导致内压 stress) ​ I was again faced with the pressure of making a decision. ​ 我再次面临着做决定的压力。 ​ 【衍生词】stress [ stres] n. 压力(外压 pressure导内压 stress) ​ They fear that they will lose their money and belongings or be under a lot of ​ stress.他们担心自己会失去金钱和财物,或者承受很大的压力 pretend [prɪˈtend] vt. \u0026vi. 假装,装作 ​ 过去式: pretended 过去分词: pretended 现在分词: pretending 第三人称单 ​ 数： tpretends ​ Afer loing, she pretended she’d just run for fun and it was no big deal. ​ 输了之后,她假装自己只是为了好玩才参加竞选的,没什么大不了的。 prevent [prɪˈvent] vi.\u0026vt. 预防,防止 ​ 过去式 prevented 过去分词: prevented 现在分词: preventing 第三人称单 ​ 数: prevents ​ It helps prevent you from sturing off into the di stance or rezeding from notes. ​ 这有助于防止你盯着远处发呆或纯背笔记。 price [praɪs] n. 价格,代价(买家需要支付的费用) (统称,不可数 ​ 具化,某个或某些东西的price,可数) 复数: prices ​ The young shop assistant told him the total price, 37.60. ​ 年轻的店员告诉他合计37.60美元。 ​ Paple do rot wear kilts every day probahly because of their high prices. ​ 人们不会天天穿短裙,可能是因为价格太高了。 ​ 【同义词】 ​ fee [fiː] n. 报酬,费用(付给专业人士/机构的服务费,加入协会的 ​ 会费) 复数:fees ​ He hadn’t puid his television licence fee。他尚未缴纳电视机使用许可费。 ​ charge [tʃɑːdʒ] n.费用,开价(卖家收取的费用) ​ 复数:charges ​ The seller will send the goods to your house for an extra charge. ​ 卖家会送货上门,但是要收取一笔额外费用。 ​ cost [kɒst] n.费用,成本(普通用词,做某事产生的费用/成本) ​ 复数:costs ​ He insised that he pay for the cost of the taxi.他坚持由他来付打车的钱。 private [ˈpraɪvət] adj。私人的,个人的 副词: privately ​ The rich cnuld also eat meals supplied by private cooks. ​ 富人可以吃私人厨师提供的饭菜。 probable [ˈprɒbəbl] adj. 可能的,大概的 副词: probably ​ It is prubable that you have never taken a chance on trying anything new. ​ 很可能你从未尝试过新东西。 process [ˈprəʊsesɪz ] n.过程,工序;审核,处理,加工 ​ 过去式: processed 过去分词: processed 现在分词 processing 第三人称单 ​ 数: processes 复数: processes ​ Proper dog training is not a “quick fix”-it is an ongoing process. ​ 恰当的犬只训练并非“一而就”—它是一个持续的过程。 ​ It will take a week for your application to be processed. ​ 审核你的申请需要一周时间。 proceed [prəˈsiːd] vi. 开始,继续进行 ​ 过去式: proceeded 过去分词: proceeded 现在分词: proceeding 第三人称单 ​ 数: proceeds ​ Work is proceeding slowly.工作进展缓慢。 produce [prəˈdjuːs ] vi.\u0026vt. 生产 ​ 过去式: produced 过去分词: produced 现在分词: producing 第三人称单 ​ 数:produces ​ These special plants grow and produce seeds. ​ 这些特殊的植物生长并产生种子。 ​ 【衍生词】product [ˈprɒdʌkt] n.产品,作品 复数: produets ​ In addition, they provide their customers with great discounts on products. ​ 此外,他们会向客户提供产品的折扣价 ​ production [ prəˈdʌkʃn] n.生产,产量 复数: pr","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:14","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 15 politician [ˌpɒləˈtɪʃn] n.政治家 复数:politicians ​ Politicians will be debating the bill later this week. ​ 政界将在本周晚些时候讨论这个议案。 poetry [ˈpəʊətri] n.诗,诗歌 ​ Sometimes in poetry a certain phrase can bring tears to the eyes and ​ deeply.有时诗歌中的一句话就会令人流泪,倍受感动。 planet [ˈplænɪt] n.星球(复数),地球(单数名词) 复数:planets ​ It will become easier to protect our planet from further harm. ​ 保护我们的地球免受进一步的伤害,将变得更加容易。 plane [plane] n. 飞机 复数: planes ​ Imagine waking up after dreaming about a terrible plane crash. ​ 想象一下,梦见一场可怕的空难后醒来的场景。 place [pleɪs] n.地方,位置;vt.放置,获名次 复数: places 过去式: ​ placed 过去分词: placed 现在分词: plaeing 第三人称单数places ​ It’s not like you have to he very bold, ready to tuke over the place. ​ 这不是说你得放大胆,准备接管这个地方。 ​ More and more: focus is placed on the use of renewable resources. ​ 可再生资源的使用受到越来越多的关注。 pig [pɪɡ] n.猪 复数:pigs ​ Waste from chicken or pigs would be reused as a suuree of energy. ​ 鸡或猪的粪便将作为能源被重新利用。 phrase [freɪz] n.\u003c语\u003e短语 复数:phrases ​ Sumnetimes in poetry a certain phrase can bring tears to the eyes and move us ​ deeply.有时诗歌中的一句话就会令人流泪,倍受感动。 perhaps [pəˈhæps] adv.或许,(表示不确定)也许 ​ Perhaps this helps to explain why they are someting suspected of having had ​ natures.也许这有助于理解他们为什么有时被怀疑秉性不良的原因。 people [ˈpiːpl] n人,人类 ​ People at the club think very highly of him.俱乐部的人很佩服他。 pencil [ˈpensl] n.铅笔 复数:pencils ​ They upgraded his pens and pencils to top-quality onea. ​ 她们把他的钢笔和铅笔升级成最好的。 ​ 【衍生词】pen [pen] n.笔 复数:pens peach [piːtʃ] n.桃子 复数:peaches ​ Beer comes from grains and wine comes from grapes, and some particular ​ wines are made from apples, peaches, or other fruits.啤酒产自谷物,葡萄酒 ​ 产自葡萄,一些特殊的酒是由苹果、桃子或其他水果制成的。 ​ 【衍生词】 ​ pear [peə(r)] n. 梨(树) 复数: pears ​ grape [ɡreɪp] n. 葡萄 复数: grapes past [pɑːst] adj.过去的,以前的;n.过去,过往 ​ Forgiving can lead us away from the past hurt. ​ 原谅可以使我们远离过去的伤害。 ​ I used to go there often in the past.过去我常去那里。 part [pɑːt] n.部分;ad部分的 复数: parts 副词: partly ​ Failure is a necessary part of growth. ​ 失败是成长路上不可或缺的一部分。 park [pɑːk] n,公园,停车场;vi.泊车,停车 复数: parks 过去式: ​ parked 过去分词: parked 现在分词: parking 第三人称单数: parks ​ I usually eyele home through the park.我通常骑自行车穿过公园回家。 ​ You can’t’ paurk here.此处不准停车。 population [ˌpɒpjuˈleɪʃn] n.人口 复数: populations ​ The population continues to increase.人口继续增长。 Q **question** [ˈkwestʃən] n.问题:vt. 间问题,质疑 复数: questioes ​ 过去式: questinned 过去分词: questioned 现在分词: questioning 第三人称 ​ 数: questions ​ I was afraid of what she would say if asked a question. ​ 我不敢提问,因为我怕她会说什么。 ​ Some people once questioned her husband’s ability to head the bridge ​ building,有人曾质疑过她丈夫领导桥梁工程的能力。 quick [kwɪk] adj.快的急速的 ​ 比较级: qucker 最高级: quickest 副词: quickly ​ Proper dog training is not a “quick fix”-it is an ongoing process. ​ 适当的大只训练并非“一而就”——它是一个持续的过程 quiet [ˈkwaɪət] adj.安静的 ​ 比较级 quieter 最高级: quietest 副词: quietly ​ My-mom, a Swiss, is usually quiet and a bit shy. ​ 我妈妈是个瑞士人,安静且内敛。 quote [kwəʊt] vt.\u0026vi. 引述,引用;报价 过去式: quoted 过去分词: quoted 现在分词: quoting 第三人称单数:quotes ​ If you write something really great, maybe some day someone will quote you ​ in report.如果你发表的文章写得很好,也许有一天会有人在他们的 ​ 告中引用你的话。 ​ They quoted us 300 for installing a shower unit. ​ 他们向我们开价300英镑安装淋浴设备。 quality [ˈkwɒləti] n.质量 ​ They upgraded his peneils to top-quality ones. ​ 她们把他的钢笔和铅笔升级成最好的。 quite [kwaɪt] adv. 相当,很 ​ The reason is that it is quite uncertain.原因是它是相当不确定的。 R **race** [reɪs] n.赛跑,竞争 复数: races ​ If you go to a race, you’ll see people cheering for all the runners. ​ 如果你去参加竞赛,你会看到人们为所有的赛跑者欢呼. rain [reɪn] n.雨;vt.\u0026vi.下雨 ​ 过去式: rained 过去分词: rined 现在分词: raining 第三人称单数:rains ​ He sits and watches my practices through rain and shine. ​ 他总来坐着看我练习,风雨无阻。 ​ It is going to rain.要下雨了。 ​ 【衍生词】 rainy [ˈreɪni] adj.下雨的 ​ The rainy seasson has ended at last.雨季总算过去了。 ​ rainbow [ˈreɪnbəʊ] n.彩虹 复数: rainbows ​ Oh look, rainbow!看哪,彩虹! ​ raincoat [ˈreɪnkəʊt] n.雨衣 复数: rainceats. ​ The rain has gone through my raincoat雨水湿透了我的雨衣。 raise [reɪz] vi.\u0026vt. 提起;vi.\u0026vt.举起 ​ 过去式:raised 过去分词: raised 现在分词: rising 第三人称单数:raises ​ It can he risky for parents to raise the issue of eating habits and weight with","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:15","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 16 report [rɪˈpɔːt] n. 报告:报告,报道 复数: reports 过去式: ​ reported 过去分词: rported 现在分词: reporting 第三人称单数: reports ​ You juse fund some good stuff on the Web for your science sepwrt. ​ 你只是为你的科学报告在同上找了些好材料。 ​ shall have report this to the authorities我得把这事向当局报告。 ​ 【生词】reporter [rɪˈpɔːtə(r)] n.记者 复数: reporters reproduce [ˌriːprəˈdjuːs] vi.\u0026vt.再生;繁列 ​ 过去式:reprduced 过去分: reprduced 现在分词: repmaducing 第三人称 ​ 单数: reproduces ​ These plants reproduce themselves.这些物不能自我繁殖。 require [rɪˈkwaɪə] vt. 需要,要求 ​ 过去式: required 过去分词: required 现在分词: roquiring 第三人称 ​ 单数:requires ​ It require discipline and concentration.要求自律和专心。 ​ 【衍生词】requirement [rɪˈkwaɪəmənt] n.要求,必需品复 ​ 数: requirements ​ Its prodacts met all iegal requirements.它的产品符合所有的法律要求。 research [rɪˈsɜːtʃ] n研究,调查(统称不可数;具化,可数) ​ 复数:researchs 过去式: researched 过去分词: researched 现在分词: ​ researching 第三人称单数: researchs ​ But nescarch has showed that hats are kind animals. ​ 但是研究表明,蝙蝠是善良的动物。 ​ He is reseatching into the poiblem.正在调查这个难题。 ​ 【生词】 researcher [rɪˈsɜː(r)tʃə(r)] n. 研究人员 ​ 复数: researchers ​ Bat mearhers also tell people not to be easily influenced by their dreams. ​ 但是研究人员也告诉人们,不要轻易地受梦境的影响。 ​ 【同义词 】 ​ inquiry [ɪnˈkwaɪəri] n.打听,调查(为查明原因或获取信息而 ​ 行的调查) 复数:Inquiries ​ The public called for an independent inqury into the aceident. ​ 公众要求对事故进行独立调查。 ​ survey [ˈsɜːveɪ ] v.\u0026n. (民意)调查(以提或间卷的形式对某 ​ 一人群的观点或行为所开展的调查) ​ 复数: surveys 过去式: surveyd 过去分词: urveyed 现在分词: surveying 第 ​ 三人称单数:surveys ​ A survey shows that you may not cancel your trip ​ 民意调研显示,你可能不会取消你的旅行。 resent [rɪˈzent] vt.怨恨,厌恶 ​ 过去式: resented 过去分词: resented 现在分词 :reenting 第三人称单 ​ 数:resents ​ We thought she might resent our acting too cheerful and thoughtless in her ​ presence.我们以为,她会讨厌我们在她面前表现得过于欢快和轻率。 resource [rɪˈsɔːs] n.资源 复数: resources ​ Natural resources are useful to people, and they come from the earth. ​ 源对人类是有用的,它们来自地球。 respect [rɪˈspekt] vt. 尊敬,尊重;n. 尊敬,尊重 ​ 过去式: spected 过去分词: respected 现在分词: respecting 第三人称单 ​ 数: tespects ​ He fought with courage in every battle, and other soldiers respected him. ​ 每一场战役,他都英勇奋战,战友们都很尊重他。 ​ Runners have great respeet for each other because they know how difficult the ​ port can be.跑步者彼此尊重,因为他们知道这项运动有多困难 ​ 【衍生词】respectable [rɪˈspektəbl] adj.可敬的,体面的 ​ 副: respectably ​ Peraps it will someday become as\"respectable” as tennis or golf. ​ 也许有一天它会像网球或高尔夫一样“受人尊敬。 respond [rɪˈspɒnd] vi.\u0026vt. 回答,反应 ​ 过去式: responded 过去分词: responded 现在分词: responding 第三人称单 ​ 数: responds ​ they respond to the news?他们对这则消息有什么反应? ​ 【衍生词】 ​ response [rɪˈspɒns] n答复,反应 复数: responses ​ Richard started Comic Relief in rerpotse to the severe famine in Fthiopia. ​ 理查德成立喜剧救济基会的初衷,是为了应对埃塞俄比亚的严重 ​ 饥荒 responsibility [rɪˌspɒnsəˈbɪləti] n.责任,职责(统称,不可数:且 ​ 化,某个(种)职责,可数) 复数: responsibilities ​ Ideally, both parents should share the responsibility. ​ 理想情况下,父母双方应该共同分担责任。 ​ I’m afraid ean’t’ shoulder such responsibility.我怕背不起这样的责任。 ​ 【衍生词】 responsible [rɪˈspɒnsəbl] adj有责任的,负责的 ​ 比较级: more responsihle 最高级: most responsible 副词:responsibly ​ I’m reaponsible to my board of direetors.我对董事会负责。 rest [rest] n. 休息,剩余部分 复数:rests ​ You look tired. You need good rest ​ 你看来累了。你需要好好休息一下。 ​ I wish could afford to pay for the rest of his things. ​ 我希望我能负担得起剩余的物品。 result [rɪˈzʌlt] n.结果;产生,导致 复数: results 过去式:resulted ​ 过去分词:resulted 现在分词: resulting 过去式: resulted 过去分词: resulted ​ 现在分词: resulting ​ The tesults were a little surprsing.结果有点令人惊讶 。 ​ This large success resulted in the name Black Friday. ​ 这次巨大的成功使“黑色星期五”声名大噪。 retirement [rɪˈtaɪəmənt] n. 退休 ​ She taught in school and gave lectures about her time in the army till ​ retirement。她在学校教书,讲授自己的军队经历直至退休。 ​ 【衍生词】retire [rɪˈtaɪə] vi.\u0026vt.,退休 ​ 过去式: retired 过去分词: retired 现在分词: retiring 第三人称单数: retires ​ My father retired at the age of 60.我父亲六十岁时退休了。 revolution [ˌrevəˈluːʃn] n革命,变革 复数: revolutions ​ Soon after she started her new career, the American revolution began. ​ 在她开始新的职业生涯后不久,美国革命开始了。 rewarding [rɪˈwɔːdɪŋ] adj. 有报酬的,值得的 ​ 反义词: unrewarding ​ However, difficult as it may be, the experience can be rewarding. ​ 不管怎样,尽管这可能困难重","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:16","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 17 science [ˈsaɪəns] n. 科学 ​ You just found some good stuff on the Web for your scienee repoant. ​ 你为你的科学报告在网上找了些好的素材。 ​ 【衍生词】 scientist [ˈsaɪəntɪst] n. 科学家 复数:scientists ​ Scientists say the fartns of the future could be built in tall buildiop ​ large cities.科学家说,未来的农场将建在一些大城市的高楼里。 season [ˈsiːzn] n. 季节,时期 复数:seasons ​ Other rhythms are hased on months, seasons or years. ​ 其他节律是基于月份、季节或年份的。 ​ 【衍生词】 ​ spring [sprɪŋ] n. 春天 ​ summer [ˈsʌmə(r)] n. 夏天 ​ autumn [ˈɔːtəm] n. 秋天 ​ winter [ˈwɪntə(r)] n. 冬天 seat [siːt] n. 座位 复数:seats ​ They took the bug out to the boy on the seat. ​ 他们把袋子送给了座位上的男孩。 seed [siːd] n. 种子 复数:seeds ​ Frait is part of a fawering plant and it carries the seedde. ​ 果实是开花植物的一部分,它携带种子。 ​ 【衍生词】seedless [ˈsiːdləs] adj.无核的 ​ They can now gow scedless fruit.他们现在可以种无籽水果了。 series [ˈsɪəriːz] n. 一系列,连续,接连 复数:series ​ a senes of 一系列的,一连串的 ​ Life poees an endless senes of prdleme, it is always difficult and is full ​ pain as well as joy.生活总是有无穷无尽的一连串的问题,它总是很 ​ 难,充满了痛苦和欢乐。 serious [ˈsɪəriəs] adj. 严肃的,严重的 副词: seriously ​ Fruits and aegetahles grown indoots would not face serious threat from insects ​ and bad weather. ​ 在室内种植的水果和蔬菜,无需面临昆虫和恶劣天气的威胁。 session [ˈseʃn] n.开会,会议 复数:sessions ​ Afer my experience at the inforuation session I’ve learned tut to be afraid of ​ saning am “undecided”. ​ 招生会的经历之后,我学会了大胆说“尚未决定。 severe [sɪˈvɪə(r)] adj. 严峻的,严厉的 ​ 比较级: severer 最高级: severest 副词: severely ​ Richand started Cone Relief in response to the severe famine in Ethiopia. ​ 理德成立喜剧救济基金会的初衷,是为了应对埃塞俄比亚的严重 ​ 饥慌。 score [skɔː(r)] n. 得分,分数 复数:scores ​ She explained that her gniding system was different, and that we would not ​ see high scores soon. ​ 解释说,她的评分系统是不同的,我们不会很快看到高分。 suggest [səˈdʒest] vt. 提议,建议 ​ 过去式: suggested 过去分词: suggested 现在分词: suggrsting第三人称单 ​ 数:suggests ​ She eunests, fathers should foous on their daughten’ interests. ​ 建议,父亲们应该关注女儿的兴趣爱好。 ​ 【衍生词】suggestion [səˈdʒestʃən] n.提议,建议 ​ 复数: sugrestions ​ If you want to becoane the type alwavs wanted to be, read ​ the following supgestion. ​ 如果你想成为你梦想的演讲者中类型,请阅读以下建议。 shape [ʃeɪp] vt.塑造,使符合;n.形状,外形 ​ 过去式: shuped 过去分词: shaped 现在分词: haping 第三人称单 ​ 数: shapes ​ They did eflectively shape ancient Greece into a most referenced culture in ​ history.它们有效地将古希腊文明塑造成了历史上最具参考价值的 ​ 文化。 ​ My room is in the shape of square.我的房间是正方形的。 share [ʃeə(r)] vt.\u0026vi. 共用,共有;vi分享,分担 ​ 过去式: shared 过去分词: shared 现在分词: sharing 第三人称单数: shares ​ Ideally, both parents should share the responsibility. ​ 理想情况下,父母双方应该共同分担责任。 ​ These are those few individuals you can trust and share deep thoughts and ​ concems with.(挚友)是那些,少数的,你可以信任和交心的人。 shelter [ˈʃeltə(r)] n.遮蔽,庇护,避难(统称,不可数),避难所,遮 ​ 蔽物(其化,可数) 复数:shelters ​ They offered food, shelter and protection to travelers without question. ​ 他们毫无疑问地为旅行者提供食物住所和保护。 ​ They built a rough shelter from old pieces of wood. ​ 他们用旧木条搭了一个简陋的窝棚。 shift [ʃɪft] n. 改变,转移,转换;vt.\u0026vi. 改变,换档 ​ 过去式: shifted 过去分词: shifted 现在分词: shifting 第三人称单数:shifts ​ 复数: shifts ​ In addition, technology itself has helped to cause the shifts in the job market ​ 此外,技术本身也促成了就业市场的转变。 ​ The action of the novel shifts from Paris to London. ​ 小说情节从巴黎移到了伦敦。 shop [ʃɒp] vt. \u0026vi. 购物;n商店 ​ 过去式: shopped 过去分词: shopped 现在分词: shopping 第三人称单数: ​ shops 复数:shops ​ Everyone likes to shop for gifts for the holiday season. ​ 每个人都喜欢在节日期间买礼物。 ​ The young shop assistant told him the total price$37.60. ​ 年轻的店员告诉他合计37.60美元。 ​ 【衍生词】shopper [ˈʃɒpə(r)] n. 买东西的人 复数:hoppers ​ They hope to attract shoppers into their stores.他们希望吸引购物者进店 ​ shopping [ˈʃɒpɪŋ] n.购物 ​ Few people know the history of holiday shopping. ​ 很少有人知道假日购物的历史。 suit [suːt] n.套装,西装;vt.适合;vi.合适 ​ 过去式: suited 过去分词: suited 现在分词: suiting 第三人称单数:suits ​ 复数:suits ​ She made herself a man’s suit and secretly practiced walking and talking like ​ aman.她为自己做了一套男装,悄悄地练习像男人一样走路和说话 ​ What if the fourth didn’t suit your emotions? ​ 如果第四首歌不适合你的情绪怎么办? ​ 【衍生词】 suitable [ˈsuːtəbl] adj. 适当的;相配的 ​ 比较级: more suitable 最高级: most suitable:suitably ​ 反义词:unsuitable ​ Just like ether animals, adult bats help th","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:17","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 18 solve [sɒlv] n.解决(问题) ​ 过去式: solved 过去分词: solved 现在分词: solving 第三人称单数: solves ​ We encourage the human capacity to solve problem. ​ 我们鼓励人们提高解决问题的能力。 ​ 【衍生词】 solution [sɒlv] n.解决办法 复数:solutions ​ However, I’m confident I’ll find a solution. ​ 不过,我相信我会找到解决办法的。 ​ settle [ˈsetl] vt.解决(争议,最终达成一致) ​ 过去式:settled 过去分词:settled 现在分词:settling 第三人称单数:settles ​ It’s time you settled your differences with your father. ​ 现在你该解决同你父亲之间的分歧了。 sound [saʊnd] vt.听起来好像;n.声音(统称,不可数;其化,可数) ​ 过去式:sounded 过去分词: sounded 现在分词: sounding 第三人称单数: ​ sounds 复数: sounds ​ You may say that this sounds great but you just don’t have the time to do it. ​ 你可能会说这听起来很棒,但是没有时间去做。 ​ She heard the sound of footsteps outside.听见外面有脚步声。 source [sɔːs] n. 来源,出处;vt. (从…)获得,寻求(尤指供货)的 ​ 来源 复数: sources 过去式: soued 过去分词:soureed 现在分词： ​ sourcing 第三人称单数:sources ​ Fruits are a souree of subestances that keep us alive and healthy. ​ 水果是维持生命健康的物质来源。 ​ We source all the meat sold in our stores frm British farms. ​ 我们商店里卖的肉均从英国农场购进。 specific [spəˈsɪfɪk] adj.特定的,明确的 ​ 比较级: more specifice 最高级: most specifie 副词:specifically ​ It is the process af teaching to exhibi certain desired behaviors it ​ specifie cirunstances.它是教狗狗在特定的情况下表现合宜行为的 ​ 过程。 ​ I gave you specifie instruction.我给过你明确的指示 。 spend [spend] vt.\u0026vi.花钱;vt.花费(时间) ​ 过去式 spent过去分词:pent现在分词: spending第三人称单数:spend ​ She-pent100 on new dress.她花100英买了一条新连衣裙。 ​ A stady found that British people tse technalogy for 20 minutes longer than ​ they apend sleeping. ​ 项研究发现,英国人使用科技比睡觉的时间多20分钟。 spread [spred] vt.\u0026vi. (使)传播,(使)散布 ​ 过去式: spread 过去分词: spread 现在分词: spreading 第三人称单 ​ 数:preads ​ Wind and water spread seeds.风和水传播种子。 stuff [stʌf] n.原科,材料,资料 ​ You jaest found some good stuff on the Web for your science report. ​ 你只是为你的科学报告在网上找了些好材料。 ​ 【衍生词】 ​ staff [stɑːf] n.全体职工(或雇员) ​ The stafl were very good.员都很出色。 stare [steə(r)] vi.盯着看;vt.凝视 ​ 过去式: stared 过去分词: stared 现在分词: staring 第三人称单数: stares ​ It helps prevent you from staring off into the distance or reading from notes. ​ 这有助于防止你盯着远处发呆或阅读笔记。 station [ˈsteɪʃn] n.车站,站,局 复数:stations ​ Even the scientists at the South Pole research station can enjoy fresh ​ vepetables they grow in their own greenhouse.即使是南极研究站的科学家, ​ 也可以享用他们在温室里种植的新鲜蔬菜。 statue [ˈstætʃuː] n.雕像 复数:statues ​ Ondinary people like looking at extraordinary people, even if they are only ​ statues.普通人喜欢看非凡的人,即使他们只是雕像 。 steal [stiːl] vt.\u0026vi. 偷 ​ 过去式: stole 过去分词: stolen 现在分词: stealing 第三人称单数:steals ​ It means stealing person’s ideas意味着取某人的想 strange [streɪndʒ] adj.陌生的 ​ 比较级: stranger 最高级: strangest 副词: strangely ​ 【衍生词】stranger [ˈstreɪndʒə(r)] n.陌生人 复数:strangers ​ It’s so easy to walk into your first job and feel like a stranger in a strang ​ land.踏第一份工作时,我们很容易会感觉自己就像一个陌生人在 ​ 个陌生的地方。 strict [strɪkt] adj. 严格的 ​ 比较级: stricter 最高级: strictest 副词: strietly ​ They said she was strict and her class was hard to pass. ​ 他们说她很严格,她的课很难通过。 strong [strɒŋ] adj. 强壮的,强烈的 ​ 比较级: stronger 最高级: strongest 副词: strongly ​ Life was difficult, but Deborah worked hard and grew strong. ​ 生活很艰难,但是黛博拉工作努力,身体强健。 structure [ˈstrʌktʃə(r)] n. 结构,体系 复数: structures ​ Ancient Greck schools featured a structuire that had boys in school from the ​ age of six until fourteen and then an optional additinual four years. ​ 古希腊学校的特点是,男子从六岁到十四岁在学校学习,之后四年选修。 stupid [ˈstjuːpɪd] adj.愚的 ​ 比较级: stupider 最高级: stupidest 副词: stupidly ​ I realize that was the most stupid thing. ​ 我意识到这是最愚蠢的事情。 survive [səˈvaɪv] vt.\u0026vi.幸存,活下来 ​ Pollution and other activities sometimes cause the number of a species to ​ leeume sa small thut it cannut survive. ​ 污染和其他活动有时会导致一个物种急变少乃至灭亡 ​ 【衍生词】survival [səˈvaɪvl] n. 幸存,生存 ​ Moei urevins are even dependent on bats for their sunival. ​ 许多物种甚至依靠蝙蝠生存。 Saturday [ˈsætədeɪ] n.星期六 ​ He is crming either on Saturday or on Sanday. ​ 他不是星期六来,就是星期天来。 ​ 【生词】 ​ Monday [ˈmʌndeɪ] n. 星期一 ​ Tuesday [ˈtjuːzdeɪ] n. 星期二 ​ Wednesday [ˈwenzdeɪ] n. 星期三 ​ Thursday [ˈθɜːzdeɪ] n. 星期四 ​ Friday [ˈfraɪdeɪ] n. 星期五 ​ Sunday [ˈsʌndeɪ] n. 星期天 school [skuːl] n.学校 复数:schools ​ You har to change scho","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:18","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 19 stand [stænd] vt.\u0026vi.站立,站着 ​ 过去式: stood 过去分词: stood 现在分词: standing 第三人称单数:stands ​ Don’t just stand there -do something! ​ 别就那么直挺挺地站着—点什么! ​ 【固定词组】 stand for代表 ​ IQ stands for “intelligence quotient(智商)\".IQ代表“智商”。 star [stɑː(r)] n. 星星,明星 复数:stars ​ You can’t go from nervous speaker to a star speaker ovemight. ​ 你没法一夜之间就从紧张的演讲者变成明星演讲者。 ​ To the side of the large star is a smaller star. ​ 大星星旁边是一颗小一点的星星。 start [stɑːt] vt.\u0026vi.开始,着手;n.开始 ​ 过去式: started 过去分词: started 现在分词: starting 第三人称单数: starts ​ Start with smaller groups and get as much fecdback as you can. ​ 从小批量的听众开始,尽可能多地获得反馈。 ​ A slow start gave way to rapid growth. ​ 开始慢一点是为了后期的快速发展。 steel [stiːl] n.钢,钢铁 ​ Fewer Amencan workens are meeded to niake sleel today than in the past. ​ 今天美国需要的钢铁工人比过去少了。 step [step] n. 脚步,步骤,台阶 复数: steps ​ I found man running donwn the hospital siepn, waving at me. ​ 我发现一个人跑下医院的台阶,向我挥手。 ​ However, if you take no steps to nuake this expereace positive. dormulury lifin ​ ean become misery.然而,如果你不采取措施让宿舍生活变得积极,它 ​ 可能会成为一件痛苦的事。 stick [stɪk] n.棍棒;vi.\u0026vt.粘贴,张贴 复数 sticks 过去式: stuck 过 ​ 去分词:stuck 现在分词: sticking 第三人称单数: sicks ​ Dho not play fetch with heavy items or sticka. ​ 不要用重物或棍子玩接物游戏。 ​ He stuck stamp on the envelope.他把一张邮票贴到信封上。 still [stɪl] adv.仍,仍然 ​ The rest of your family is still in bed.你的家人还在睡觉。 stop [stɒp] vt.\u0026vi.停止,中断;n.停止,停车站 ​ 过去式: stopped 过去分词: stopped 现在分词: stopping 第三人称单数: ​ stops 复数:stops ​ You will eventually get there unless you stop trying. ​ 你最终会成功的,除非你停止努力。 ​ Babies do not grow at a steady rate but in stops and starts. ​ 婴儿成长的速度并非一成不变,而是长长停停,停停长长。 street [striːt] n.大街,街道 复数streets ​ Roaring alotg quiet streets, they wake sleeping families and make babies cry. ​ 它们(摩托车)从安静的街道上咆哮而过,吵醒熟睡的家庭,引发婴儿的 ​ 哭泣。 struggle [ˈstrʌɡl] vi.搏斗,奋斗,努力 ​ 过去式: struggled 过去分词: struggled 现在分词: struggling 第三人称单 ​ 数: struggles ​ struggle with 与……斗争,在内心与(自己、自己的良心等)进行斗争 ​ Decisiun making is something I struggle with. ​ 我不善于做决定 student [ˈstjuːdnt] n.学生 复数:students ​ My students have a summer research projeet. ​ 我学生有一个暑期研究课题。 ​ 【衍生词】study [ˈstʌdi] n.学习,研究;学习,研究 ​ 复数: studies 过去式 studied 过去分词: studied 现在分词: studlying ​ 第三人称单数:studies ​ The study was directed by Dr. Beige at University of f Minnesota. ​ 该研究由明尼苏达大学的伯杰博士执导。 ​ Accompanied by Emily, Washington went to study bridges. ​ 在艾米丽的陪同下,华盛顿去学习桥梁。 supermarket [ˈsuːpəmɑːkɪt] n.超级市场 复数: supermarkets ​ Scotsmen do not put on their kilt just to buy a bottle of nuilk and a ​ bread at the local supemmarket. ​ 苏格兰男人穿短裙,并不是只为了在当地超市买瓶牛奶或一条面包。 sure [ʃʊə(r)] adj.确信的;adv.当然,确实 ​ 副词: surely 反义词:unsure ​ If you do so, make sarre it is in a puhlie place and go with a friend ur a ​ member.如果你要见,一定要在公共场所并和朋友或家人一起去 ​ Will you open the wine?‘‘Sure, where is it?’ ​ “你把葡萄酒打开好吗?”“没问题,在哪儿呢? surf [sɜːf] vi. 冲浪,(互联网上)冲浪 ​ 过去式:surfed 过去分词: surfed 现在分词:surfing 第三人称单数:surfs ​ Many people make telephone calls or surf the web whuile watching TV. ​ 许多人一边看电视一边打电话或上网。 sweet [swiːt] n. 糖果,甜食;adj.甜的,愉快的 ​ 复数:sweets 比较级: weeter 最高级aweetest 副词:weetly ​ We muike jams and swret.我们做果酱和糖果。 ​ Thin wine is too for me.这种葡萄酒对我来说太甜了。 surround [səˈraʊnd] vt. 包围,围绕 ​ 过去式: surrounded 过去分词: surrounded 现在分词: surrounding 第三人称 ​ 单数:surrounds ​ Tall trees surtound the lake.环湖都是大树。 ​ 【衍生词】surrounding [səˈraʊndɪŋ] n. 周围的事物 ​ 复数: surroumding ​ Design is how we view detailad surrounding in life, it’s in the way people ​ live.其实设计就在生活中,是我们怎么看待周围的事物。 sacrifice [ˈsækrɪfaɪs] n.牺牲,献祭;vt.\u0026vi.牺牲,把…奉献给….. ​ 过去式: sacrificed 过去分词: sacrificed 现在分词: sacrificing 第三人称单 ​ 数: sucrifices ​ Farmer life still requires a lot of hard work and sacrifice. ​ 农民的生活仍然需要付出极大的努力和牺牲。 ​ She sacrificed everything for her children她为子女牺牲了一切 size [saɪz] n. 规模,大小,尺寸 复数:sizes ​ When the harvest time came I was amazed at the huge size of the potatoes my ​ Dad pulled out of the soil. ​ 收获的时候到了,爸爸从地里挖出的巨大土豆令我感到惊讶不已。 smash [smæʃ] n.打碎 ​ 过去式: smashed 过去分词: smashed 现在分词: smashing 第三人称单 ​ 数:smashes ​ Mary canefully packed the fruit in a box to keep them safe and dry in case one ​ gnot smeshed and its juic","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:19","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 20 title [ˈtaɪtl] n.标题 复数:titles ​ You’ll need to know the author, the title, and the date it was published. ​ 要做到这一点,您需要知道作者、标题和出版日期。 tool [tuːl] n.工具 复数:tools ​ Language is very powerful.语言是强有力的工具。 tooth [tuːθ] n.牙齿 复数:teeth ​ This can damage the dog’s teeth or injure the dog. ​ 这会损坏狗的牙齿或弄伤狗。 trade [treɪd] n. 贸易,交易 ​ The decline also has something to do with the explosive growth in world trade ​ since1960.这种下降也与1960年以来世界贸易的爆炸性增长有关。 truck [trʌk] n.卡车 复数: trucks ​ They are noisy , though some trucks are even noisier. ​ 它们(摩托车)很吵,虽然有些卡车甚至更吵 type [taɪp] n.类型 复数:types ​ There man multiple diale and many types of food. ​ 有多种方言和不同类型的食物。 taxi [ˈtæksi] n.车 复数:taxis ​ The man reached the taxi and jumped in.那人走到车边跳了进来。 telephone [ˈtelɪfəʊn] n. 电话,电话机复数telephones ​ Many people make telephone calls or surf the web while watching TV. ​ 许多人一边看电视一边打电话或上网 。 ​ 【衍生词】telethon [ˈteləθɒn] n.长期连续电视节目 ​ In the evening of Red Nose Day telethon takes place BBC TV ​ channels.红鼻子日当晚,BBC电视频道会进行长时间的直播。 ​ television [ˈtelɪvɪʒn] n.电视节目(不可数),电视机(可数) 复 ​ 数: televisions ​ In mary countries. there are television programme about Scotland. ​ 在许多国家,都有关于苏格兰的电视节目。 ​ This is color television.这是一台彩色电视机。 tell [tel] vt.告诉,说 ​ 过去式:told 过去分词:told 现在分词: telling 第三人称单数: tells ​ I did not tell everyone that I lived in Europe. ​ 我没有告诉大家我在欧洲生活过。 text [tekst] n.文本(不可数),文章,课本(可数) 复数:texts ​ Vnice chat anxd text chat are quickly bcoming preferred ways of communicating ​ with otbens online. ​ 语音聊天和文字聊天正迅速成为在线与他人通信的首选方式。 ​ Read the text carefully and then answer the question. ​ 先仔细阅读文章,然后再回答问题。 thick [θɪk] adj. 茂盛的,粗大的 ​ 比较级: thicker 最高级: thickest 副词:thickly ​ Men and women with big muscles simply have thicker bundles of fibers. ​ 肌肉发达的男人和女人就是有较粗的纤维束。 thing [θɪŋ] n.事件,东西 复数:things ​ I realize that was the most stupid thing. ​ 我意识到这是最愚蠢的事情 。 thousand [‘ˈθaʊznd] n. 一千 复数: thousands ​ Thousands of these fibers are packerd together to make a single muacle. ​ 成千上万的纤维被包裹在一起,形成一条肌肉。 ​ 【衍生词】 ​ hundred [ˈhʌndrəd] n. 一百 复数: mhundreds ​ million [ˈmɪljən] n. 百万 复数: millions ​ ​ ‘miljon ​ billion [ˈbɪljən] n. 十亿 复数: billions thus [ðʌs] adv.是,因此;conj. 因此 ​ Thus, it can be an easy way to learn languages and world cultures. ​ 因此,它是学习语言和世界文化的简单方法。 till [tɪl] conj. 直到······时(为止),在······之前;prep. 直到 ​ She taught in school and gave lectures about her time in the army till ​ retirement.在学校教书,讲授自己的军队经历直至退休。 tiny [ˈtaɪni] adj. 极小的,微小的 比较级: tinier 最高级: tinies ​ There are four languages in that tiny country,那个小国有四种语言。 today [təˈdeɪ] adv.(在)今天;n. 今天 ​ Toduy, diners have millionis of choices.今天,用餐者们有数百万种选择。 ​ Today is her tenth birthday,今天是她的十岁生日。 together [təˈɡeðə(r)] adv. 同时,在一起 ​ Thoasands of these fibem are packed togrther to nuke a singhe muscle. ​ 成千上万的纤维被包在一起,形成一条肌肉。 tone [təʊn] n. 语声调,语调 ​ Muical iteilliges is the ability to reeognize thythm ind tone. ​ 音乐智力是一种识别节奏和语调的能力。 top [tɒp] adj. 最高的:n.顶,顶部 ​ Just as a high can prdict top test score, a high EQ can prediet succeas in ​ social and emotional situation. ​ 就像高智商可以预测考试高分,高情商可以预测社交和情感上的成功。 ​ She was standing at the top of the stairs.她在楼梯的顶端。 top-quality [tɒp ˈkwɒləti] adj. 最高品质的,质量最好的 ​ They upgraded his pens and peneils to top-quality ones. ​ 她们把他的钢笔和铅笔升级成最好的。 total [ˈtəʊtl] adj. 总计的(金额等),全部的 副词:totally ​ The young shop assistant told him the total price. 37.60. ​ 年轻的员告诉他合计37.60美元。 towards [təˈwɔːdz] prep.朝,向 ​ As he starts to run towands it, yell “fetch” agnin. ​ 随狗狗向球跑去,再喊一声“捡回来。 trap [træp] vt. 困住,使限制在,诱偏;n. 圈套(对付人的)计谋 ​ 过去式: traped 过去分词: trapped 现在分词: trapping 第三人称单 ​ 数: traps ​ They are trapped in their sadness and thus, experience more failure. ​ 他们陷悲伤也因此经历了更多的失败。 ​ It‘s s trap to many poople fall into.太多人都掉进了这个陷阱中。 treat [triːt] n. 款待,招待;vt. 对待,治疗,处理 复数: treats 过去式: ​ treated 过去分词: treated 现在分词: treats ​ As the dog sits, say “sit\"again and then immediately give him the treat. ​ 当狗坐的时候,再说声“坐下”,然后马上给它吃的。 ​ My parents still treat me like child.我父母仍然把我当成孩子。 ​ 【衍生词】 ​ treatment [ˈtriːtmənt] n.治疗,疗法,处理 复数 reatments ​ Doctors are looking for new","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:20","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"DAY 21 wait [weɪt] vt.\u0026vi.等待 ​ 过去式: waited 过去分词: waited 现在分 waiting 第三人称单数: waits ​ He walked outside to wait on the bench in front of the shop. ​ 他走到商店外面,坐在店前的长凳上等着。 ​ 【衍生词】 ​ waiter [ˈweɪtə(r)] n. 男服务员 复数: waiters ​ waitress [ˈweɪtrəs] n. 女服务员 复数: waitresses wake [weɪk] vt.唤醒;vi.醒来,弄醒 ​ 过去式:woke 过去分词: woken 现在分词: waking 第三人称单数: wakes ​ Roaring along quiet streets, they wake sleeping families and make bahies cry. ​ 它们(摩托车)从安静的街道上咆哮而过,吵醒熟睡的家庭,引发婴儿的 ​ 哭泣。 ​ Wake up! It’s eight o’clock.醒醒吧!已经八点钟了。 ​ 【衍生词】awake [əˈweɪk] adj. 醒着的 ​ Dreams may influence what we are really doing while we are awake.梦可能会 ​ 影响我们醒时做的事。 ​ waken (= wake up) [ˈweɪkən] vi. 醒,醒来;vt. 唤醒 ​ 过去式: wakened 过去分词: wakened 现在分词: wakening 第三人称单 ​ 数: wakens ​ The child had just wakened.这孩子刚醒。 walk [wɔːk] vt.\u0026vi. 走,散步 ​ 过去式: walked 过去分词: walked 现在分词: walking 第三人称单数:walks ​ He walked outside to wail on the bench in front of the shop. ​ 他走到商店外面,坐在店前的长凳上等着。 ​ 【衍生词】 walking [ˈwɔːkɪŋ] n.步行,散步 ​ She mude herself a man’s suit and secretly practiced walking and talking like ​ a man.她为自己做了一套男装,悄悄练习像男人一样走路和说话。 want [wɒnt] n. 想要,希望 ​ 过去式: wanted 过去分 wanted 现在分词: wanting 第三人称单数: wants ​ She wanted to help her hushand with his new job. ​ 她想助力她丈夫的新工作。 warm [wɔːm] adj.温暖的 ​ 比较级:warmer 最高级: warmest 副词: warmly ​ Some plants like warm, sunny weathf, but other plants prefer cooler ​ tempetatures.有些植物喜欢温暖,阳光充足的天气,但其他植物喜欢较凉 ​ 爽的温度。 waste [weɪst] n. 浪费,废品;浪费 ​ 过去式: wasted 过去分词: wasted 现在分词: wasting 第三人称单数:wastes ​ We pour waste into rivers, lakes and occans. ​ 我们把废料倒人河流、湖泊和海洋。 ​ I tesolwed not to waste money on a hotel. ​ 我决定不把钱白白浪费在旅馆住宿上。 wave [weɪv] vt.\u0026vi. 挥手;n. 挥手,波浪 ​ 过去式: waved 过去分词: waved 现在分词: waving 第三人称单数: waves ​ I found a running down the bospital steps, waving at me. ​ 我发现一个人跑下医院的台阶,向我挥手。 ​ huge wave swept the bout away.一个大浪把小船卷走了。 weak [wiːk] adj柔弱的,虚弱的 ​ 比较级:weaker 最高级: weakest 副词: weakly ​ She was extremely slender and weak.她非常瘦弱。 ​ 【衍生词】 ​ weakness [ˈwiːknəs] n.弱点,缺点 复数: weaknesses ​ It’s important to know your own strengths and weaknesses ​ 了解自己的优缺点很重要。 ​ weaken [ˈwiːk(ə)n] vt.\u0026vi. z削弱,变弱 ​ 过去式:weakened 过去分词: weakened 现在分词: weakening 第三人称单 ​ 数: weakens ​ Poverty can’t weaken their relationship. ​ 贫穷无法削弱他们的关系。 wealthy [ˈwelθi] adj. 富有的 ​ 比较级: wealthier 最高级: wealthiest ​ People there are very different fro Brazilians; they are wealthy. ​ independent, and organized. ​ 那里的人和巴西人有很大的不同:他们富有,独立,做事有条理。 ​ 【衍生词】 ​ wealth [welθ] n. 财富 ​ Health is better than wealth.健康胜于财富。 week [wiːk] n.周,星期 复数:weeks ​ Two weeks later, when I arrived home from work, Robbie handed me a letter. ​ 两周后,我下班到家,罗比递给我一封信。 ​ 【衍生词】 ​ weekly [ˈwiːkli] adj.每周的 ​ The child has a weekly allowance of five dollars. ​ 这孩子每星期有五元零用钱。 ​ weekday [ˈwiːkdeɪ] n.工作日 复数 weekdays ​ The centre is open from 9 a. m. to 6 p. m. on weekdays. ​ 本中心星期一至星期五上午9点至下午6点开放。 ​ weekend [ˌwiːkˈend] n. 周末(中的一天) 复数:weekends ​ The centre is open from 9 a,. to 6 p. m.on weekends. ​ 本中心周末上午9点至下午6点开放。 weigh [weɪ] n. 称…重量 ​ 过去式: weighed 过去分词: weighed 现在分词: weighing 第三人称单 ​ 数:weighs ​ Accsordling to Berge, they should lorasing on howr much their kids. ​ 根据伯杰的说法,他们应该避免关注孩子的体重。 ​ 【衍生词】 ​ weight [weɪt] n. 重量 ​ lose weight 减肥 ​ No Lid eer lost weight becanee his mother told him he was fat. ​ 没有孩子会因为他妈说他胖而减肥。 wide [waɪd] adj.宽的,广阔的 ​ 比较级:wider 最高级:widest ​ a range of 一系列的 a wide range of 各种各样的,大量的 ​ When yon live in a doritory, you can enjoy a wide riange of campus services ​ wrich are not available to thesse who live off campus. ​ 住校可以享受到很多非住校人员体验不到的校园服务。 ​ 【衍生词】 width [wɪdθ] n.宽度,广度复数:widh ​ The rarpet is availuble in diffennt widthe. ​ 这款地毯有各种宽度可供选择。 ​ length [leŋθ] n. 长度 复数: lengths ​ The carpet is available in different lengths. ​ 这款地毯有各种长度可供选择。 ​ height [haɪt] n.高度 复数:height ​ Please state your height and weight.请说明身高和体重。 ​ widen [ˈwaɪdn] vt. \u0026vi. 放宽,加宽 ​ 过去式: widened 过去分词: widened 现在分词: widening 第三人称单 ​ 数: widens ​ Wage differences in the two areas are widening. ​ 两个地区的工资差距正在拉大 。 wind [wɪnd ] n. 风 ​ Wind and water spread seeds. ​ 风和水传播种子。 window [ˈw","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:1:21","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"中频单词 A **absent** [ˈæbsənt] adj.缺席的,心不在焉的 副词:absently ​ She’s been absent from work for three days.她已经三天没出勤了。 absolute [ˈæbsəluːt] adj.绝对的 副词:absolutely ​ There are no absolute rules.世事无绝对。 abundant [əˈbʌndənt] adj.大量的 副词:abundantly ​ China is abundant with natural resources.中国自然资源丰富。 accompany [əˈkʌmpəni] vt.陪伴 ​ 过去式: accompanied 过去分词: accompanied 现在分词: accompanying ​ 第三人称单数: accompanies ​ Accompanied by Emily, Washington went to study bridges. ​ 在艾米丽的陪同下,华盛顿去学习桥梁。 ​ ala account [əˈkaʊnt] n.账户 复数: accounts ​ I’d like to check the balance in my account please. ​ 请查一下我的账户余额。 ​ 【衍生词】 accountant [əˈkaʊntənt] n.会计师 ​ 复数: accountants ​ The accountant described his work to the sales staff. ​ 那个会计向营业部的职员介绍了自己的工作情况。 acknowledge [əkˈnɒlɪdʒ] vt.承认 ​ 过去式:acknowledged 过去分词: acknowledged ​ 现在分词: acknowledging 第三人称单数: acknowledges ​ We weknowledged the need for reform.我们承认改革的需要。 adjust [adjust] vi.\u0026vt.调整 ​ 过去式: adjusted 过去分词: adjusted 现在分词: adjusting 第三人称单 ​ 数:adjusts ​ He adjusted himself very quickly to the heat of the country. ​ 他很快使自己适应了这个国家炎热的天气。 ​ 【衍生词】adjustment [əˈdʒʌstmənt] n.调整 ​ 复数: adjustments ​ The company made an adjustment in my salary. ​ 公司对我的薪金作了调整。 adventure [ədˈventʃə(r)] n.冒险(统称,不可数;具化,可数) ​ 复数:adventures ​ Their cultural backgrounds gave them a spirit of adventure. ​ 他们的文化背景赋予了他们一种冒险精神。 alarm [əˈlɑːm] n.警报;vt.警告,使惊恐 ​ 过去式: alarmed 过去分词: alarmed 现在分词: alarming 第三人称单数: ​ alarms 复数:alarms ​ In case of fire, ring the alarm bell.如遇失火,请按警铃。 ​ We do not want to alarm the guest.我们不想让客人受到惊吓。 appoint [əˈpɔɪnt] vt.约定,任命,委派 ​ 过去式: appointed 过去分词: appointed 现在分词: appointin g第三人称单 ​ 数:appoints ​ They appointed him chairman.他们任命他为主席。 ​ 【衍生词】appointment [əˈpɔɪntmənt] n.预约(可数);任命,委 ​ 派(常做不可数) 复数:appointments ​ I’ve made an appointment for a facial next week. ​ 我已经预约了下周去美容。 ​ His appointment nuns for five years.他的任期为五年。 argue [ˈɑːɡjuː] vi.争论,辩论 ​ 过去式: argued 过去分词: argued 现在分词: arguing 第三人称单数: argues ​ We’re always arguing with each other about money. ​ 我们总是为钱吵嘴。 ​ 【衍生词】argument [ˈɑːɡjumənt] n.争论 复数: arguments ​ We had an argument with the waiter about the bill. ​ 我们和服务员就账单发生了争吵。 arrange [əˈreɪndʒ] vt. \u0026vi. 安排 ​ 过去式: arranged 过去分词: arranged 现在分 arranging 第三人称单 ​ 数:arranges ​ I’ve arranged to see him on Friday morning. ​ 我已安排好星期五上午见他。 ​ 【衍生词】arrangement [əˈreɪndʒmənt] n.安排 ​ 复数:arrangements ​ I’ll make arrangements for you to be met at the airport. ​ 我会安排人到机场接你。 attack [əˈtæk] vt.\u0026vi. 攻击;n攻击 ​ 过去式: attacked 过去分词: attacked 现在分词: attacking 第三人称单数: ​ attacks 复数:attacks ​ The enemy attacked us at night.敌人在夜里向我们进攻。 ​ The police are luunching a major attack on rug dealers. ​ 警方对毒品贩子发动了大规模的攻击。 attention [əˈtenʃn] n.注意,注意力 ​ He turned his attention back to the road apair ​ 他把注意力转回到道路上。 ​ 【固定词组】 pay alttention to 注意 ​ You must pay attention to this problem before every thing. ​ 你应该首先注意这个问题 award [əˈwɔːd] n.奖品;vt.授,奖给 ​ 过去式: awarded 过去分词: awarded 现在分词: warding 第三人称单数: ​ awands 复数:awards ​ It is impossible to honor her with the award.奖品授给她是不可能的。 ​ The champion was awarded the gold medal.冠军被授了金牌。 B **breath** [breθ] n.呼吸(不可数),一口气(可数) 复数:breaths ​ We had to stop for breath before we got to the top. ​ 我们不得不喘口气,然后再登山顶。 ​ He took a deep breath, and began to climb the stairs. ​ 他深吸了一口气,然后开始爬楼梯。 ​ 【衍生词】breathe [briːð] vt.\u0026vi.呼吸 ​ 过去式: breathed 过去分词: breathed 现在分词: breathing 第三人称单 ​ 数:breathes ​ Fish cannot breathe out of water.鱼离开水就不能呼吸。 balance [ˈbæləns] n.平衡(不可数),余额(可数) ​ 复数:balances ​ Try to keep a balance between work and relaxation. ​ 尽量保持工作与休闲均衡。 ​ I’d like to check the balance in my aceount please. ​ 请查一下我的账户余额 。 behalf [bɪˈhɑːf] n.利益,维护 ​ on behalf of sb. 或ons.‘s behalf 代表(或代替)某人 ​ behalf of everyone here I want to thank you for your help. ​ 我代表在场的各位感谢你帮助了我们。 C **charm** [tʃɑːm] n.魅力 ​ Her charm rests in her happy smile. ​ 她的魅力在于她幸福的微笑。 ​ 【衍生词】charming [charming] adj.有魅力的 ​ 比较级: more charming 最高级: most charming 副词: charmingly 反 ​ 词:charmless ​ Her colorful character makes her very charming. ​ 她生动活泼的性格使她非常富有魅力。 cherish [ˈtʃerɪʃ] vt. 珍爱,爱护 ​ 过去式:cheri","date":"2020-04-11","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/:2:0","tags":["英语"],"title":"自考英语（二）词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E4%BA%8C%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"自考英语课本词汇","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"自考英语课本单词 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:0:0","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Unit 1 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:1:0","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text A Critical reading applies to non-fiction writing in which the author puts forth a position or seeks to make a statement. critical（adj） 有判断力的；判断公正的 applies（n） 申请；应用 seeks（v） 寻找；寻求；探索 non-fiction（n） 纪实文学 statement（n） 说明；说法 It involves more than just understanding what an author is saying. involves（v） 包含；牵涉 author（n） 作者；作家 Critical reading involves questioning and evaluating what the author is saying,and torming your own opinions about what the author is saying. evaluating（v） 估计；评价 opinions （n） 意见；评价 Consider the context of what is written. consider（vt）考虑；认为 context（n） 背景；环境 In either case you must recognize and take into account any differences between your values and attitudes and those represented by the author. either（conj） 两者之一 recognize（vt） 认出；识别；承认 account（n） 账户；解释；账单 values（n） 价值观念；价值标准 attitude（n）态度；看法 represented（v） 代表；描写 Before accepting what is written, be certain that the author provides sufficient support for any assertions made. accepting（v）接受；同意；（adj） 承兑的；易接受的 provide（vt）提供；规定 （vi）规定；抚养 sufficient（adj）足够的；充分的 assertion（n）声明；断言 If there are inconsistencies ，carefully evaluate the support the author provides for the inconsistencies. inconsistency（n） 不一致；易变 Analyze assumptions made by the author. analyze（vt） 对…进行分析；分解 assumption（n） 假定；设想 In many cases, the author’s assumptions are not directly stated. directly（adv） 直接的；立即；马上 Evaluate the sources the author uses. sources（n） 来源 （v）寻求 In doing this, be certain that the sources are credible. credible（adj） 可靠地；可信的 For example, Einstein is a credible source if the author is writing about landmark achievements in physics. landmark（n）路标；地表；界表； （adj）有重大意义或影响 achievements（n）成就；完成 physics（n） 物理学；物理现象 Also be certain that the sources are relevant. relevant（adj） 相关的；中肯的 Einstein is not a relevant source when the subject is poetry. poetry（n） 诗；诗意 Finally, if the author is writing about subject in its current state, be sure that the sources are current. current（adj）现在的；流通的 （n）趋势；涌流 For example, studies done by Einstein in the early 20th century may not be appropriate if the writer is discussing the current state of knowledge in physics. century（n） 世纪；百年 appropriate（adj） 适当的；恰当的；（vt） 占用；拔出 discussing（n） 论述 knowledge（n） 知识；学问 Identify any possible author bias. identify（vt）确定；鉴定；识别 possible（adj） 可能的；合理的； （n）可能性；合适的人 By being a critical reader, you will become better informed and may change your views as appropriate. informed （adj） 见多识广的；消息灵通的 view （n） 观察；视野； （vt）考虑；查看 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:1:1","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B To became a flexible reader you need to know how to select and use a reading style that is consistent with your purpose for reading. flexible（adj）灵活的； select（v）选择 style（n）风格；时尚；（vt）设计；称呼；（vi）设计样式； consistent（adj）始终如一的； purpose（n）目的；用途； Study reading is the reading style used by flexible readers when their purpose is to read difficult material at a high level of comprehension. material（n）材料；用具 level（n）水平；（adj）水平的；平坦的；（vi）瞄准；拉平 comprehension（n）理解；包含 Furthermore, as you read you must challenge yourself to understand the material. furthermore（adv）更远地，进一步地；（adj）更多的；附加的 challenge（n）挑战；怀疑 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:1:2","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text B The language we use programs our brains. language（n）语言；语言能力 program （n）程序；计划；（vt）用程序指令；为….安排节目；（vi）编程序；安排节目 Mastering our language gives us a great degree of mastery over our lives and our destinies. mastering（n）精通；掌握；（v）精通；控制 degree（n） 程度；等级 destinies（n）命运；定数 Even the smallest of words can have the deepest effect on our subconscious mind, which is like a child, and it doesn’t really understand the difference between what really happens and what you imagine. It is eager to please and willing to carry out any commands that you give it-whether you do this knowingly or not is entirely up to you. smallest（adj）最小的 deepest（adj）最深的 effect（n）影响；效果； （vt）产生；达到目的 subconscious（adj）潜意识的；下意识的；（n）下意识（心理活动） eager（adj）渴望的；热切的 command（v）命令；统帅；（n）指令；指挥； entirely （adv）完全的；彻底的 It is a small word yet it has an amazing impact upon us. amazing（adj）令人惊异的 （v）使吃惊 impact （n）影响；效果；（vt）挤入；压紧（vi）冲突 upon（prep）在…之上；（adv）在地面上 It gives you a sense of determination, a feeling that it will be done. sense（n）感觉；功能； （vt）感觉到；检测 determination（n）决心；果断 Eliminate the word try from your dictionary and see how your life improves. eliminate（vt）消除；排除 improves（vt）改善；增进；（vi）增加；变得更好 It disempowers us, makes us feel weak and helpless, and damages our self-esteem. disempowers（vt）剥夺权利；力量剥夺 weak（adj）虚弱的；无力地 helpless （adj）无助的；无能的 damage （n）损害；伤害；（v）伤害；毁坏 self-esteem（n）自尊；自大 It limits our infinite abilities and stifles creativity. limit（n）限制；限度；（vt）限制；限定 infinite（adj）无限的；无穷的 abilities（n）能力；才能 stifles（vt）扼杀；使窒息； （vi）窒息；被扼杀 creativity（n）创造力；创造性 Using words like this allows you to take back your power and to be in control of your life. control（n）控制；管理；（vt）控制；管理 Words may appear small and insignificant, yet they can have a deep and lasting effect on us. appear（vi）出现；显得 insignificant（adj）无关紧要的 Make a list of words you commonly use and then write next to them some alternatives you can use. Make these alternatives words that make you feel fabulous, not only about yourself, but about life and what you are doing! commonly（adv）一般的；通常的 alternative （adj）供选择的；选择性的； （n）二中选一 fabulous（adj）难以置信的 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:1:3","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B English plays an important role in the workplace and when used in the correct and appropriate manner, it can help boost a career or a business. role（n）角色；任务 correct（adj）正确的；恰当的；（v）改正；校正 appropriate（adj）适当的；恰当的； （vt）占用；拔出 manner（n）方式；习惯 business（n）商业；交易 Those who are already working have the opportunity to see what they can and cannot do effectively in English in their current job. opportunity（n）时机；机会 cannot（v）不能；无法 A valuable skill to have in business is how to negotiate. valuable（adj）有价值的；贵重的 skill（n）技能；技巧； negotiate（vt）谈判；商议；（vi）谈判；交涉 You need to know what you want, as well as how to bargain and make concessions. bargain（n）交易；便宜货 concession（n）让步；特许（权） Being able to deal with a conflict and knowing how to end negotiations can make big difference to the outcome. conflict（n）冲突；矛盾； （vi）冲突；矛盾 outcome（n）结果；结局 Workplace English learning will encourage professional and efficient communication,which translates as good service to customers and business partners or suppliers, which can only be a positive for any business. professional（adj）职业的；行业的 efficient（adj）有效的；有能力的 communication（n）通讯；交流 translates（vt）翻译；转化；（vi）翻译 service（n）服务；仪式；（adj）服务性的；耐用的；（vt）维修；检修 customers（n）客户；顾客 partners（n）伙伴；（v）合伙；成为搭档 suppliers（n）供应商 positive（adj）积极的； （n）正数 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:1:4","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Tip for English Learning Having a large vocabulary is basic to learning any language, and it is especially true in English. large（adj）大的；多数的 vocabulary（n）词汇；词表 especially（adv）特别；尤其 Learning a word won’t help much if you promptly forget it. promptly（adv）迅速的；立即的 Research shows that it takes from 10 to 20 repetitions to really make a word part of your vocabulary. repetition（n）重复； It helps to write the word-both the definition and a sentence you make up using the word. definition（n）定义；解说 sentence（n）句子；命题 As soon as you learn a new word, start using index cards that can later be reviewed. index（n）指标；指数；（vi）做索引；（vt）指出 reviewed（v）复习；评估 It helps to review your index cards periodically to see if you have forgotten any of your new words. periodically（adv）定期地；偶尔； ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:1:5","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Unit 2 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:2:0","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text A Have you heard of the story about spilt milk? spilt（v）洒出；溢出 I would hope all parents would respond in this manner. respond（vi）回答；作出反应； （vt）以…回答； （n）应答；唱和 I recently heard story about a famous research scientist who had made several very important medical breakthroughs. recently（adv）最近 research（n）研究；调查；（vi）研究；调查；（vt）研究；调查 several（adj）几个的；各自的；（pron）几个；数个 medical（adj）医药的；药的； （n）医生；体格检查 breakthroughs（n）突破 He was interviewed by a newspaper reporter who asked him why he was so much more creative than the average person; what set him so far apart from others? interviewed（v）面试；接见 creative（adj）创造性的 apart（adv）相距；与众不同；（adj）分离的 He responded that, in his opinion, it all came from an experience with his mother that occurred when he was about two years old. responded（v）回答；回报 experience（n）经验；经历；（vt）经验；经历 occurred（n）发生 He had been trying to remove a bottle of milk from the refrigerator when he lost his grip on the slippery bottle and it fell, spilling its contents all over the kitchen floor-a veritable sea of milk! remove（vt）移动；开除；（vi）移动；迁移；（n）移动；距离 bottle（n）瓶子；（vt）控制；（vi）收拢钱币 refrigerator（n）冰箱 grip（n）紧握；支配；（vt）握紧；夹紧；（vi）抓住； slippery（adj）滑的；狡猾的； contents（n）内容；要旨 veritable（adj）真正的；名副其实的； When his mother came into the kitchen, instead of yelling at him, giving him a lecture,or punishing him. instead（adv）代替；反而 lecture（n）演讲；讲稿；（vt）演讲；告诫；（vi）演讲 punishing（adj）严厉的；（v）惩罚； I have rarely seen such a huge puddle of milk. rarely（adv）很少的；难得 puddle（n）水坑；焦土；（vt）使泥泞；搅浑；（vi）搅泥浆 You know, Robert, whenever you make a mess like this, eventually you have to clean it up and restore everything to its proper order. eventually（adv）最后；终于 restore（vt）恢复；修复；（vi）恢复；还原 proper（adj）适当的；本身的；（adv）完全地 He chose the sponge and together they cleaned up the spilt milk. chose（v）选择 The little boy learned that if he grasped the bottle at the top near the lip with both hands, he could carry it without dropping it. What a wonderful lesson! grasped（v）抓牢；握紧；（n）抓；握；理解； The renowned scientist remarked that it was at that moment that he knew he didn’t need to be afraid to make mistakes. renowned（adj）著名的；有声望的；（v）使有声誉 scientist（n）科学家 remarked（n）注意；言辞;（vt）评论；觉察；（vi）谈论 afraid（adj）害怕；恐慌 mistabkes（n）错误 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:2:1","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B I clearly remember a period during which I felt like a failure. clearly（adv）清晰地；明显地； failure（n）失败；故障 But what I eventually learned was that failing at one thing is not failing at all things. eventually（adv）最后；终于 failing（n）弱点；（prep）如果没有；（v）失败；不及格； And, in fact, failure is a necessary part of growth. necessary（adj）必要的；必须的； growth（vi）发展；生长；（vt）使生长；种植； Life is filled with trial and error. filled（adj）充满的； trial（n）试验；审讯；（adj）试验的；审讯的； error（n）误差；错误 One of the greatest problems people have with failure is that they are too quick to judge isolated situations in their lives and label them as failures. problems（n）难题；引起麻烦的人；（adj）成问题的； isolated（v）隔离；孤立；（n）被隔离的人（或物） situations（n）状况；情境； His perspective leads to perseverance. perspective（n）观点；远景； perseverance（n）坚持不懈；不屈不挠； His perseverance brings longevity. longevity（n）长寿；长命； ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:2:2","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text B Cindy glanced nervously at the clock on the kitchen wall. glanced（v）瞥见；扫视；（n）一瞥；一闪； nervously（adv）神经质地；焦急地； she thought as she put the finishing touches or the chocolate cake she was frosting. touches（prep）朝；位于…（adv）关上 chocolate（n）巧克力；（adj）巧克力色的； frosting（n）结霜；无光泽面；（v）冻坏；起霜；（adj）结霜的。磨砂的； It was the first time in her 12 years she had tried to make a cake from scratch, and to be honest, it wasn’t exactly an aesthetic triumph. scratch（n）刮伤；抓痕；（adj）凑合的；碰巧的；（vt）抓；刮；（vi）抓；骚； honest（adj）诚实的；实在的； exactly（adv）恰好的；精准的； aesthetic（adj）美的；美学的； triumph（n）胜利；凯旋；（vi）获得胜利；成功； The cake was…well, lumpy. lumpy（adj）粗笨的 And the frosting was bitter, as if she had run out of sugar or something, which, of course, she had. bitter（adj）痛苦的；尖刻的；（n）苦味；苦啤酒；（adv）激烈的；（vt）使变苦 Imagine a huge blender filled with all the fixings for chocolate cake-including the requisite bowls, pans and utensils. blender（n）搅拌机；掺和者； requisite（adj）必备的；必不可少的；（n）必需品 bowls（n）保龄球；木球；（v）玩保龄球 She had created something, a veritable phoenix’ of flour and sugar rising out of the kitchen clutter. created（v）创造；建立； veritable（adj）真正的； flour（n）面粉；粉状物质；（vt）把…磨成粉； clutter（n）杂乱；混乱；（vt）使凌乱 She was anxious for her parents to return home from their date so she could present her anniversary gift to them. anxious（adj）焦虑的；担忧的； anniversary（n）周年纪念日 She turned off the kitchen lights and waited excitedly in the darkness. darkness（n）黑暗；模糊； When at last she saw the flash of the car headlights, she positioned herself in the kitchen doorway. headlight（n）汽车灯的前灯 positioned（adj）放置的；（v）放置； By the time she heard the key sliding into the front door, she was THIS CLOSE to exploding. exploding（n）爆炸；爆发；（v）爆炸；爆发；迸发； She flipped on the lights dramatically and trumpete flipped（vt）掷 dramaticcally（adv）戏剧的；引人注目的； She gestured grandly toward the kitchen table where a slightly off-balance two-layer chocolate cake awaited their inspection. grandly（adv）盛大地；宏大地； two-layer（adj）双层的； awaited（v）等待； inspection（n）视察；检查； The whole kitchen is a disaster. disaster（n）灾难；灾祸； She stormed up the stairs and into her room, slamming the door shut behind her. stormed（n）暴风雨；大动荡；（vi）起风暴；横冲直撞；（vt）猛攻；怒骂； slamming（n）抨击；（v）抨击； Unfortunately, Cindy’s mother isn’t the only parent who suffers from Situational Timbercular Glaucoma-the occasional inability to see the forest for the trees. unfortunately（adv）不幸地； suffers（vt）遭受；经历；（vi）忍受；遭受； situational（adj）环境形成的； occasional（adv）偶然的；临时的； inability（n）无能力；无才能； forest（vt）植树于；使成为森林；（n）森林； From time to time we all allow ourselves to be blinded to issues of long-term significance by stuff that seems awfully important right now, but isn’t. Muddy shoes, lost lunch money and messy kitchens are troublesome, and they deserve their place among life’s frustrations. allow（vt）允许；给予；（vi）容许；考虑； blinded（adj）瞎的；不知情的；（v）使失明；使黑暗； issues（n）议题；问题；（v）分发；流出； significance（n）意义；重要性； stuff（n）东西；材料；（vt）塞满；填满；（vi）吃得多； seems（vi）似乎；像是； awfully（adv）可怕地；十分； messy（adj）凌乱的；散乱的； troublesome（adj）麻烦的；讨厌的； deserve（vi）应受；应得；（vt）应受；应得； frustration（n）挫折； Is a lost dollar more valuable than a youngster’s emerging dignity? youngster（n）年轻人； emerging（adj）新兴的；出现的；（v）形成；浮现； dignity（n）尊严；高贵； And while kitchen sanitation is important, is it worth the sacrifice of tender feelings and relationships? sanitation（n）环境卫生；卫生设备； sacrifice（n）牺牲；祭品；（vt）牺牲；献祭；（vi）献祭；奉献； tender（adj）温柔的；脆弱的；（n）偿付；清偿； relationships（n）关系；关联； I’m not saying that our children don’t need to learn responsibility, or to occasionally sutier the painful consequences of their own bad choices. occasionally（adv）偶尔； painful（adj）痛苦的；疼痛的； consequence（n）结果；重要性； choices（n）选择； ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:2:3","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B There are several key abilities that allow successful people to fail forward instead of taking each setback personally. abilites（n）能力；才能； fail（vi）失败；不及格；（vt）不及格；使失望； instead（adv）代替；反而； setback（n）挫折；退步； personally（adv）亲自地；当面； First, successful people don’t blame themselves when they fail. blame（vt）责备；归咎于；（n）责备；过失； They take responsibility for each setback but they don’t take the failure personally. responsibility（n）责任；义务； Second,successful people don’t define themselves by individual failures. define（vt）定义；使明确； individual（adj）个人的；个别的；（n）个人；个体； Finally, successful people are resilient. resilient（adj）弹回的；有弹力的； ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:2:4","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Tip for English Learning Read and listen to challenging material so that you’ll be exposed to many new words. challenging（adj）挑战的；（v）要求；质问； ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:2:5","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Unit 3 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:3:0","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text A Loyalty consists of friend, who will stick by you, through thick and thin. consist（vi）组成；在于 stick（vt）刺；戳；（vi）坚持；伸出；（n）棍；手杖 thick（n）最拥挤部分；活动最多部分；（adj）厚的；浓的；（adv）厚厚地；密集地； A friend who is always honest with you and never betrays the friendship with lies is a loyal friend. honest（adj）诚实的；实在的； betray（vt）背叛；出卖； friendship（n）友谊；友爱； loyal（adj）忠诚的；忠心的；（n）效忠的臣民 If you have a loyal friend, you have indeed found a true virtue in that friend。 indeed（adv）的确；实在； virtual（adj）虚拟的；有效的； The current trend on the Internet is befriending anyone who requests to be your friend. current（adj）现在的；流通的；（n）趋势 befriending（n）行为主义 request（n）请求；需求；（vt）要求；请求 However, this new trend may lead to disasters. trend（n）趋势；走向；（vi）趋向；伸向;（vt）使…趋向 disaster（n）灾难；不幸； It may be popular and trendy to have a network filled with a multitude of mutual friends. popular（adj）流行的；通俗的； network（n）网络；广播网 filled（adj）满的；加满的 multitude（n）群众；多数 mutual（adj）共同的；相互的； Will they share my private matters with others on the pages of Facebook, or perish the thought, engage in gossip about me with others? share（vt）分享；分担；（vi）共享；分担；(n)份额；股份 private（adj）私人的；私有的； matters（n）事项；事件； perish（vt）使麻木；毁坏；（vi）死亡；毁灭； engage（vt）吸引；占用；（vi）从事；答应 gossip（n）小道传闻；随笔； Loyalty found in a friend is akin to making deposit in a bank account. akin（adj）类似的；同类的； deposit（n）存款；保证金；（vt）使沉积；存放；（vi）沉淀 account（n）账户；账目；（vi）解释；导致；（vt）认为 A loyal friend attracts another loyal friend. attract（vt）吸引；引起；（vi）吸引；有吸引力 If you were B. L. F. way before Facebook gained notoriety, then I’m sure you understand the premise of loyalty in friend. notoriety（n）罪名；丑名； premise（vt）引出；预先踢出；（n）前提；上述各项；（vi）作出前提 A best loyal friend does not care who is invited to your party. invited（v）要求；请求 They will attend your party and celebrate you, just in the way best loyal friend should do. attend（vt）出席；照料；（vi）出席；致力于 celebrate（vt）庆祝；举行；（vi）庆祝；过节； Reconnecting with best loyal friend is easier to do on the pages of Facebook. reconnecting（n）重新连接中；（v）再接合 However a virtual friend does not assure you of his loyalty. assure（vt）保证；担保； My caution to you is that you’d better pay attention to the smiling faces on the Facebook pages. caution（n）小心；谨慎；（vt）警告 In the eighties we were warned of smiling faces in song, which contained these lyrics. warn（vt）警告；通知；（vi）发出警告； contain（vt）包含；控制；（vi）含有；自制 lyric（adj）抒情的；吟唱的；（n）抒情诗；歌词 Now, that is the undisputed truth for my generation. undisputed（adj）无可争辩的；无异议的； generation（n）一代；产生； ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:3:1","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B It’s so easy to take good friends for granted. granted（vt）授予；同意 Like a comfortable pair of gloves, old friends wear well. comfortable（adj）舒适的；舒服的；（n）盖被 But friendships that suffer from busyness and over-familiarity can’t afford to be neglected too long. suffer（vt）遭受；忍受；（vi）遭受；忍受； busyness（n）忙碌；繁忙 afford（vt）给予；提供； neglected（adj）被忽视的；（v）忽视；疏忽 They need renewal. renewal（n）更新；恢复 If you want and need to keep true friendship alive and well, please, consider and think over a list of the most important qualities. alive（adj）活着的；活泼的； consider（vt）考虑；认为；（vi）考虑；认为 qualities（n）品质 You may neglect your intimate friends from time to time, but if you fail to cultivate these qualities- loyalty, forgiveness, honesty, and dedication-you can’t’ expect to keep true friends. intimate（adj）亲密的；私人的；（n）知己；至交；（vt）暗示；通知； cultivate（vt）培养；陶冶 forgiveness（n）宽恕；宽仁之心 dedication（n）奉献；献身； ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:3:2","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text B The best friend a man has in this world may turn against him and become his enemy. enemy（n）敌人；仇敌；（adj）敌人的；敌方的 His son or daughter whom he has reared with loving care may prove ungrateful. rear（vt）培养；树立；（vi）暴跳；高耸；（adv）向后；在后面；（adj）后面的 Those who are nearest and dearest to us, those whom we trust with our happiness and our good name, may become traitors to their faith. nearest（adj）最近的 dearest（n）最亲爱的人；（adj）最亲爱的 trust（n）信任；信赖；（vt）信任；盼望；（vi）信任；信赖； traitor（n）叛徒；卖国贼 It flies away from him, perhaps when he needs it most. flies（n）苍蝇；（v）飞行；时间飞逝 perhaps（adv）也许；可能；（n）假定；猜想 A man’s reputation may be sacrificed in a moment of ill-considered action. reputation（n）名声；声誉 sacrifice（n）牺牲；祭品；（vt）牺牲；献祭；（vi）献祭；奉献； The people who are prone to fall on their knees to do us honor when success is with us may be the first to throw the stone of malice when failure settles its cloud upon our heads. prone（adj）俯卧的；有…倾向的； honor（n）荣誉；信用；（vt）尊敬； throw（vt）投；抛；（vi）抛；投掷；（n）投掷；冒险； stone（n）石头；结石；（adj）石的；石制的；（vt）向扔石块 malice（n）恶意；预谋 failure（n）失败；故障 settle（vi）决定；定居；（vt）解决；安排；（n）有背长椅 The one absolute, unselfish friend a man may have in this selfish world, the one that never deserts him, the one that never proves ungrateful or treacherous, is his dog. absolute（adj）绝对的；安全的；（n）绝对；绝对事务 unselfish（adj）无私的；慷慨的； desert（n）沙漠；荒原；（v）遗弃；舍弃；（adj）沙漠的；荒凉的； ungrateful（adj）不领情的；忘恩负义的； treacherous（adj）奸诈的；叛逆的； A man’s dog stands by him in prosperity and in poverty, in health and in sickness. prosperity（n）繁荣；成功； poverty（n）贫困；困难； sickness（n）疾病；呕吐 He will sleep on the cold ground when the wintry winds blow and the snow drives fiercely, if only he can be near his master’s side. fiercely（adv）猛烈地；厉害地； master（vt）控制；精通；（n）硕士；主任；（adj）主人的；主要的 He will lick the sores and wounds that come in the encounter with the roughness of the world. lick（vt）舔；劵过；战胜；（vi）舔；轻轻拍打；（n）舔；打 sore（adj）痛心的；痛苦的； pauper（n）乞丐；穷人；（adj）贫民的； encounter（v）遭遇；遇到；（n）遭遇；偶然碰见； roughness）（n）粗鲁；猛烈； He guards the sleep of his pauper master as if he were a prince. guard（n）守卫；警卫；(vi)警惕；（vt）保卫；监控； ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:3:3","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B helps you deal with pressure from others, helps you become a better person, and most importantly loves you! pressure（n）压力；压迫；（vt）迫使；密封； importantly（adv）重要的；大量的； ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:3:4","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Tips for English Learning Rather than studying long list of unrelated vocabulary, use specific vocabulary lists to help you prepare for the type of vocabulary you need for work, school or hobbies. unrelated（adj）无关的；不相关的； specific（adj）特殊的；特定的；（n）特性；细节； prepare（vt）准备；使适合；（vi）预备；做好思想准备 Try to always learn vocabulary in groups of words instead of random lists. random（adj）随机的；任意的；（n）随意；（adv）胡乱地 In this manner words are related to each other and are more likely to be remembered over the long-term. manner（n）方式；习惯 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:3:5","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Unit 4 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:4:0","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text A We all lived on my parents’subsistence farm. subsistence（n）生活；生存 We grew cotton, sugar cane corn, hogs, and chickens and had large garden, but it didn’t bring in much cash. cotton（n）棉花；棉布；（vi）一致；理解；（adj）棉的；棉制的； garden（n）花园；菜园；（vt）栽培花木；（vi）从事园艺 I remember complaining to my father and grandfather about having to go milk those cows. complaining（adj）抱怨的（v）抱怨；控诉 My father said, “Ya know, boy, to work is a blessing. blessing（n）祝福；赐福；（v）使幸福； I looked at those two men who had worked harder than ever had-my father eking out a living on that farm and my grandfather farming and working as a carpenter during the Depression’. carpenter（n）木匠；木工；（vi）当木匠；做木匠工作；（vt）制作 depression（n）沮丧；不景气； Going to college was a rare privilege for a kid from Lakeland. college（n）大学；学院 rare（adj）稀有的；半熟的；（adv）非常；极其；（vi）用后腿站起来 And what started out as an obligation to the Army became a way of life that I stayed committed to for 37 years, three months and three days. obligation（n）义务；职责； committed（adj）坚定的；效忠的；（v）承诺；委托； In the late 1980s. during a visit to Bangladesh, I saw a woman with a baby on her back breaking bricks with a hammer. brick（n）砖；砖块；（vt）用砖砌；（adj）用砖做的； hammer（vi）锤击；敲打；（n）铁锤；链球；（vt）锤击；捶打； I asked a Bangladesh military escort why they weren’t using a machine, which would have been a lot easier. military（adj）军事的；军人的；（n）军队；军人； escort（n）陪同；护航舰；护送者；（vt）护送；为…护航； easier（adj）更简单；容易些； And as bad as that woman’s job was, it was enough to keep a small family alive. It reminded me of my father’s words: To work is a blessing. remind（vt）提醒；使想起； Serving in the U.S. Army overseas, I saw a lot of people like that woman in Bangladesh. overseas（adv）在海外；海外；（adj）海外的；国外的； They are victims of crime,the ideology of terrorism, poor health, depression and social unrest. victim（n）受害人；牺牲品 crime（n）罪行；罪犯；（vt）控告….违反法律 ideology（n）意识形态；观念学； terrorism（n）恐怖行为；恐怖主义； depression（n）沮丧；不景气； poor（adj）贫穷的；可怜的； social（adj）社会的；社交的；（n）联谊会；联欢会； unrest（n）不安；不安的状态； These victims become the illegal immigrants, the slaves of human trafficking, the drug dealers and the street gang members. illegal（adj）非法的；违法的；（n）非法移民；间谍 immigrant（adj）移民的；迁入的；（n）移民；侨民； slave（n）奴隶；从动装置；（vi）苦干；苦命工作； human（adj）人的；人类的；（n）人；人类 trafficking（n）非法交易；（vi）交易； drug（n）药；毒品；麻醉药；（vt）使服麻醉药；（vi）吸毒 member（n）成员；会员 Afghanistan and in New Orleans. People who have jobs can have a home send their kids to school, develop a sense of pride, contribute to the good of the community, and even help others, When we can work, we are free. We are blessed. contribute（vt）贡献；出力； sense（n）感觉；官能；观念；道理；（vt）感觉到；检测； pride（n）自豪；骄傲；（vt）使得以；（vi）自豪 community（n）社区；共同体； ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:4:1","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B Whether you are waiting tables or a brain surgeon, any job you do is about serving others and making their life better on some level. surgeon（n）外科医生； You don’t like your job,but you may enjoy being with your colleagues. colleagues（n）同事；同行； This is something to be thankful for. When you practise gratefulness it will really allow you to develop a more useful outlook and be happier at your work. practice（n）实践；练习；（vi）练习；实习；（vt）；练习；实行 gratefulness（n）感激；感恩 useful（adj）有用的；有益的； outlook（n）展望；观点；（vt）比…好看；用目光压倒；（vi）朝外看 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:4:2","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text B The paradox of starting your own business lies in the simultaneous challenge and reward,making it an experience unlike any other. paradox（n）. 悖论，反论；似是而非的论点；自相矛盾的人或事 business（n）商业，交易; 生意; 事务，业务; 职业，行业; simultaneous（adj） 同时的；联立的；同时发生的；（n） 同时译员 challenge（n）挑战；怀疑；（vt）向…挑战；对…质疑； reward（n）报酬；报答；酬谢；（vt）奖励；奖赏 So many businesses fail, and most entrepreneurs exclude themselves from the possibility. entrepreneur（n）企业家；承包人；主办者 exclude（vt） 排除；排斥；拒绝接纳；逐出 possibility（n）可能性；可能发生的事物 The tragic reality is that when businesses fail, the passion often dies with it. tragic（adj）悲剧的；悲痛的，不幸的 reality（n）现实；实际；真实 passion（n）激情；热情；酷爱；盛怒 By following some sound advice and being prepared for the process,you will decrease your chances of losing a lot more than you bargained for. advice（n） 建议；忠告；劝告；通知 prepare（vt）准备；使适合；装备；起草；（vi）预备；做好思想准备 process（n）（为达到某一目标的）过程；（自然变化的）过程；工艺流程；诉讼程序；传票；突起；进展；（发型）直发式；（v）加工；审核；处理（数据）；列队行进；冲印（照片）；把（头发）弄成直发；（adj）经过特殊加工的；照相板的；染印法的 decrease（v）减少，减小，降低；（n）减少，减小；减少量；减少过程 bargain（n） 交易；便宜货；契约；（vt）卖；（vi）谈判 I have recently started business and have learned some crucial lessons in the process that feel privileged to share with you. recently（adv）最近；新近 crucial（adj） 重要的；决定性的；定局的；决断的 privileged（adj）享有特权的；有特别恩典的；（v） 给予…特权；免除 Identify your motivation. motivation（n）动机；积极性；推动 Write out all of your motivating factors and prioritize them. factor(n)因素；要素；（vi）做代理商；（vt）把…作为因素计入；代理经营；把…分解成 prioritize（v）按优先顺序列出，确定 (任务) 优先顺序；优先处理，优先考虑 Keep that passion at the forefront of your business plan, your marketing strategies, and your daily routine. passion（n） 激情；热情；酷爱；盛怒 forefront（n)最前线，最前部；活动的中心；（思考、关注的）重心 strategies（adj）战略上的，战略的 routine（n） 常规，惯例；生活乏味；（演出中的）一套动作；（计算机）例行程序；（adj）常规的，例行的；平常的；乏味的；（v） 按惯例安排 It you keep your passion in plain sight, you will stay focused on the purpose of your business and not solely on the logistics. purpose（n）目的；用途；意志；（vt）决心；企图；打算 solely（adv）单独地；仅仅 logistics（n）后勤；后勤学 If you are starting your business locally, research your competitors. competitor（n）竞争者，对手 Determine if there is room in the market for your business. determine（v）（使）下决心，（使）做出决定；（vt） 决定，确定；判定，判决；限定；（vi）确定；决定；判决，终止；了结，终止，结束 If you are starting an Internet company, research the requirements for your own unique Web presence. requirement（n）要求；必要条件；必需品 presence（n）存在；出席；参加；风度；仪态 Your business cannot survive without customers, so do enough research on the fr determine if there are enough potential clients to keep your business alive. cannot（v）不能；无法 survive（vt）幸存；生还；幸免于；比…活得长；（vi） 幸存；活下来 customer（n）顾客；家伙 potential（adj）潜在的，可能的；势的；（n） 潜能，可能性；电势 Identify your finances. finance（v）财政，财政学；金融；（vt）负担经费，供给…经费；（vi） 筹措资金 If you have ever purchased a new home, you know that the financial obligations extend beyond the down payment and the mortgage. purchase（v）购买；获得，赢得；升起，举起；（n） 购买；购买的东西；支点；财产置得；（地产的）年收益；紧握；起重装置 obligation（n）义务；职责；债务 payment（n） 付款，支付；报酬，报答；偿还；惩罚，报应 mortgage（n） 抵押；抵押贷款额；（v）抵押；以某人的前途作代价 You have to buy furniture, trash cans, a garage door opener, light fixtures and landscaping equipment, and before you know it, you’ve far exceeded your financial boundaries. furniture（n） 家具；设备；储藏物 garage（n）车库；汽车修理厂；飞机库；（vt）把……送入车库；把（汽车）开进车库 opener（n）开启工具；开启的人 landscaping（n）景观美化 equipment（n）设备，装备；器材 exceed（vt）超过；胜过；（vi）超过其他 financial（adj）金融的；财政的，财务的 boundaries（n） 边界，界线 Do exhaustive financial planning. exhaustive（adj）详尽的；彻底的；消耗的 Meet with financial advisor or someone at your bank to examine the financial viability of your business and the process of getting it up and running. advisor（n） 顾问；指导教师；劝告者 examine(vt) 检查；调查； 检测；考试；（vi）检查；调查 viability（n）生存能力，发育能力；可行性 Be prepared for financial loss and get advice on how to alleviate that burden in the future. alleviate（vt）减轻，缓和 burden（n）责任；负责；（vt）使负担；烦扰； Seek out advice from seasoned business owners, even those in your own field. seasoned（adj） 经验丰富的；老练的；调过味的 If there is a business owner in your community or in your network that you aspire to model, examine his or her business practices and how they handle various situations. aspire（vi）渴望；立志；追求 model","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:4:3","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B Too many people are looking to get rich, escape the corporate grind, and work shorter hours with more free time. escape（vt） 逃避，避开，避免；被忘掉；被忽视;(vi)逃脱；避开；溜走；（气体，液体等）漏出；（未受伤或只受了一点伤害而）逃脱；声音（不自觉地）由…发出;(n)逃跑；逃亡；逃走；逃跑工具或方法；野生种；泄漏 corporate（adj） 法人的；共同的，全体的；社团的；公司的；企业的 If you are focused on solving a customer problem or need, believe you can do what you do better than anyone else, dying to work long hours, wear many hats, and juggle endless responsibilities, then you have the right startup mindset. focused（adj）聚焦的；专心的；（v） 聚焦；注视 solving（v）解决 juggle（vi）玩杂耍；欺骗；歪曲；（vt）歪曲；欺骗；（n） 玩戏法；欺骗 responsibility（n） 责任，职责；义务 You also need certain personality traits. certain（adj）某一；必然的；确信；无疑的；有把握的；（pron）某些；某几个 personality（n）个性；品格；名人 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:4:4","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Tips for English Learning Word formation is one of the keys to successful English learning. formation（n）形成；构造；编队 Advanced level English exams tend to use word formation as one of the key testing elements. element（n）元素；要素；原理；成分；自然环境 The following is a sample formation chart which provides the concept noun, personal noun, adjective and verb forms of some key vocabulary. sample（n）样品，样本；（化验的）抽样；（用于新乐曲中的）节录乐曲；确定（模拟信号）瞬时值；（v） 品尝，体验；抽样检验；节录（某一曲子，用于新乐曲中）；（adj）样品的，作为例子的 concept（n）观念，概念 personal（adj）个人的；身体的；亲自的;（n） 人事消息栏；人称代名词 adjective（adj）形容词的；从属的；（n） 形容词 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:4:5","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"书181页表格中的生词 accusation（n）控告，指控；谴责 achievements（n）业绩；获得 administration（n）管理；行政；实施；行政机构 admiration（n）钦佩；赞赏；羡慕；赞美 advice（n）建议；忠告；劝告；通知 analysis（n） 分析；分解；验定 competition（n）竞争；比赛，竞赛 education（n） 教育；培养；教育学 destruction（n）破坏，毁灭；摧毁 accountant（n） 会计师；会计人员 accuser（n）控告者；原告； achiever（n）获得成功的人 administrator（n）管理人；行政官 admirer（n）爱慕者；赞赏者；钦佩者 adviser（n） 顾问；劝告者；指导教师 analyst（n）分析者；精神分析医师；分解者 competitor（n）竞争者，对手 educator（n） 教育家；教育工作者；教师 destroyer（n）驱逐舰；破坏者；起破坏作用的事物 accountable（adj）有责任的；有解释义务的；可解释的 accusing（adj）指责的；非难的；归咎的 achievable（adj）可完成的；可有成就的；做得成的 administrative（adj）管理的，行政的 admiring（adj）赞赏的，羡慕的；钦佩的 adisory（adj）咨询的；顾问的；劝告的 analytical（adj）分析的；解析的；善于分析的 competitve（adj）竞争的；比赛的；求胜心切的 educational（adj）教育的；有教育意义的 destructive（adj）破坏的；毁灭性的；有害的，消极的 accuse（vt）控告，指控；谴责；归咎于；（vi）指责；控告 achieve（vt）取得；获得；实现；成功；（vi）达到预期的目的，实现预期的结果，如愿以偿 administrate（vt） 管理；经营，实施 admire（vt）钦佩；赞美；（vi） 钦佩；称赞 advise（vt）建议；劝告，忠告；通知；警告；（vi）建议；与…商量 analyze（vt） 对…进行分析，分解 compete（vi）竞争；比赛；对抗 educate（vt）教育；培养；训练；（vi）教育；训练 destroy（vt）破坏；消灭；毁坏 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:4:6","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Unit 5 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:5:0","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text A It is a great truth because once we truth see this truth we transcend it. transcend（vt）胜过，超越 Instead they moan more or less incessantly, noisily or subtly about the enormity of their problems, their burdens, and their difficulties as if life were generally easy, as if life should be easy . incessantly（adv）不停地，不间断地 noisily（adv）吵闹地，喧闹地 subtly（adv）精细地；巧妙地；敏锐地 enormity（n） 巨大；暴行；极恶 burden（n）负担；责任；船的载货量；（vt）使负担；烦扰；装货于 They voice their belief, noisily or subtly, that their difficulties represent a unique kind of affliction that should not be and that has somehow been especially visited upon them or else upon their families, their tribe, their class, their nation, their race or even their species, and not upon others. voice（n）声音；嗓音；发言权；愿望；（vt）表达；吐露 represent（vt）代表；表现；描绘；回忆；再赠送；（vi）代表；提出异议 unique（adj）独特的，稀罕的；[数] 唯一的，独一无二的；（n）独一无二的人或物 affliction（n）苦难；苦恼；折磨 especially（adv） 特别；尤其；格外 Without discipline we can solve nothing. discipline（n）学科；纪律；训练；惩罚；（vt）训练，训导；惩戒 What makes life difficult is that the process of confronting and solving problems is a painful one. confront（vt）面对；遭遇；比较 painful（adj）痛苦的；疼痛的；令人不快的 Problems, depending upon their nature, evoke in us frustration of grief. sadness loneliness, guilt, regret, anger. fear anxiety, anguish, or despair. evoke（vt）引起，唤起；博得 grief（n） 悲痛；忧伤；不幸 sadness（n） 悲哀；悲伤，悲痛；使人悲伤的事 loneliness（n）寂寞，孤独 guilt（n）犯罪，过失；内疚 regret（vt）后悔；对……感到遗憾；礼貌或正式地表示惋惜或抱歉；对（损失或缺乏）感到痛惜；（vi）遗憾；（n）遗憾，歉意 anxiety（n）焦虑；渴望；挂念；令人焦虑的事 anguish（n） 痛苦；苦恼；（vt） 使极度痛苦；（vi）感到极度的痛苦 despair（n）绝望；令人绝望的人或事；（vi） 绝望，丧失信心 Indeed. it is because of the pain that events o conflicts engender in us all that we can call them problems. conflict（n）冲突，矛盾；斗争；争执；（vi）冲突，抵触；争执；战斗 engender（vt）使产生；造成；（vi） 产生；引起 Problems are the cutting edge that distinguishes between success and failure. distinguishes（vt） 区分；辨别；使杰出，使表现突出；（vi）区别，区分；辨别 It is only because of problems that we grow mentally and spiritually. mentally（adv）精神上，智力上；心理上 spiritually（adv）在精神上地 When we desire to encourage the growth of the human spirit, we challenge and encourage the human capacity to solve problems just as in school we deliberately set problems for our children to solve. spirit（n）精神；心灵；情绪；志气；烈酒；（vt）鼓励；鼓舞；诱拐 challenge（n）挑战；怀疑；（vt）向…挑战；对…质疑 capacity（n）能力；容量；资格，地位；生产力 deliberate（adj） 故意的；深思熟虑的；从容的；（vt）仔细考虑；商议 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:5:1","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B Imagine life as a game in which you are juggling some five balls in the air. juggling（n） 杂耍，手技杂耍；改动，重新安排；欺骗，欺诈 But the other four balls-family, health, friends and spirit-are made of glass, and if you drop one of these, they will be irrevocably scuffed, marked, nicked, damaged or even shattered. They will never be the same. spirit（n） 精神；心灵；情绪；志气；烈酒；（vt） 鼓励；鼓舞；诱拐 irrevocably（adv）不能取消地；不能撤回地 scuffed（adj）磨损的 damage（n）损害；损毁；赔偿金；（vt）损害，毁坏；（vi）损害；损毁 shattered（adj） 破碎的；极度疲劳的；（v）打碎；削弱；使心烦意乱 You must understand that and strive for balance in your life. balance（n）平衡；余额；匀称；（vt）使平衡；结算；使相称；（vi）保持平衡；相称；抵销 strive（vi）努力；奋斗；抗争 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:5:2","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text B It seems lately that more and more of my friends are facing some seemingly insurmountable challenges in their lives. seemingly(n)外表，表象；（adj）表面上的；看似……的 insurmountable（adj）不能克服的；不能超越的；难以对付的 A few have lost their jobs and some have failed marriages. All too many have health issues or are battling cancer. marriage（n）结婚；婚姻生活；密切结合，合并 issue（n）问题；流出；期号；发行物；（vt）发行，发布；发给；放出，排出；（vi）发行；流出；造成…结果；传下 battle（n）战役；斗争；（vi）斗争；作战；（vt）与…作战 cancer（n）癌症；恶性肿瘤 I don’t know if it is desperation that causes them to turn to me for advice or whether they have come to value our friendship. desperation（n）绝望的境地；不顾一切拼命 But it is difficult, to say the least, to offer words of hope when all they feel is hopelessness. hopelessness（n）绝望，无望；不抱希望 They expect answers, some magic waving of a wand, or a roadmap to get them back on their feet again. roadmap（n）路标 Yes, even those who were quick to quote the Bible to me found me quite unreceptive at the time. unreceptive（adj）不会接受的；反应不快的；接受能力不强的 Now, as an inspiration writer, being thought of as a resource of hope or a good (or bad)example of what to do in life, I have even more people contacting me. inspiration（n）灵感；鼓舞；吸气；妙计 I imagine in the darkest hours of one’s life those words would seem useless or uncaring. But it is indeed the answer. darkest（n）最黑暗的 uncaring（adj）心不在焉的，不注意的 A job loss presents an opportunity to start over somewhere else and maybe even in another career. present（adj） 现在的；出席的；（事物）存在的；正在考虑的；现在时（态）的；（n）礼物；现在，目前；（动词）现在式；（举枪的）瞄准；（v）颁发；赠送；提出；展现；使发生；描述；出现；主持（节目）；上演；介绍；出席；表达；提交（支票或账单）；致谢；（教堂）向主教推荐已被委任的牧师就任；向法院正式提交；举枪瞄准 ；（疾病）症状显露 career（n） 生涯；职业；事业；速度，全速；（adj）作为毕生职业的；（vi）全速前进，猛冲 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:5:3","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B Walt Disney said “All our dreams can come true, if we have the courage to pursue them. courage（n）勇气；胆量 purse（n） (女士)手提袋；(国家、家庭、团体等的) 财力；（vt）嘴巴）皱起，使缩拢；撅嘴 Though obstacles will arise and moments of fear and doubt may wish to discourage,a dream to succeed becomes a reality with persistence and determination. obstacle（n）障碍，干扰，妨碍；障碍物 arise（vi）出现；上升；起立 persistence（n） 持续；固执；存留；坚持不懈；毅力 For without action the dream will remain dormant and unfulfilled. dormant（adj）休眠的；静止的；睡眠状态的；隐匿的 unfulfilled（adj）未满足的，未实现的；壮志未酬的 If you ask any famous entrepreneur how they got where they are today, they would tell you by being persistent. entrepreneur（n）企业家；承包人；主办者 The best thing about failure is that it becomes an ingredient in the end result of a fulfilled dream. ingredient（n）原料；要素；组成部分；（adj）构成组成部分的 result（n）结果；成绩；答案；比赛结果；（vi）结果；导致；产生 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:5:4","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Tips for English Learning Where you only need the shallowest knowledge of a subject, you can skim material. shallowest（adj） 最浅的 material（n）材料；用具；（有指明特征的）人才；素材；曲目；布料；（adj）物质的；身体需要的；和推理内容有关的；重要的；（证据或事实）决定性的；客观存在的；物欲的 It’s not essential to understand each word when skimming. essential（adj）基本的；必要的；本质的；精华的；（n）本质；要素；要点；必需品 skim（v）（从液体表面）撇去（浮物）；（非正式）（尤指一段时间内）挪用（小数额钱）；掠过；擦过（表面）；用（扁石）打水漂；略读；盗用（信用卡电子信息）；（n） 液体上的表层物；浏览；侧录，滑卡；掠过；脱脂品（尤指脱脂奶）；（adj） 脱脂的；撇去浮沫的 If you need a moderate level of informatic on a subject, then you can scan the text. moderate（adj）稳健的，温和的；适度的，中等的；有节制的；（vi）变缓和，变弱；（vt）节制；减轻 Informatic（n）信息学；情报学 scan（vt）扫描；浏览；细看；详细调查；标出格律；（vi）扫描；扫掠；（n） 扫描；浏览；审视；细看 You can then speed read the contents of the chapters, picking out and understanding key words and concepts. chapter（n）章，回；（俱乐部、协会等的）分会；人生或历史上的重要时期；（vt）把…分成章节 concept（n）观念，概念 This gives you an understanding of its structure, into which you can then fit the details gained from a full reading of the material. structure（n）结构；构造；建筑物；（vt）组织；构成；建造 detail（）细节，琐事；具体信息；次要部分；分队，支队；（vt） 详述；选派；（vi） 画详图 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:5:5","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Unit 6 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:6:0","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text A School-going children need pocket money for food, stationery and bus fares. pocket（n）口袋；钱；容器；（vt）隐藏；忍受；将…放入衣袋；（vi） 形成袋或囊；（adj）小型的，袖珍的；金钱上的 stationery（n）文具；信纸 fare（n）（乘客支付的）公共交通费；（交通工具，尤指出租车的）乘客；（尤指某种类型的）食品；供大众使用的东西；（v）特定情况或时期内以某种方式）做，干；发生；结果是；出游 Children usually use the pocket money to buy food during recess and also at lunch hour if they have school activities in the afternoon. recess（n）休息；休会；凹处；（vt）使凹进；把…放在隐蔽处；（vi）休息；休假 As the money is limited, they have to control their spending. control（n）控制；管理；抑制；操纵装置；（vt）控制；管理；抑制 Some parents choose this method of allocating pocket money in order to prevent their children from overspending, hoping that in time they can be trusted with larger sums of money. method（n）方法；条理；类函数；（adj）使用体验派表演方法的 allocating（n）分配；（vt） 配置 overspending（n）超支；（v）超支；花费过多；过度花费 trusted（adj）可信的，可靠的；（v）信任，信赖；相信，认为可靠；委托，托付；依靠（运气、命运等无法控制的东西）；想，希望 Parents who earn daily wages may also opt for this due to financial constraints. opt（vi）选择； financial（adj）金融的；财政的，财务的； due（adj）到期的；预期的；应付的；应得的；（n）应付款；应得之物 constraint（n）约束；局促，态度不自然；强制 Giving pocket money on a daily basis places responsibilities of budgeting on the parents. instead of the child. responsibility（n） 责任，职责；义务 basis（n）基础；底部；主要成分；基本原则或原理 budget（n） 预算，预算费；（vt） 安排，预定；把…编入预算；（vi）编预算，做预算；（adj） 廉价的 The child may spend every single cent of the daily pocket money by overindulging in junk food, as they know they will get another sum of money the next day. single（adj）单一的；单身的；单程的；（n）一个；单打；单程票；（vi）击出一垒安打；（vt）选出 overindulging（v）过多地享用（饮食）；过分放任，娇惯 They may develop the mentality that money is meant to be spent. mentality（n）心态；[心理] 智力；精神力；头脑作用 They borrow from their siblings or their classmates when they feel like indulging themselves, Then they may ask for money to pay off their debts. sibling（n）兄弟姊妹；民族成员 indulging（v）使……沉溺，沉迷；纵容，放纵； 满足（欲望、兴趣等）；参加，参与（尤指违法活动） In such instances, the purpose of rationing is defeated. instance（n）实例；情况；建议；（vt）举…为例 purpose（n）目的；用途；意志；（vt）决心；企图；打算 ration（vt）配给；定量提供；（n）定量；口粮 defeated（v）击败，挫败；（adj）被击败的；受挫的，泄气的 Some parents go by the “learning by doing’” principle and give their children lump sums at the beginning of the month, and by the third week of the month their account is already dry. principle（n）原理，原则；主义，道义；本质，本义；根源，源泉 This habit, when inculcated since young, stands them in good stead when they start working and earning their own money. It enables them to resist the temptation of “buy now and pay later\"schemes. inculcate（vt）教育；谆谆教诲；教授；反复灌输 stead（n）代替；用处 earn（vt）赚，赚得；获得，挣得；使得到；博得 resist（n）抵抗；抗拒；反抗；抵御 temptation（n）引诱；诱惑物 scheme（v）计划；组合；体制；诡计；（vi）搞阴谋；拟订计划；（vt）计划；策划 They need to learn the importance of budgeting right from kindergarten days. kindergarten（n）幼儿园；幼稚园 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:6:1","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B Whether or not children are allowed to handle their own pocket money, parents and stepparents will surely be budgeting a certain amount of cash for their children’s everyday needs and wants. stepparent（n）继母；继父 One is for immediate spending, one for short term savings (outings, video games, etc.) and the third is for long term savings (a car, college, etc.). immediate（adj）立即的；直接的；最接近的 In some families, they add a fourth category, which is for donating, teaching children the value and importance of helping those less fortunate. category（n）种类，分类；[数] 范畴 fortunate（adj）幸运的；侥幸的；吉祥的；带来幸运的 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:6:2","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text B all rich people are greedy. greedy（adj）贪婪的；贪吃的；渴望的 well, how do you expect to become a success financially if you beliease things? financially（adv）财政上；金融上 First of all, believing that “money doesn’t grow on trees” is an example of what’s called lack or scarcity programming. scarcity（n） 不足；缺乏 Our parents taught us that there was never enough money to go around, and that it was not readily available or abundant. readily（adv）容易地；乐意地；无困难地 abundant（adj） 丰富的；充裕的；盛产 available（adj）可获得的；可购得的；可找到的；有空的 What wonderful things you could do with it: travel to the countries you have always dreamt of, buy a house you are even scared to think about, attend meditation classes so you could spiritually grow, donate money to your favorite charity, spend more quality time with your family, and the list goes on. attend（vt）出席；上（大学等）；照料；招待；陪伴；（vi）出席；致力于；照料；照顾 meditation（n）冥想；沉思，深思；静坐 spiritually（adv）在精神上地 donate（vt）捐赠；捐献；（vi）捐赠；捐献 charity（n） 慈善；施舍；慈善团体；宽容；施舍物 quality（n）质量，[统计] 品质；特性；才能；（adj）优质的；高品质的 Unless you have a desire to be an evil person, your subconscious will not let you have money if you believe deep down that it is the root of all evil. evil(adj)邪恶的；不幸的；有害的；讨厌的;(n)罪恶，邪恶；不幸 subconscious（adj）潜意识的，下意识的；（n）下意识（心理活动），潜意识（心理活动） It was originally stated as\"the love of money is the root of all evil”. originally（adv） 最初，起初；本来 You can stimulate the economy with money. stimulate（vt）刺激；鼓舞，激励；（vi） 起刺激作用；起促进作用 economy（n）经济；节约；理财 The amount of money you have has nothing to do with these character traits. amount（n）数量，数额；总数；（感情、特质的）程度；（v）总计，合计；等于，相当于；发展成，变成 character（n）性格，品质；特性；角色；[计] 字符；（vt） 印，刻；使具有特征 trait（n）特性；特点；品质； Having a giving attitude opens up a flow of money that often brings them more. attitude（n） 态度；看法；意见；姿势 flow（v） （使）流动，涌流；流通；传播；流畅；充满；大量供应；涨；涨潮；川流不息；飘扬；来自，由……产生；来月经；（矿物、岩石等）变形；（n）流动；生产，供应；车流；流量；传播；流通；滔滔不绝；连贯，流畅；涨潮；泛滥；（苏格兰）湿地，沼泽；月经 The world needs to be a balance of give and take, and being joyful both as you give and receive will ensure that you always go with the flow. balance（n）平衡；余额；匀称；（vt） 使平衡；结算；使相称；（vi） 保持平衡；相称；抵销 joyful（adj）欢喜的；令人高兴的 receive（vt）收到；接待；接纳；（vi）接收 ensure（vt） 保证，确保；使安全 And changing your mindset from what you were taught as a child to a healthier view of money will allow you to become the financial success you deserve to be, to become the real you. mindset（n）心态；倾向；习惯；精神状态 view（n）观察；视野；意见；风景；（vt）观察；考虑；查看 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:6:3","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B So they can do anything, even immoral and illegal things in order to have money. immoral（adj）不道德的；邪恶的；淫荡的 Robbers are ready to kill others cruelly for merely dozens of dollars. robber（n）强盗；盗贼 cruelly（adv）残酷地；非常 dozen（n）十二个，一打；（adj）一打的 Traders are ready to cheat in commerce to appropriate more money. commerce（n）贸易；商业 appropriate（adj）适当的；（vt）占用；拔出 Officials themselves, who have much power and influence on society,trample on their honour and others’interests. officials（adj） 官方的；正式的；公务的；（n） 官方的；正式的；公务的 influence（n）影响；势力；感化；有影响的人或事；（vt）影响；改变 society（n） 社会；交往；社团；社交界 trample（vt）践踏；蔑视，伤害；（vi）践踏；蔑视，伤害；脚步沉重地走；（n）蹂躏；践踏声 honour（n）荣誉；尊敬；勋章；（vt）尊敬；[金融] 承兑；承兑远期票据 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:6:4","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Tips for English Learning You can get the general idea of it. general（adj）一般的，普通的；综合的；大体的；（n）一般；将军，上将；常规 Then you pay attention to the first and last sentence of every paragraph of the passage. sentence（n）句子，命题；宣判，判决；（vt）判决，宣判 paragraph（n）段落；短评；段落符号；（vt）. 将…分段 Finally, note the style and tone in order to get the writer’s implication in meaning. tone（n）语气；色调；音调；音色；（vt）增强；用某种调子说；（vi）颜色调和；呈现悦目色调 implication（n）含义；暗示；牵连，卷入；可能的结果，影响 Reading is a fantastic way to learn new vocabulary. fantastic（adj）奇异的；空想的；异想天开的；古怪的；极好的，极出色的；不可思议的；不切实际的；（n）古怪的人 Use graded readers. graded（n） 年级；等级；成绩；级别；阶段；（vt）评分；把…分等级；（vi）分等级；逐渐变化 These end to have questions designed to test comprehension of what you have just read. design（n）设计；构思；设计图样；装饰图案；打算；（v）设计，构思；计划；制造，意欲 comprehension（n）理解；包含 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:6:5","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Unit 7 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:7:0","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text A While on the train I would always choose a seat away from the crowd so can read the newspaper in peace and quiet. seat（n）座位；所在地；职位；（vt）使…坐下；可容纳…的；使就职 peace（n） 和平；平静；和睦；秩序 At work I am always being bombarded with questions from coworkers, suppliers the telephone and then those dreaded meetings. so the last thing need is some stranger to sit beside me and make small talk. bombarded（v） 轰炸；炮击；向…连续提问题；（adj） 被轰击的；频频不断的 coworker（n）同事；合作者 supplier（n） 供应厂商，供应国；供应者 dreaded（v）惧怕，担心；敬畏；（n）恐惧，可怕的人（或物）；（鸟群的）惊飞，惊起；将头发编成“骇人”发型的人；（adj） 可怕的；令人敬畏的 With hesitation I sat down in the only seat available beside a middle-aged man who had his head down and seemed to be lost in h thoughts. hesitation（n）犹豫 available（adj）可获得的；可购得的；可找到的；有空的 I was glad that he didn’t notice when I sat next to him as he just continued to look down towards the floor. continued（adj）继续的；持久的；（v）继续；逗留；维持原状 I tried to ignore the voice, as there was no way I was starting a conversation with a complete stranger. conversation（n）交谈，会话；社交；交往，交际；会谈；（人与计算机的）人机对话 compete（vi）竞争；比赛；对抗 As you probably guessed, I eventually broke down and came up with an excuse to ask him a question. eventually（adv）最后，终于 excuse（n）借口；理由；拙劣样品；假条；（v）原谅；为……申辩；准许……离开；给……免去；作为借口；请求宽恕 When he raised his head and turned his eyes towards me I could see that he must have been really upset as he had red eyes and still had some tears rolling down the side of his face despite his feeble attempt to wipe them away. tear（v）撕掉，扯下；撕破；拔掉；拉伤；（非正式）狂奔；饱经……摧残；流眼泪；（n）眼泪；（撕破的）洞或裂缝， 撕扯 roll（v）滚动；翻身；（眼睛）转动；在原地打滚；（马）仰卧蹬脚；左右摇晃；蹒跚；使翻车；掷（骰子）；掷出（骰子数）；（转动）肩膀；行驶；推；摇车窗；（液体）滚落；（时间）流逝；稳定持续的；（产品）从（机器）产出；涌流；延绵起伏；运转；卷，卷起；展开；搓成；辗；发出隆隆声；把（衣服的边）卷起来；压平；覆盖；启动；用颤音发出（辅音，尤其是 r）；（n）卷；柱形物；卷状食品；滚动；翻筋斗；左右摇晃；隆隆声；小面包；总人数；名单；公文；延绵起伏；辊轧机；一管；掷骰子 feeble（adj）微弱的，无力的；虚弱的；薄弱的 attempt（n）企图，试图；攻击；（vt）企图，试图；尝试 wipe（vt）擦；消除；涂上；（vi）擦；打；（n）擦拭；用力打 I can’t describe the sadness I felt seeing someone in so much pain. describe（vt）描述；形容；描绘 sadness（n）悲哀；悲伤，悲痛；使人悲伤的事 Several weeks had passed when I noticed an envelope on my desk after returning from lunch. several（adj）几个的；各自的 envelope（n）信封，封皮；包膜；[天] 包层；包迹 My receptionist attached a note saying a gentleman dropped it off saying he did not know my name but had described me well enough that the receptionist knew it was for me. reception（n）接待；接收；招待会；感受；反应 attach（vt）使依附；贴上；系上；使依恋；（vi）附加；附属；伴随 gentleman（n）先生；绅士；有身份的人 When I read the note inside the envelope I was so filled with emotions that I couldn’t contain myself. It was a letter from the man I met on the train thanking me again for talking to him and saving his life that day. emotion（n） 情感；情绪 Apparently he had some very hurtful personal problems that were so overwhelming that he was planning to take his own life that day. personal（adj） 个人的；身体的；亲自的；（n）人事消息栏；人称代名词 overwhelming（adj）压倒性的；势不可挡的；（v）压倒，淹没，制服 hurtful（adj）伤感情的，伤自尊的；造成损害的 In his letter he went on to explain that he was a religious person and in desperation screamed out to God that if God really cared about him he would send someone to prevent him from taking his own life. religious（adj）宗教的；虔诚的；严谨的；修道的；（n）修道士；尼姑 desperation（n）绝望的境地；不顾一切拼命 scream（vi）尖叫；呼啸；发出尖锐刺耳的声音；令人触目惊心；（vt）尖声喊叫；大叫大嚷着要求；（n）尖叫声；尖锐刺耳的声音；极其滑稽可笑的人 You just may make a difference in someone’s’ life when you listen to your inner voice. inner（adj）内部的；内心的；精神的；（n）内部 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:7:1","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B Sometimes the promptings of our inner voice are subtle, reminding us to pay bill or call a friend. subtle（adj） 微妙的；精细的；敏感的；狡猾的；稀薄的 remind（vt）提醒；使想起 bill（n）法案；广告；账单；[金融] 票据；钞票；清单；（vt）宣布；开账单；用海报宣传 Other times our inner voice can be more insistent,reminding us over and over of some unfinished business for perhaps days, weeks or even years. insistent（adj） 坚持的；迫切的；显著的；引人注目的；紧急的 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:7:2","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text B At a dinner party in New York, one of the guests, a woman who had inherited money was eager to make a pleasing impression on everyone. guest（n）客人，宾客；顾客；（vt）款待，招待；（vi）作客，寄宿；（adj） 客人的；特邀的，客座的 inherit（vt） 继承；遗传而得；（vi）成为继承人 eager（adj）渴望的；热切的；热心的 She had squandered a modest fortune on sables, diamonds and pearls. squander（vt）浪费；（vi）浪费；漂泊； （n）浪费 modest（adj）谦虚的，谦逊的；适度的；端庄的；羞怯的 fortune（n）财富；命运；运气；（vt）给予财富；（vi）偶然发生 sable（n）黑貂；丧服；（adj）黑的；黑暗的 diamond（n）钻石，金刚石；菱形；方块牌；（adj）菱形的；金刚钻的 pearls（n）珍珠；（v）用珍珠镶嵌；使…呈珍珠色泽 But she hadn’t done anything whatsoever about her face. It radiated sourness and selfishness. whatsoever（adj’）什么；多么；何等；（adv）到什么程度，在哪一方面 radiate（vt）辐射；传播；流露；发射；广播；（vi）辐射；流露；发光；从中心向各方伸展；（adj）辐射状的，有射线的 sourness（n）酸味；性情乖僻；坏心眼 selfishness（n）自私自利；自我中心；任性 I am glad to see you. glad（adj）高兴的；乐意的；（vt）使……高兴 Have you ever been in a doctor’s waiting room and looked around at all the glum faces waiting impatiently to be seen? glum（adj）忧郁的；死气沉沉的 impatiently（adv）无耐性地 Dr. Stephen K. Sproul, a veterinarian in Raytown, Missouri,told of a typical spring day when his waiting room was full of clients waiting to have their pets inoculated. veterinarian（n）兽医 typical（adj）典型的；特有的；象征性的 client（n）客户；顾客；委托人 inoculate（vt） 接种；嫁接；灌输 As luck would have it, she sat down next to a gentleman who was more than a little distraught about the long wait for service. distraught（adj）发狂的；心烦意乱的 Soon he struck up a conversation with the woman about her baby and his grandchildren, and soon the entire reception room joined in, and the boredom and tension were converted into a pleasant and enjoyable experience. struck（v）罢工；打击，撞击；（adj）受罢工影响的 grandchildren（n） 孙子；孙（女），外孙（女） reception（n）接待；接收；招待会；感受；反应 boredom（n）厌倦；令人厌烦的事物 tension（n）张力，拉力；紧张，不安；电压；（vt） 使紧张；使拉紧 convert（vt）使转变；转换…；使…改变信仰；（vi）转变，变换；皈依；改变信仰；（n） 皈依者；改变宗教信仰者 enjoyable（adj）快乐的；有乐趣的；令人愉快的 and they had a proverb that you and I ought to cut out and paste inside our hats. It goes like this, proverb（n）谚语，格言；众所周知的人或事 Your smile brightens the lives of all who see it. brighten（vi）明亮；变亮；活跃；快乐高兴；（vt）使闪亮；使生辉；使快乐高兴； ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:7:3","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B It enriches those who receive, without impoverishing those who give. impoverishing（vt）使贫穷；使枯竭 None are so rich that they can get along without it, and none so poor but are richer for its benefits,. benefit（n）利益，好处；救济金；（vt）有益于，对…有益（vi）受益，得益 It creates happiness in the home, fosters goodwill in a business, and is the countersign of friends,. countersign（v）副署，会签（文件）；（n） 副署，会签；应答口令，应答信号 And if in the last-minute rush of Christmas buying some of our salespeople should be too tired to give you a smile, may we ask you to leave one of yours? salespeople（n）推销员；[贸易] 售货员；店员 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:7:4","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Tips for English Learning When you concentrate on separate words you often miss the overall concept of what is being said. concentrate（vi）集中；浓缩；全神贯注；聚集；（vt） 集中；浓缩；（n） 浓缩，精选；浓缩液 separate（adj）分开的；单独的；不同的；各自的；不受影响的；（v）（使）分离，分开；隔开；分手；（使）分居；（使）区别（于）；（n） 可搭配穿着的单件衣服；抽印本；独立音响设备；土壤划分 concept（n）观念，概念 People who read each word as a distinct unit comprehend less than those who read faster by “chunking” words together in blocks. comprehend（vt）理解；包含；由…组成 chunk（n） 大块；矮胖的人或物 Effective reading involves reading blocks of words at one time and comprehending the meaning of the word group . involves（v）包含；牵涉（ effective（adj）有效的，起作用的；实际的，实在的；给人深刻印象 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:7:5","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Unit 8 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:8:0","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text A Born in 1982 in Melbourne, Australia, without any medical explanation or warning Nicholas Vujicic came into the world with neither arms nor legs. medical（adj）医学的；药的；内科的；（n）医生；体格检查 explanation（n）说明，解释；辩解 Having had an uneventful pregnancy and no family history to expect this condition, imagine the shock his parents felt when they saw their first born, brand new baby boy, only to find he was what the world would consider imperfect and abnormal. pregnancy（n）怀孕；丰富，多产；意义深长 condition（n） 条件；情况；环境；身份；（vt）决定；使适应；使健康；以…为条件 shock（n）休克；震惊；震动；打击；禾束堆；（vi）感到震惊；受到震动；堆成禾束堆；（vt）使休克；使震惊；使震动；使受电击；把…堆成禾束堆；（adj） 浓密的；蓬乱的 brand（n）品牌，商标；类型；烙印；（独特的）个性；烙铁；污名；燃烧的木头；（诗、文中的）剑 imperfect（adj）有缺点的；未完成的；半过去的；未完成时的；（adv）有瑕疵地；有缺点地；（n）未完成体 abnormal（adj） 反常的，不规则的；变态的 What could he ever do or become when living with what the world would see as such a massive disability? massive（adj）大量的；巨大的，厚重的；魁伟的 disability（n）残疾；无能；无资格；不利条件 Little did they know that this beautiful limbless baby would one day be someone who would inspire and motivate people from all walks of life, touching lives all over the world. limbless（adj） 无肢的；无枝叉的；无翼的 inspire（vt）激发；鼓舞；启示；产生；使生灵感 motivate（v） 刺激，使有动机，激发…的积极性；成为……的动机；给出理由；申请 He adapted to his situation and found ways to accomplish tasks that most people could only do by using their limbs, such as cleaning teeth, brushing hair,typing on a computer, swimming, playing sports, and much more. adapted（adj）适合的；（v） 使适应，改编 situation（n）情况；形势；处境；位置 accomplish（vt）完成；实现 limb（n） 肢，臂；分支；枝干；（vt）切断…的手足；从…上截下树枝 brush（n）刷子；画笔；毛笔；争吵；冲突；灌木丛地带；矮树丛；狐狸尾巴；（vt）刷；画；（vi）刷；擦过；掠过；（经过时）轻触 As time went by. Nick began to embrace his situation and achieve greater things. embrace（vt）拥抱；信奉，皈依；包含；（vi） 拥抱；（n） 拥抱 greater（adj）较大的 In grade seven Nick was elected captain of his school and worked with the student council on various fund-raising events for local charities and disability campaigns. elected（v） 选举，推选；决定做……，选择做…… captain（n）队长，首领；船长；上尉；海军上校；（vt） 指挥；率领 council（n）委员会；会议；理事会；地方议会；顾问班子 various（adj）各种各样的；多方面的 charities（n） 慈善机构；宽大 campaign（n）运动；活动；战役，军事行动；竞选；（v）领导或参加运动；参加竞选 After school Nick went on with further study and obtained a double bachelor degree majoring in accounting and financial planning. further（adv） 更远地；远非（如此）；进一步地；而且；处于更高阶段；（adj） 更多的，附加的；更远的；进一步的，深一层的；（v）促进，增进，助长 obtain（vi）获得；流行；（vt） 获得 bachelor（n)学士；单身汉；（尚未交配的）小雄兽 degree（n）程度，等级；度；学位；阶层 financial（adj）金融的；财政的，财务的 By the age of 19. Nick had started to fulfill his dream of encouraging others by sharing his story through motivational speaking. fulfill（vt） 履行；实现；满足；使结束 encouraging（adj） 令人鼓舞的；鼓励的，奖励的；（v）鼓励，支持 sharing（n）公用，共享；（v）分享；分担 motivational（adj）动机的；激发性的；有关动机的；动机说明 He found the purpose of his existence, and also the purpose in his circumstance. purpose（n）目的；用途；意志；（vt）决心；企图；打算 existence（n）存在，实在；生存，生活；存在物，实在物 circumstance（n） 环境；状况；境遇；（尤指）经济状况；命运；（vt）处于某种情况 Nick wholeheartedly believes that there is a purpose in each of the struggles we encounter in our lives and that our attitude towards those struggles can be the single most effective factor in overcoming them. wholeheartedly（adv）全心全意地，全神贯注地 struggle（v） 奋斗；艰难地行进；斗争；搏斗；争夺；挣扎成名；（n）斗争；冲突；使劲；奋斗；难事 encounter（v） 遭遇；邂逅；遇到；（n）遭遇；偶然碰见 overcoming（n）克服 Nick recently made the massive move from Brisbane, Australia to California, USA, where he is the president of an international non-profit organization, and also has his own motivational speaking company Attitude Is Altitude’. president（n）总统；董事长；校长；主席 international（adj）国际的；世界的；（n）国际比赛；国际性组织 organization（n）组织；机构；体制；团体 Since his first motivational speaking engagement back when he was 19 Nick has traveled around the world sharing his story with millions of people, speaking to range of different groups such as students, teachers, youth,business men and women, entrepreneurs, and church congregations of all sizes. engagement（n）婚约；约会；交战；诺言；进场（游戏术语） traveled（adj）旅行富有经验的 entrepreneur（n） 企业家；承包人；主办者 congregation（n） 集会；集合；圣会 Nick shares with his audiences the importance of vision and dreaming big. audience（n）观众；听众；读者；接见；正式会见；拜会 import","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:8:1","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B But then again, we should also know that problems are just another bitterness in life trying to twist the personage in each of us and corrupt our perceptions about life. bitterness（n）苦味；苦难；怨恨 personage（n）要人；角色；名士 corrupt（adj）腐败的，贪污的；堕落的；（vt）使腐烂；使堕落，使恶化；（vi）堕落，腐化；腐烂 perception（n） 认识能力；知觉，感觉；洞察力；看法；获取 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:8:2","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text B Jobs followed his dream and led a revolution in the computing world. revolution（n） 革命；旋转；运行；循环 His biological mother was an unwed graduate student named Joanne Simpson and decided to put him up for adoption. biological（adj） 生物的；生物学的 unwed（adj）未婚的；没有结婚的 adoption（n）采用；收养；接受 Unfortunately, the candidates, Paul and Clara Jobs, did not meet her expectations: Clara didn’t graduate from college and Paul only attended high school. candidate（n）候选人，候补者；应试者 graduate（n）大学毕业生；毕业生 expectation（n） 期待；预期；指望 At20, Steve Jobs and friend(Steve Wozniak) started company in garage on Apri1 Later that year, they debuted the Apple I and a local store offered to buy 50 machines. debuted（n） 初次登台；开张；（vi） 初次登台； machine（n）机械，机器；机构；机械般工作的人；（vt）用机器制造 To finance the production, they had to sell their most expensive possessions. finance（n）财政，财政学；金融；（vt）负担经费，供给…经费；（vi）筹措资金 production（n）成果；产品；生产；作品 possession（n）拥有；财产；领地；自制；着迷 Steve Jobs named their company Apple, in memory of happy summer he had spent as an orchard worker in Oregon. memory（n）记忆，记忆力；内存，[计] 存储器；回忆 orchard（n）果园；果树林 By 1982, however, his company sales sagged in the face of competition from IBM’s new PC. sagged（adj）下垂的；凹陷的；（v）下垂；下降 Not wanting to dwell on successive failures, they worked on a new machine called the Macintosh. successive（adj） 连续的；继承的；依次的；接替的 By 1986, the Mac, which Steve Jobs promised to be “insanely great” was huge success. promised（n）预示；答应 At 30, Steve Jobs, however, was fired from the company he cofounder with Steve Wozniak. cofounder（n）共同创办人 He left the company after losing bitter battle over control with Apple’s CEO John Sculley, whom Jobs had recruited from Pepsi Cola. When Steve Jobs heard of the message he said recruit（v） 征募；聘用；通过招募组建；补充；（n）招聘；新兵；新成员 You’ve probably had somebody punch you in the stomach and it knocks the wind out of you and you cannot breathe. stomach（n）胃；腹部；胃口；（vt）忍受；吃下；（vi）忍受 cannot（v）不能；无法 breathe（vi） 呼吸；低语；松口气；（风）轻拂；（vt）呼吸；使喘息；流露；低声说 Steve Jobs sold over $20 million of his Apple stock, spent days bicycling along the beach,feeling sad and lost, toured Paris, and journeyed on to Italy. journey（n） 旅行；行程 Recalling this publicly heartbreaking episode. recalling（v）回想起；使想起，勾起；召回；回收（残次品）；使恢复；使重新集中注意力；回索（计算机储存数据）；撤销，废止（行动） publicly（adv）公然地；以公众名义 heartbreaking（adj）悲伤或失望到难忍程度的；令人悲伤的 … episode（n） 一段经历；插曲；一段情节；（电视连续剧或广播的）一集；插话；有趣的事件 The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. heaviness（n）沉重；迟钝；笨拙 Jobs became an instant billionaire. instant（adj）立即的；紧急的；紧迫的；（n）瞬间；立即；片刻 billionaire（n） 亿万富翁 Meanwhile, his old company Apple was under immense pressure from its rival Microsoft and in 1996 posted billions of dollars in losses. immense（adj）巨大的，广大的；无边无际的；非常好的 meanwhile（adv） 同时，其间；（n）其间，其时 rival（n）竞争对手；可与……匹敌的人；同行者；（v） 与…竞争；比得上某人；赶上（某人）；竞争;（adj）竞争的 In December 1996, Steve Jobs convinced Apple to buy NeXT and make its software the foundation of the next-generation Mac OS The technology he developed at NeXT became the catalyst of Apple’s comeback. Initially appointed as Apple’s adviser, Steve Jobs was named Apple’s interim CEO in 1997. convince（vt）说服；使确信，使信服 software（n）软件 initially（adv）最初，首先；开头 comeback（n）恢复，复出；再度流行；迅速反驳；追究……责任；回交羊 interim（adj）临时的，暂时的；中间的；间歇的；（n）过渡时期，中间时期；暂定 He had made Apple healthy again and returned it to a place where it was contributing new and innovative technologies to the computer world. contributing（adj）贡献的；起作用的；（v）捐献 innovation（n）创新，革新；新方法 Under his leadership, Apple retumed to profitability and introduced innovations. leadership（n）领导能力；领导阶层 profitability（n）盈利能力；收益性；利益率 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:8:3","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B While still in high school, Jobs’ interest in electronics prompted him to call William Hewlett to ask for some parts for a school project. electronics（n）电子学；电子工业 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:8:4","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Tips for English Learning Subvocalization is the habit of pronouncing each word in your head as you read it. subvocalization（n）不出声的说话；默读 pronouncing（adj）发音的；表示发音的；（v）发音；（庄严地）宣布 This takes much more time than is necessary because you can comprehend a word much quicker than you can say it. comprehend（vt） 理解；包含；由…组成 You have to practise and practise this until this bad habit is erased. erased（adj）（用锯齿状线表示）断掉的；被清除的；（v）抹去；删除；擦掉（字迹）；消灭 Eliminating subvocalization alone can increase your reading speed by an astounding amount. eliminating（adj）排除的；（v）消除 astounding（adj）令人震惊的；令人惊骇的 If you can train yourself to simply scan the words without thinking about the pronunciation, you will increase your speed significantly. significantly（adv）意味深长地；值得注目地 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:8:5","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Unit 9 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:9:0","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text A Life may give you negative, but don’t’ despair- it may just develop into beautiful picture one day. negative（adj）负的；消极的；否定的；阴性的；（n）否定；负数；[摄] 底片；（vt）否定；拒绝 Since I run the 300m hurdles, would know what the race is like. hurdle（n）障碍；栏；跳栏；（vt）克服；（vi）克服；跳过 This relates to worrying about the petty things in life. relate（vt）叙述；使…有联系；（vi）涉及；认同；符合；与…有某种联系 This symbolizes that at times in everyone’s lives we worry about fitting in or being the same as other people, instead of worrying about being unique. symbolize（vt）象征；用符号表现；（vi）采用象征；使用符号；作为…的象征 fit（vt）安装；使……适应；使……合身；与……相符；（vi） 符合，配合；适合；合身（adj） 健康的；合适的；恰当的；准备好的；（n）合身；发作；痉挛 unique（adj）独特的，稀罕的；[数] 唯一的，独一无二的；（n）独一无二的人或物 Yard by yard, life is very hard. But inch by inch, life can be a cinch. yard（n）院子；码（英制中丈量长度单位，1码=3英尺）；庭院；帆桁；（vt）把…关进或围在畜栏里 cinch（n）非正式）极其容易做的事情；必定的事；马鞍肚带；五个王牌排最大的纸牌游戏；（v）用带子系（衣服）；用肚带系紧（马鞍）；给（马）系上肚带；（非正式）确保 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:9:1","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B These fears and self-doubts determine the way we interact and behave at work. interact（vt）互相影响；互相作用；（vi） 互相影响；互相作用；（n）幕间剧；幕间休息 The workplace is a ruthless arena. ruthless（adj）无情的，残忍的； arena（n）舞台；竞技场 You need to be your own bodyguard. bodyguard（n）保镖 To survive this race, you’ve got to be independent, responsible confident and determined. independent（adj）独立的；单独的；无党派的；不受约束的；（n） 独立自主者；无党派者 responsible（adj）负责的，可靠的；有责任的； confident（adj）自信的；确信的 Above all, you need to value yourself and realise you’re all you’ve got! realise（vt）认识到，明白 Getting ahead in any profession requires faith in oneself. ahead（adv）朝前地，在前面；提前地；领先；（为进步而）向前地；（数量或价值上）更多，更高；将来；获得成功；占优势；（adj）在前的，领先的；提前的 require（vt）需要；要求；命令 faith（n）信仰；信念；信任；忠实 That is why you find some people with mediocre talent, but with great inner drive, achieving much more than people with vastly superior talent. mediocre（adj）普通的；平凡的； talent（n）才能；天才；天资 inner（adj）内部的；内心的；精神的；（n） 内部 vastly（adv）非常，极其；极大地，广大地；深远地 superior（adj）上级的；优秀的，出众的；高傲的；（n） 上级，长官；优胜者，高手；长者 On the other hand, negative attitudes, full of fear, doubt and worry, reinforce negative behaviour. reinforce（vt）加强，加固；强化；补充；（vi）求援；得到增援；给予更多的支持；（n）加强；加固物；加固材料 behaviour（n）行为；习性；运行状况 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:9:2","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text B On Nov. 18, 1995, Itzhak Perlman’, the violinist, came on stage to give a concert at Avery Fisher Hall at Lincoln Center’in New York City. violinist（n） 小提琴演奏者，小提琴家 If you have ever been to a Perlman concert, you know that getting on stage is no small achievement for him. concert（n）音乐会；一致；和谐；（adj）音乐会用的；在音乐会上演出的；（vt）使协调；协同安排；（vi）协调；协力 achievement（n）成就；完成；达到；成绩 He was stricken with polio as a child, and so he has braces on both legs and walks with the aid of two crutches. stricken（adj）患病的；受挫折的；受…侵袭的；遭殃的 polo（n）马球；水球 brace（v）使做准备；抵住；绷紧；支撑；加固；（n）夹子；支架；牙箍；背带（常复数）；大括号；（ 猎获的鸟或兽）一对，一双；曲柄；连谱号；（船上的）转帆索 crutches（n）拐杖，支撑物；叉状架 To see him walk across the stage one step at time, painfully and slowly, is an awesome sight. awesome（adj）令人敬畏的；使人畏惧的；可怕的；极好的 He walks painfully, yet majestically, until he reaches his chair. painfully（adv）非常（用于强调不好性质或情形）；痛苦地；费力地，艰难地；极度地，剧烈地 majestically（adv）雄伟地，庄严地；威严地 reaches（n）河段；流域；边远地区；层；（v）伸出；到达 Then he sits down, slowly,puts his crutches on the floor, undoes the clasps on his legs, tucks one foot back and extends the other foot forward. clasp（n）扣子，钩子；握手；（vt）紧抱；扣紧；紧紧缠绕；（vi）扣住 undoes（vt）取消；解开；破坏；扰乱；（vi）撤消 tuck（vt）卷起；挤进；用某物舒适地裹住；使有褶裥；收拢；大口吃；使隐藏；（vi） 缝褶裥；缩拢；舒服地裹在里面；大口吃；（n）食物；船尾突出部；缝摺；抱膝式跳水；活力；鼓声 Then he bends down and picks up the violin, puts it under his chin, nods to the conductor and proceeds to play. violin（n） 小提琴；小提琴手 chin（n）下巴；聊天；引体向上动作；（vt）用下巴夹住；与…聊天；在单杠上作引体向上动作；（vi） 闲谈；作引体向上动作 proceed（vi）开始；继续进行；发生；行进；（n）收入，获利 By now, the audience is used to this ritual. audience（n） 观众；听众；读者；接见；正式会见；拜会 ritual（n）仪式；惯例；礼制；（adj）仪式的；例行的；礼节性的 You could hear it snap -it went off like gunfire across the room. gunfire（n）炮火；炮火声 We figured that he would have to get up, put on the clasps again, pick up the crutches and limp his way off stage-to either find another violin or else find another string for this one. figured（v） 是……的重要部分；认为；计算；（人）起重要作用；（虚构的人物的）出现；估计；在意料之中；用图表描绘；用图案装饰；（adj）饰有小图案的，有花纹的；图示的 limp（adj）柔软的，无力的；软弱的；（vi）跛行，一拐一拐地走；缓慢费力地前进；（n） 跛行 The orchestra began, and he played from where he had left off. orchestra（n）管弦乐队；乐队演奏处 Of course, anyone knows that it is impossible to play a symphonic work with just three strings. symphonic（adj）交响乐的；交响性的；和声的 I know that, and you know that, but that night Itzhak Perlman refused to know that. refused（v）拒绝，回绝；拒绝给，拒绝接受；（物）未应要求其作用（非正式）；（旧）不接受（某人的）求婚；（马）拒绝跨（栏等障碍物）；（n）垃圾，废弃物；（adj） 废弃的 You could see him modulating, changing, re-composing the piece in his head. modulating（v） 调制；（adj）[电子][通信] 调制的 re-composing （vt） 改组；重写；重新安排；使恢复镇静 There was an extraordinary outburst of applause from every corner of the auditorium. extraordinary（adj） 非凡的；特别的；离奇的；特派的 outburst（n）（火山、情感等的）爆发；破裂 applause（n）欢呼，喝采；鼓掌欢迎；掌声 Corner（n）角落，拐角处；地区，偏僻处；困境，窘境；（vi）囤积；相交成角；（vt）垄断；迫至一隅；使陷入绝境；把…难住 auditorium（n）礼堂，会堂；观众席 We were all on our feet, screaming and cheering, doing everything we could to show how much we appreciated what he had done. scream（vi）尖叫；呼啸；发出尖锐刺耳的声音；令人触目惊心；（vt）尖声喊叫；大叫大嚷着要求；（n）尖叫声；尖锐刺耳的声音；极其滑稽可笑的人 He smiled, wiped the sweat from his brow, raised his bow to quiet us, and then he said-not boastfully, but in a quiet, pensive, reverent tone-“You know, sometimes it is the artist’s task to find out how much music you can still make with what you have left.” boastfully（adv）自夸地 pensive（adj）深思的；忧郁的悲伤的 reverent（adj）虔诚的；恭敬的；尊敬的 artist（n）艺术家；美术家（尤指画家）；大师 Perhaps that is the definition of life-not just for artists, but for all of us. definition（n）定义；[物] 清晰度；解说 so he makes music with three strings, and the music he made that night with just three strings was more beautiful, more sacred, more memorable, than any that he had ever made before, when he had four strings. memorable（adj）显著的，难忘的；值得纪念的 So, perhaps our task in this shaky, fast-changing bewildering world in which we live is to make music, at first with all that we have, and then, when that is no longer possible, to make music with what we have left. bewilder（vt）使迷惑，使不知所措 shaky（adj）摇晃的；不可靠的；不坚定的 task（n）困难的）任务，工作；（语言教学中的）活动；（v）派给某人（任务）；对（手段或能力）要求极高 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:9:3","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B Trouble comes to all, but while it makes some people stronger and better in every way, it submerges others so that they never rise again. submerge（vt）淹没；把…浸入；沉浸；（vi）淹没；潜入水中；湮没 Those who meet difficulty and adversity in the feeble strength of their finite minds and false personality are speedily overwhelmed and broken by the storms of life. adversity（n）逆境；不幸；灾难；灾祸 finite（adj）有限的；限定的；（n）有限之物 personality（n）个性；品格；名人 speedily（adv）迅速地；赶紧 overwhelmed（adj） 被压倒的，被淹没的；受宠若惊的，不知所措的 But those who rely upon, and have faith in, the Power within them, can never be overwhelmed, neither can they ever be defeated. rely（vi）依靠；信赖 defeated（v）击败，挫败；（adj）被击败的；受挫的，泄气的 The Power, being infinite, is always sufficient, no matter how great the need may be. infinite（adj）无限的，无穷的；无数的；极大的；（n）无限；[数] 无穷大；无限的东西（如空间，时间） One who realizes his own real spiritual identity knows that he can never be defeated, and that he can never really fail. spiritual（adj）精神的，心灵的；宗教的；（人）高尚的；（n）圣歌 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:9:4","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Tips for English Learning To eliminate this poor reading habit, do not allow yourself to re-read material. To reduce the number of times that your eyes skip back to a previous sentence, run a pointer along the line as you read. eliminate（vt）消除；排除 reduce（vt）减少；降低；使处于；把…分解；（vi） 减少；缩小；归纳为 The speed at which you read using this method will largely depend on the speed at which you move the pointer. largely（adv）主要地；大部分；大量地 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:9:5","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Unit 10 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:10:0","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text A A US Congressman once proclaimed that, congressman（n）国会议员；众议院议员 There can be no doubt that the transportation sector is the most critical sector of our economy. transportation（n）运输；运输系统；运输工具；流放 sector（n）部门；扇形，扇区；象限仪；函数尺； critical（adj）鉴定的；[核] 临界的；批评的，爱挑剔的；危险的；决定性的；评论的 economy（n） 经济；节约；理财 It is a cheaper and environmentally friendly alternative. cheaper（adj）成本更低，比较便宜的 environmentally（adv）有关环境方面 alternative（adj） 供选择的；选择性的；交替的；（n） 二中择一；供替代的选择 You have to have your own car or bike, rent a car, or pay upfront for a taxi to go from point A to point B. Otherwise you end up basked in sweat and sunburn traveling to work every day. upfront（adj）预付的；在前面的；正直的，坦率的；（adv）在前面；提前支付（工资） otherwise（adv）否则；另外；在其他方面 sunburn（n）晒黑；[皮肤] 晒斑；（vi）晒伤皮肤；晒红皮肤；晒黑皮肤；（vt）晒伤；晒黑；晒红 According to research done by the American Public Transportation Association. individual can save up to 59, 515 annually by parking their cars at home and using public transportation instead. In this economy, saving money has become a main concern in most households. individual（adj）个人的；个别的；独特的；（n）个人，个体 household（n）一家人，一户；同住一所房子的人；王室 (the Household)；（adj）家庭的，家用的；家喻户晓的 When you switch from driving your car to taking public transport, you are reducing your carbon footprint and making a great step forward in saving the environment. carbon（n）碳；碳棒；复写纸；（adj）碳的；碳处理的 footprint（n）足迹；脚印 Ninety-five percent of transportation is almost completely reliant upon petroleum products with the exception of railways using electrical power. petroleum（n） 石油 electrical（adj）有关电的；电气科学的 When we strengthen our public transportation services, we are consequently lessening this oil demand and dependence. consequently（adv）因此；结果；所以 All in al, public transportation improves our way of life, strengthens the community. provides new jobs for the public and gives us a cleaner environment. strengthen（vt）加强；巩固；（vi）变强；变坚挺 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:10:1","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B Well, this depends on preference and/or the individual’s’ circumstances. circumstance（n） 环境；状况；境遇；（尤指）经济状况；命运；（vt）处于某种情况 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:10:2","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text B When take public transport, I always end up seeing a balanced view of regular folks,which is different from how they’re usually depicted in the profit-driver media balance（n）平衡；余额；匀称；（vt） 使平衡；结算；使相称；（vi）保持平衡；相称；抵销 regular（adj）定期的；有规律的；合格的；整齐的；普通的；（n）常客；正式队员；中坚分子；（adv）定期地；经常地 media（n） 媒体；媒质；血管中层；浊塞音；中脉 they don’t mean to harm me intentionally, despite a few terrible, harsh experiences I’ve had with some bad people before. harsh（adj）严厉的；严酷的；刺耳的；粗糙的；刺目的；丑陋的 intentionally（adv）故意地，有意地 The meaningful experience of receiving respect from and giving respect to others. meaningful（adj） 有意义的；意味深长的 receiving（n）接受；（v）收到；遭受；接受（治疗）；承受；对……作出反应；接待；接纳；接收；购买（赃物）；接（发球） respect（n）尊敬，尊重；方面；敬意；（vt）尊敬，尊重；遵守 It’s a great experience seeing able-bodied men giving up seats for the elderly, disabled, or pregnant women. elderly（adj）上了年纪的；过了中年的；稍老的 disabled（adj）残废的；有缺陷的；（v）使…失去能力 pregnant （adj）怀孕的；富有意义的 I feel more warmth among people when on bus or the train. I see people behaving genuinely pleasant toward co-passengers, and I realize it takes lot of guts to do this especially during these difficult times. genuinely（adv） 真诚地；诚实地 especially（adj）特别的；特殊的 I always get the opportunity to save money, and am actually gaining pennies these days. opportunity（n）时机，机会 You save on the parking fees, the toll fees, the insurance cost, the repair and maintenance costs. and the perceived costs of aggravation from motorists on the road, the fuel, among other costs. insurance（n）保险；保险费；保险契约；赔偿金 maintenance（n）维护，维修；保持；生活费用 perceived（v）感知；认为；（adj）感知到的；感观的 I occupy the least space, which is actually wherever I happened to be standing or sitting, which contributes to my baggage being very economical and lighter to carry. contribute（vt）贡献，出力；投稿；捐献；（vi）贡献，出力；投稿；捐献 economical（adj）经济的；节约的；合算的 Motorists always have to consider that they actually are contributing more to accumulated environmental damage when they use fossil-sourced fuel for their cars. accumulate（vi）累积；积聚；（vt）积攒 you’ll be contributing more to saving what’s left of our habitat by keeping away from using less of the natural resources. resource（n）资源，财力；办法；智谋；（vi） 向…提供资金 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:10:3","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B Although they are not measured in dollars and cents, they still have to be considered whenever you make a financial decision. cent（n）分；一分的硬币 financial（adj）金融的；财政的，财务的 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:10:4","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Tips for English Learning A tuner must be a kind of radio！ This is a simple example but it demonstrates what you need to focus on: tuner（n）调谐器；调音师 demonstrate（vt） 证明；展示；论证；（vi）示威 The above-mentioned ideas on how to listen seem to encourage you to not understand everything. above-metioned（adj）上述的，上面提到的 Listening needs a great amount practice and patience. practice（n）实践；练习；惯例；（vi）练习；实习；实行；（vt）练习；实习；实行 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:10:5","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Unit 11 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:11:0","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text A Thanks to the late 20th century technology, Maria of Denmark and Martijin of Holland met on a chatline. chatline（n）聊天热线；青少年热线交谈服务 It was not easy to arrange as the young man and his lady were separated by 700 very real kilometers, separated（adj）分开的；分居；不在一起生活的 They’ve created a home page to let the world know how they’ve found happiness via the Internet and introduce couples who’ve met under similar circumstances. couple（n） 对；夫妇；数个；（vi）结合；成婚；（vt）结合；连接；连合 Internet romance, according to some, is a bizarre method, and to others it is a natural way for the90 ‘s’ to meet potential mates. romance（n）传奇；浪漫史；风流韵事；冒险故事；（vi）虚构；渲染；写传奇 bizarre（adj）奇异的 potential（adj）潜在的，可能的；势的；（n）潜能，可能性；电势 Romances formed on the Internet follow a characteristic script. characteristic（adj） 典型的；特有的；表示特性的；（n）特征；特性；特色 script（n）脚本；手迹；书写用的字母；（vt）把…改编为剧本；（vi）写电影脚本 The initial light exchanges, whether by e-mail or in chat rooms, are generally followed by increasingly self-revealing- topics. and then after while,the two strangers perceive each other as a true friend. generally（adv） 通常；普遍地，一般地 increasingly（adv） 越来越多地；渐增地 perceive（vt）察觉，感觉；理解；认知；（vi)感到，感知；认识到 Hearts open, an avalanche of e-mail crosses cyberspace carrying literary quality, and electronic messages are even enhanced with verses and virtual gifts (flowers, kisses, animated pictures). avalanche（n）雪崩 cyberspace（n）（电子计算机创造的） 通讯、信息空间 literary（adj）文学的；书面的；精通文学的 quality（n）质量，[统计] 品质；特性；才能 electronic（adj）电子的；（ n）电子电路；电子器件 enhanced（v） 提高，增强；（adj）提高的，增强的 verse（n）诗，诗篇；韵文；诗节；（vi）作诗；（vt）使熟练，使精通 animate（vt） 使有生气；使活泼；鼓舞；推动；（adj）有生命的 Could any heart with romantic inclinations resist? inclination（n）倾向，爱好；斜坡 resist（vi）抵抗，抗拒；忍耐；（vt）抵抗；忍耐，忍住；（n）[助剂] 抗蚀剂；防染剂 When you reach for the mouse with sweaty palms and butterflies in the stomach to look in the in-box for new mail-there’s just no way to escape the fact-love has arrived. sweaty（adj）出汗的；吃力的；使人出汗的 palm（n）手掌；棕榈树；掌状物 butterfly（n）蝴蝶；蝶泳；举止轻浮的人；追求享乐的人 Perhaps one significant difference is that communication plays such a large part. significant（adj）重大的；有效的；有意义的；值得注意的；意味深长的；（n）象征；有意义的事物 While before real date we fix our hair and our clothes, on the Internet we polish our intellect, imagination and personality. In essence, the sequence is reversed intellect（n）智力，理解力；知识分子；思维逻辑领悟力；智力高的人 imagination（n）想象力；空想；幻想物 essence（n）本质，实质；精华；香精 sequence（n） 序列；顺序；续发事件 There are those, of course, who favor Internet relationships claiming that the intensity of the emotional relationship that develops in such a way is superior to the mere stirring of the flesh. intensity（n）强度；强烈；[电子] 亮度；紧张 emotional（adj）情绪的；易激动的；感动人的 superior（adj）上级的；优秀的，出众的；高傲的；（n）上级，长官；优胜者，高手；长者 I would never have suspected that the first person I met by e-mail would be a German chimney sweeper, with whom, after a year of correspondence albeit not romantic, a common interest still exists. suspect（v）怀疑；猜想；（n） 嫌疑犯；（adj）靠不住的；可疑的 chimney（n）烟囱 correspondence（n）通信；一致；相当 While there are those who can use the Net to their advantage extracting useful information there are those who become addicts losing common sense, hopping from chat room to chat room, writing piles of e-mails full of lies to chosen victims, and whose virtual reality. the flirtations, become part of their everyday lives, as if a disease. extracting（v）提取；强行索取；摘录；选取；（用力）取出；得到（某种感觉或品质）；（数）开方；（化）萃取 flirtation（n）调情；调戏；挑逗；不认真的考虑 According to the confession of a multiple substance addict’, it was easier to give up cocaine than the iRC22. cocaine（n）可卡因 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:11:1","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B Relationships are becoming increasingly common across the Internet in all their varied forms. increasingly（adv）越来越多地；渐增地 varied（adj）各式各样的；多变的；杂色的；（v）变化，改变；使多样化 In our new digital age these online relationships could very well be the next logical step for humanity. digital（adj）数字的；手指的；（n）数字；键 humanity（n）人类；人道；仁慈；人文学科 These online relationships often cross cultural,economical, national, age and societal boundaries in ways not even possible in the real world. economical（adj）经济的；节约的；合算的 societal（adj） 社会的 boundaries（n）边界，界线 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:11:2","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text B The Internet has had profound effect on society over the last two decades. profound（adj） 深厚的；意义深远的；渊博的 decade（n）十年，十年期；十 Although it began as a government operation over time this innovative technology eventually evolved into a public novelty. evolved（v）使）逐渐形成；（有机体或生物特征）进化；释放（气体或热量）；（adj）进化了的 novelty（n）新奇；新奇的事物；新颖小巧而廉价的物品 For many, the Internet has become an essential for daily living, no longer the fun novelty it was 10 years ago. essential（adj） 基本的；必要的；本质的；精华的；（n）本质；要素；要点；必需品 Even a decade ago if you were to think about whether or not the Internet had a signiticant impact on society. the answer would likely have been probably not. signiticant（adj）重大的；有效的；有意义的；值得注意的；意味深长的 The Internet has become, for the most part, an absolute necessity, either by requirement or by desire. requirement（n） 要求；必要条件；必需品 desire（n）欲望；要求，心愿；性欲；（vt）想要；要求；希望得到…；（vi）渴望 Going online has become as natural as doing other daily tasks people have traditionally done. traditionally（adv）传统上；习惯上；传说上 It has improved communication, simplified handling tasks and errands, offered huge convenience, enabled faster processing, and provided more options, all of which have freed more time to do other things. errand（n）使命；差事；差使 simplified（adj）简化了的；（v）简化，精简 enabled（v）使能够，使成为可能；授权给，批准；（计）启动，激活（ option（n）选项；选择权；买卖的特权 people are impatient because they have become accustomed to instant gratification, and using the Internet also takes up a lot of time. gratification（n）满意；喜悦；使人满意之事 As websites such as Facebook and other socially based interactions increase in usage, many hours a day are consumed as people keep up with their various networks, taking away from other activities. socially（adv） 在社会上；在社交方面；善于交际地 interaction（n）相互作用，相互影响；交流；[数] 交互作用；互动 consumed（adj）充满的；对…着迷的 When looking at it from the latter perspective, one may wonder whether or not the Internet has truly benefited society. perspective（n）观点；远景；透视图；（adj）透视的 benefited（adj） 受益的 This is not only evidenced by the many activities people engage in when they connect to the Internet but also by the continuous progression and development of mobile devices such as smartphones. evidenced（n）证实 engage（vt）吸引，占用；使参加；雇佣；使订婚；预定；（vi）从事；参与；答应，保证；交战；啮合 continuous（adj） 连续的，持续的；继续的；连绵不断的 smartphone（n） 智能电话 People also expect to receive rapid responses when doing business and personal tasks. rapid（adj）迅速的，急促的；飞快的；险峻的；（n）急流；高速交通工具，高速交通网 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:11:3","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B However, these are often only viewable to Internet users located within the United States. viewable（adj）看得见的；值得一看的 The major benefits of Internet TV include programming selection and flexibility. selection（n）选择；挑选 flexibility（n）灵活性；弹性；适应性 Unlike regular television, Internet TV users can select virtually any program and episode they choose to watch at any given time. episode（n）一段经历；插曲；一段情节；（电视连续剧或广播的）一集；插话；有趣的事件 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:11:4","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Tips for English Learning Perhaps the easiest way to start writing fiction in English is with a diary, changing any details you like to make it more interesting and adding more and more fantasy as the weeks go on. detail（n）细节，琐事；具体信息；次要部分；分队，支队 fantasy（n）幻想；白日梦；幻觉；（adj）虚幻的；（vt）空想；想像；（vi）耽于幻想；奏幻想曲 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:11:5","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Unit 12 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:12:0","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text A I woke up feeling cranky. cranky（adj）暴躁的；古怪的；动摇的 I didn’t want to do anything that resembled responsible behavior It was that kind of day. resemble（vt） 类似，像 Yes, there it was, a dull throb just behind my eyes. throb（v）（有规律地）抽动；（有节奏地）跳动；抽搐，阵痛；热闹 I shuffled back to bed, wiggled under the covers and shut my eyes. shuffle（v）洗牌；推诿，推卸；拖曳，慢吞吞地走… wiggle（vi）使……摆动，使……扭动 But no,there was that headache and the beginning of a sniffle. Better get the tissues. sniffle（n）抽鼻子（声）；吸鼻子；（感冒引起的）流鼻涕；轻微感冒；（v）（尤指因哭泣或患感冒）抽鼻子 tissue（n）组织；纸巾；薄纱；一套；（vt）饰以薄纱；用化妆纸揩去 I opened the book and settled against the pillows. settle（vi）解决；定居；沉淀；下陷；（vt）解决；安排；使…定居；（n）有背长椅 pillow（n）枕头；（vt） 垫；枕于…；使…靠在；（vi）枕着头；靠在枕上 Another twenty pages and was stretching. stretch（v）柔软或弹性物）伸展；拉紧；（使）过分延长；（资金、资源）足够；大量要求；（使）最大限度利用（才能）；夸大；延续；（n）（四肢或身体的）舒展；（肌肉的）伸张；（材料或服装的）伸展力；困难的任务；（陆地或水域）连绵的一片；（时间）连续的一段；（非正式）服刑期；（赛马跑道的）终点直道；抢风航行的距离；（非正式）加长机动车；（adj）弹性的，可拉伸的 I should try to crack the report I was working on. crack（v）使破裂；将（谷物）粗磨； 砸开（保险箱）；成功获得；（可听到响声的）重击；（使）发出爆裂声；（突然）变嘶哑；使屈服；（非正式）吃不消； （非正式）突然大笑；（非正式）找到解决方法；阻止；开瓶；说（笑话）；使（碳氢化合物）裂化；（n）裂缝；裂纹；缝隙；爆裂声；（可听到响声的）重击；尝试；强效可卡因；（挖苦人的）玩笑；好时光；（观点或制度中的）缺陷；声变；（adj）训练有素的，技艺高明的，最好的 What if I was contagious? contagious（adj）感染性的；会蔓延的 My family was resourceful enough to scrounge clothing for the next day. resourceful（adj）资源丰富的；足智多谋的；机智的 scrounge（vi）搜寻；乞讨；（vt）搜寻；乞讨；骗取；（n）讨要；索要 Take a bubble bath. bubble（n） 气泡，泡沫，泡状物；透明圆形罩，圆形顶；（vi）沸腾，冒泡；发出气泡声；（vt） 使冒泡；滔滔不绝地说 I poured half the bottle of bath gel into the streaming water and added a hearty handful of chamomile bath salts. poured（v）灌，倒；倾泻；（雨）倾盆而下；涌进，涌出；斟（饮料）；纷至沓来；（n）灌，注；倾泻；倾盆大雨 handful（n）少数；一把；棘手事 chamomile（n）甘菊；黄春菊 Then I lit a vanilla-scented candle and gingerly stepped into the bathtub. candle（n）蜡烛；烛光；烛形物；（vt）对着光检查 gingerly（adv）小心翼翼地；慎重地；（adj）谨慎的；轻手轻脚的；慎重的 With a grateful sigh, immersed myself in my homemade spa. immerse（vt） 沉浸；使陷入 homemade（adj） 自制的，家里做的；国产的 grateful（adj） 感谢的；令人愉快的，宜人的 By late afternoon, I was back at it, refreshed physically, mentally and emotionally. And rather than feeling helpless, felt empowered. refresh（vt）更新；使……恢复；使……清新；消除……的疲劳；（vi）恢复精神；喝饮料，吃点心；补充给养 mentally（adv） 精神上，智力上；心理上 emotionally（adv）感情上；情绪上；令人激动地；情绪冲动地 empower（vt）授权，允许；使能够 I had given myself permission to listen and respond to my needs, to care for myself the way I tended to my family. permission（n） 允许，许可 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:12:1","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B Don’t undermine your worth by comparing yourself with others. undermine（vt）破坏，渐渐破坏；挖掘地基 Neither can be retrieved. Life is not a race, but a journey to be savored each step of the way. retrieve（vt）检索；恢复；重新得到；（vi）找回猎物；（n）检索；恢复，取回 savor（vt）尽情享受；使有风味；加调味品于；品尝，欣赏；（vi）有…的滋味；带有…的性质；（n）滋味；气味；食欲 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:12:2","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Text B These changes, combined with a natural desire to feel accepted mean it can be tempting for people to compare themselves with others. combined（adj） 结合的；[数] 组合的；（v）使结合；联合 tempt（vt）诱惑；引起；冒…的风险；使感兴趣 But it’s impossible to measure ourselves against others because the changes that come with puberty are different for everyone. puberty（n）青春期；开花期 others are late bloomers Some get a temporary layer of fat to prepare for a growth spurt; others fill out permanently, and still others feel like they stay skinny no matter how much they eat. bloomer（n）初轧机；从前女用灯笼裤；纰漏；开花植物 temporary（adj）暂时的，临时的；（n）临时工，临时雇员 spurt（vi）冲刺；冲出；（n）冲刺；喷射；（vt）喷射；射出 permanently（adv）永久地，长期不变地 Girls may feel pressure to be thin but guys may feel like they don’t look big or muscular enough. muscular（adj） 肌肉的；肌肉发达的；强健的 Some parents spend more time criticizing their kids and the way they look than praising them, which can reduce kids’ ability to develop good self-esteem. criticizing（n）批评；批判 praise（v）赞扬；（尤指唱歌）歌颂（上帝）；（n）赞扬，称赞；（对上帝的）颂扬；崇拜 Sometimes racial and ethnic prejudice is the source of such comments. racial（adj）种族的；人种的 ethnic（adj）种族的；人种的 prejudice（n）偏见；侵害；（vt）损害；使有偏见 A positive, optimistic attitude can help people develop strong self-esteem. optimistic（adj） 乐观的；乐观主义的 Ultimately, you have to be happy with yourself. ultimately（adv）最后；根本；基本上 Next, identify which aspects of your appearance you can realistically change and which you can’t. realistically（adv）现实地；实际地；逼真地 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:12:3","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Section B But it is precisely oneself that one has the least understanding of. precisely（adv）精确地；恰恰 When you are going downhill you tend to underestimate yourself, mistaking difficulties and adversities for your own incompetence. downhill（adv）下坡；向下；每况愈下；（adj）下坡的；容易的；（n）下坡；滑降 underestimate（vt）低估；看轻；（n）低估 incompetence（n）无资格，不胜任；无能力；不适当；不熟练 It’s likely that you think it wise for yourself to know your place and stay aloof from the world wearing a mask of cowardice behind which the flow of sap in your life will be retarded. aloof（adj）冷淡的；远离的；冷漠的；（adv）远离；避开地 mask（n）面具；口罩；掩饰；（vt） 掩饰；戴面具；使模糊；（vi）掩饰；戴面具；化装 cowardice（n） 怯懦；胆小 To get a thorough understanding o oneself is to gain a correct view of oneself and be a sober realist, aware of both one’s strength and shortage. sober（adj）冷静的，清醒的；未醉的；（vt）使严肃；使醒酒，使清醒 realist（n）现实主义者 shortage（n）缺乏，缺少；不足 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:12:4","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":["自考"],"content":"Lips for English Learning There are a number of ways to add variety to your writing. variety（n）多样；种类；杂耍；变化，多样化 In general, case short sentences to emphasize ideas. general（adj）一般的，普通的；综合的；大体的；（n） 一般；将军，上将；常规 emphasis（n）重点；强调；加强语气 Vary sentence types by including occasional questions and commands. occasional（adj）偶然的，临时的；（家具）特定场合才使用的；（文章等）特殊场合所作的；不定期雇用的 ","date":"2020-04-10","objectID":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/:12:5","tags":["英语"],"title":"自考英语课本词汇","uri":"/posts/%E8%87%AA%E5%AD%A6%E8%80%83%E8%AF%95/%E8%87%AA%E8%80%83%E8%8B%B1%E8%AF%AD%E8%AF%BE%E6%9C%AC%E5%8D%95%E8%AF%8D/"},{"categories":null,"content":"这里是小康的学习笔记记录。此博客的源码仓库Github ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"About Me","uri":"/about/"}]