<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Node - Tag - 小康的学习记录</title>
        <link>https://study.tzki.cn/tags/node/</link>
        <description>Node - Tag - 小康的学习记录</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>sviptzk@163.com (Dreamy.TZK)</managingEditor>
            <webMaster>sviptzk@163.com (Dreamy.TZK)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 04 Jul 2020 18:17:50 &#43;0800</lastBuildDate><atom:link href="https://study.tzki.cn/tags/node/" rel="self" type="application/rss+xml" /><item>
    <title>八、NPM包管理</title>
    <link>https://study.tzki.cn/posts/notes/20200704/20200704-3/</link>
    <pubDate>Sat, 04 Jul 2020 18:17:50 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://study.tzki.cn/posts/notes/20200704/20200704-3/</guid>
    <description><![CDATA[如何写NodeJs模块  遵守commentjs规范。  导入模块 暴露出去（导出）    一个简单的示例：
1 2 3 4 5 6 7 8 9 10 11 12 13  // 定义一个对象 let db = { baseUrl: &#34;http://127.0.0.1:3000/&#34;, insert: function () { console.log(&#34;插入方法&#34;); }, delete: function () { console.log(&#34;删除方法&#34;); }, }; // 将其暴露出去 module.exports = db;   在我们的模块中定义一个对象，并将其暴露出去。接下来在我们自己的js文件中去使用这个对象。
1 2  const myMoudle = require(&#34;./01-自己写的模块.js&#34;); myMoudle.insert();   写一个自己的模块 NPM发布包   进入待发布的目录，然后初始化目录npm init。并依次填入包名、版本、描述等信息。如果没有可以跳过（回车）。
  注册NPM账号]]></description>
</item><item>
    <title>七、NodeJs数据库管理</title>
    <link>https://study.tzki.cn/posts/notes/20200704/20200704-2/</link>
    <pubDate>Sat, 04 Jul 2020 15:56:50 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://study.tzki.cn/posts/notes/20200704/20200704-2/</guid>
    <description><![CDATA[建表 MySQL程序可以使用PHP study集成工具。链接、操作数据库可以使用phpstudy自带的工具也可以使用navicat工具。
SQL语句-增删改查   插入数据
1  insert into 表名(字段名1，字段名2) values(值1，值2);   例如：
1  insert into user(name,description) values(&#39;陈浩南&#39;,&#39;铜锣湾扛把子&#39;);     删除数据
1  delete from 表名 where 条件;   条件一定要写，如果不写则会删除该表中所有的数据删除。
例如：
1  delete from user where id&gt;3;     修改数据
1  update 表名 set 字段名1=新值1,字段名2=新值2 where 条件;   条件一定要写，如果不写则会修改数据表中的全部数据
例如：
1  update user set name=&#39;子风兄&#39;,description=&#39;比波波还骚&#39; where id=3;     查询数据]]></description>
</item><item>
    <title>六、中间件与跨域</title>
    <link>https://study.tzki.cn/posts/notes/20200704/20200704-1/</link>
    <pubDate>Sat, 04 Jul 2020 11:01:50 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://study.tzki.cn/posts/notes/20200704/20200704-1/</guid>
    <description><![CDATA[什么是中间件 在路由相应之前就会执行中间件的内容，例如在中间件中进行赋值，这种就可以在路由执行时使用这个值。
所以中间件就是服务器开启之后和路由响应之前执行的一个函数。这个函数可以操作req与res。使用next()向下传递到下一个中间件，最后传到路由。
例如开启三个中间件的写法：
1 2 3 4 5 6 7 8 9 10 11 12 13 14  app.use((req, res, next) =&gt; { console.log(&#34;中间件1&#34;); req.requestTime = Date.now(); next(); }); app.use((req, res, next) =&gt; { console.log(&#34;中间件2&#34;); next(); }); app.get(&#34;/&#34;, (req, res) =&gt; { console.log(Date.now() - req.requestTime); res.send(&#34;Hello World!&#34;); });   什么是跨域   浏览器使用ajax时，如果请求的接口地址和当前打开的页面地址不同源称之为跨域。
协议和地址、端口都一样成为同源。有一个不同则为不同源。
  同源与不同源的意义
浏览器安全策略。
  设置响应头允许跨域 只需要在响应头处设置Access-Control-Allow-Origin为*即可。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  app.]]></description>
</item><item>
    <title>五、express实战-英雄管理系统</title>
    <link>https://study.tzki.cn/posts/notes/20200703/20200703-2/</link>
    <pubDate>Fri, 03 Jul 2020 14:55:50 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://study.tzki.cn/posts/notes/20200703/20200703-2/</guid>
    <description><![CDATA[查看源码后端路由 简单来说，注册路由就是写接口
登录接口 登录接口实现很简单，只需要接收post传来的参数，然后进行验证即可。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  const express = require(&#34;express&#34;); const bodyParser = require(&#34;body-parser&#34;); app.use(bodyParser.urlencoded({ extended: false })); // 登录接口 app.post(&#34;/login&#34;, (req, res) =&gt; { // 接收用户传递过来的用户名和密码  let { username, password } = req.body; if (username == &#34;admin&#34; &amp;&amp; password == &#34;123&#34;) { res.send({ code: 200, msg: &#34;登陆成功&#34;, }); } else { res.]]></description>
</item><item>
    <title>四、node服务器搭建</title>
    <link>https://study.tzki.cn/posts/notes/20200703/20200703-1/</link>
    <pubDate>Fri, 03 Jul 2020 14:55:50 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://study.tzki.cn/posts/notes/20200703/20200703-1/</guid>
    <description><![CDATA[什么是端口 一台电脑可以部署多个服务器，根据端口不同找到不同的服务器。
默认的http端口为80端口。
web服务器读取网页并返回  使用http模块开启一个服务器 在服务器内部读取文件，将读取到的字符串内容作为服务器的响应返回  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  const http = require(&#34;http&#34;); const fs = require(&#34;fs&#34;); const path = require(&#34;path&#34;); const server = http.createServer((req, res) =&gt; { // 拼接路径  const filePath = path.join(__dirname, &#34;index.html&#34;); fs.readFile(filePath, &#34;utf-8&#34;, (err, data) =&gt; { if (err == null) { // 返回页面  res.end(data); } else { res.]]></description>
</item><item>
    <title>三、NodeJs模块化</title>
    <link>https://study.tzki.cn/posts/notes/20200702/20200702-1/</link>
    <pubDate>Thu, 02 Jul 2020 17:04:50 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://study.tzki.cn/posts/notes/20200702/20200702-1/</guid>
    <description><![CDATA[内置模块的基本使用(删除文件) 1 2 3 4 5 6 7 8 9 10 11 12  const fs = require(&#34;fs&#34;); /** * 删除文件 * @param {string} &#34;./temp/test.txt&#34; 被删除文件的路径 * @param {function} (err) 回调函数，将错误信息传入其中 */ fs.unlink(&#34;./temp/test.txt&#34;, (err) =&gt; { if (err) throw err; console.log(&#34;已成功删除 test&#34;); });   fs模块读文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14  const fs = require(&#34;fs&#34;); /** * 读取文件信息 * @date 2020-07-01 * @param {sting} &#34;.]]></description>
</item><item>
    <title>一、Node.js入门</title>
    <link>https://study.tzki.cn/posts/notes/20200701/20200701-1/</link>
    <pubDate>Wed, 01 Jul 2020 17:04:50 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://study.tzki.cn/posts/notes/20200701/20200701-1/</guid>
    <description><![CDATA[什么是NodeJs NodeJs是一个基于谷歌V8引擎的运行环境。(服务器上的v8引擎就是node.js)
其作用是让js拥有开发服务端的功能
环境安装 官方地址：https://nodejs.org/zh-cn/
安装完成后，添加环境变量。命令行终端输入node -v即可输出版本号。
同样的，安装完NodeJs之后会自动安装npm（node package manager）。输入npm -v也会出现版本号。
 npm可以到NPM去寻找包，类似GitHub。
 运行NodeJs   VSCode中使用RunCoder插件
  终端
注意路径问题，执行命令为node 文件名
 VSCode中的终端同理。
   双击node.exe，在其内编写代码
  服务器端与浏览器端 服务端的JavaScript只有ECMAScript，也就意味着在NodeJs]]></description>
</item></channel>
</rss>
